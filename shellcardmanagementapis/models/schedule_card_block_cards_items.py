# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class ScheduleCardBlockCardsItems(object):

    """Implementation of the 'ScheduleCardBlockCardsItems' model.

    TODO: type model description here.

    Attributes:
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.   Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.  Example:  86-Philippines  5-UK
        col_co_id (int): Collecting Company Id of the selected payer.  
            Optional if ColCoCode is passed else Mandatory.  Example: 
            1-Philippines  5-UK
        account_id (int): Account Id of the customer. Optional if
            AccountNumber is passed, else Mandatory.
        account_number (str): Account Number of the customer. Optional if
            AccountId is passed, else Mandatory.
        payer_id (int): Payer id of the customer.  Optional if PayerNumber is
            passed, else Mandatory.   Example: 123456
        payer_number (str): PayerNumber of the customer. Optional if PayerId
            is passed, else Mandatory.
        card_id (int): Unique Id of the card. Optional if PAN is passed, else
            Mandatory.
        pan (str): PAN of the card. Optional if CardId is passed, else
            Mandatory.
        card_expiry_date (str): Expiry date of the card. Optional if CardId is
            passed, else Mandatory. Format: yyyyMMdd Example: 20170930
        action (str): Action Mandatory Possible values are: • AddOrUpdate –
            adds a new request or updates any existing requests, with
            overlapping dates, for the card • AddAndOverwriteAll - all the
            existing requests of the given card will be removed and a new
            request with the specified FromDate and ToDate will be added. •
            Delete – deletes any existing request with the same start date and
            end date for the card • DeleteAll – deletes all saved future dated
            requests (all block and unblock requests) of the card.
        from_date (str): Effective start date of Block / Unblock  Allowed
            Formats: –  • yyyyMMdd  • yyyyMMdd HH:mm  Eg: 20230512 14:30,
            20230512  Optional  Default value:   •  If the card status is
            “Active” then Current date & Time  • If the card status is
            “TemporaryBlock (Customer)” then null.  Note:  • Time is
            considered only when “IsTimeSupported” is true else it will be
            treated as a date.  • Time will be passed in UTC time-zone.  • If
            the Card Status is “Temporary Block (Customer)” and FromDate is
            provided – The fromdate & time is considered as starting period of
            unblock request.
        to_date (str): Effective end date of Block / Unblock Allowed Formats:
            – • yyyyMMdd • yyyyMMdd HH:mm Eg: 20230512 14:30, 20230512
            Optional – When the Card status is Active else mandatory. When not
            provided, the card will remain blocked until manually unblocked.
            Note: • Time is considered only when the “IsTimeSupported” flag is
            set as true, else it will be considered as only date. • Date &
            Time passed in the request will be considered in UTC time-zone. •
            If the card is currently in ‘Temporary Block (Customer)’ status,
            then this date is treated as the unblock date and is mandatory. •
            If the Card Status is “Temporary Block (Customer)” and FromDate &
            ToDate is provided - The request will be considered as a scheduled
            specific period unblock request.
        caller (str): The caller to be notified with the status of the
            scheduled card block / unblock request.  Mandatory, if
            NotifyCaller is true.   Maximum field length: 20
        notify_caller (bool): True/False. Optional. Default: False If true,
            the caller would be notified back with the status as success or
            failure after the scheduled card block / unblock request is
            processed.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "action": 'Action',
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber',
        "card_id": 'CardId',
        "pan": 'PAN',
        "card_expiry_date": 'CardExpiryDate',
        "from_date": 'FromDate',
        "to_date": 'ToDate',
        "caller": 'Caller',
        "notify_caller": 'NotifyCaller'
    }

    _optionals = [
        'col_co_code',
        'col_co_id',
        'account_id',
        'account_number',
        'payer_id',
        'payer_number',
        'card_id',
        'pan',
        'card_expiry_date',
        'from_date',
        'to_date',
        'caller',
        'notify_caller',
    ]

    _nullables = [
        'caller',
    ]

    def __init__(self,
                 action=None,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 pan=APIHelper.SKIP,
                 card_expiry_date=APIHelper.SKIP,
                 from_date=APIHelper.SKIP,
                 to_date=APIHelper.SKIP,
                 caller=APIHelper.SKIP,
                 notify_caller=APIHelper.SKIP):
        """Constructor for the ScheduleCardBlockCardsItems class"""

        # Initialize members of the class
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if pan is not APIHelper.SKIP:
            self.pan = pan 
        if card_expiry_date is not APIHelper.SKIP:
            self.card_expiry_date = card_expiry_date 
        self.action = action 
        if from_date is not APIHelper.SKIP:
            self.from_date = from_date 
        if to_date is not APIHelper.SKIP:
            self.to_date = to_date 
        if caller is not APIHelper.SKIP:
            self.caller = caller 
        if notify_caller is not APIHelper.SKIP:
            self.notify_caller = notify_caller 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        action = dictionary.get("Action") if dictionary.get("Action") else None
        col_co_code = dictionary.get("ColCoCode") if dictionary.get("ColCoCode") else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if dictionary.get("PayerNumber") else APIHelper.SKIP
        card_id = dictionary.get("CardId") if dictionary.get("CardId") else APIHelper.SKIP
        pan = dictionary.get("PAN") if dictionary.get("PAN") else APIHelper.SKIP
        card_expiry_date = dictionary.get("CardExpiryDate") if dictionary.get("CardExpiryDate") else APIHelper.SKIP
        from_date = dictionary.get("FromDate") if dictionary.get("FromDate") else APIHelper.SKIP
        to_date = dictionary.get("ToDate") if dictionary.get("ToDate") else APIHelper.SKIP
        caller = dictionary.get("Caller") if "Caller" in dictionary.keys() else APIHelper.SKIP
        notify_caller = dictionary.get("NotifyCaller") if "NotifyCaller" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(action,
                   col_co_code,
                   col_co_id,
                   account_id,
                   account_number,
                   payer_id,
                   payer_number,
                   card_id,
                   pan,
                   card_expiry_date,
                   from_date,
                   to_date,
                   caller,
                   notify_caller)
