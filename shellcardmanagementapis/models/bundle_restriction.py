# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.day_time_restrictions import DayTimeRestrictions
from shellcardmanagementapis.models.location_restrictions import LocationRestrictions
from shellcardmanagementapis.models.product_restrictions import ProductRestrictions
from shellcardmanagementapis.models.usage_restrictions import UsageRestrictions


class BundleRestriction(object):

    """Implementation of the 'BundleRestriction' model.

    TODO: type model description here.

    Attributes:
        reset_day_time_restriction (bool): True/False  A value indicates if
            the day/time restriction is to be reset for card bundle.  Optional
            Default value is False.
        reset_location_restriction (bool): True/False  A value indicates if
            the location restriction is to be reset for card bundle.  Optional
            Default value is False.
        reset_product_restriction (bool): True/False  A value indicates if the
            product restriction is to be reset for card bundle.  Optional 
            Default value is False.
        usage_restrictions (UsageRestrictions): TODO: type description here.
        day_time_restrictions (DayTimeRestrictions): Day/time restrictions
            such as weekdays and time range to be applied on the bundle. 
            Mandatory if respective action is set as “Add”.  The details of
            DayTimeRestriction entity is given below.
        product_restriction (ProductRestrictions): TODO: type description
            here.
        location_restriction_profile_id (str): Identifier of the location
            restriction profile to be updated for the bundle in Gateway. 
            Optional
        location_restrictions (LocationRestrictions): Location restrictions to
            be applied on the bundle which either allows or restricts using
            the cards, which are under the bundle, in the specified locations.
            Mandatory if respective action is set as “Add”.  Details of
            location restrictions are given below.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "reset_day_time_restriction": 'ResetDayTimeRestriction',
        "reset_location_restriction": 'ResetLocationRestriction',
        "reset_product_restriction": 'ResetProductRestriction',
        "usage_restrictions": 'UsageRestrictions',
        "day_time_restrictions": 'DayTimeRestrictions',
        "product_restriction": 'ProductRestriction',
        "location_restriction_profile_id": 'LocationRestrictionProfileId',
        "location_restrictions": 'LocationRestrictions'
    }

    _optionals = [
        'reset_day_time_restriction',
        'reset_location_restriction',
        'reset_product_restriction',
        'usage_restrictions',
        'day_time_restrictions',
        'product_restriction',
        'location_restriction_profile_id',
        'location_restrictions',
    ]

    def __init__(self,
                 reset_day_time_restriction=False,
                 reset_location_restriction=False,
                 reset_product_restriction=False,
                 usage_restrictions=APIHelper.SKIP,
                 day_time_restrictions=APIHelper.SKIP,
                 product_restriction=APIHelper.SKIP,
                 location_restriction_profile_id=APIHelper.SKIP,
                 location_restrictions=APIHelper.SKIP):
        """Constructor for the BundleRestriction class"""

        # Initialize members of the class
        self.reset_day_time_restriction = reset_day_time_restriction 
        self.reset_location_restriction = reset_location_restriction 
        self.reset_product_restriction = reset_product_restriction 
        if usage_restrictions is not APIHelper.SKIP:
            self.usage_restrictions = usage_restrictions 
        if day_time_restrictions is not APIHelper.SKIP:
            self.day_time_restrictions = day_time_restrictions 
        if product_restriction is not APIHelper.SKIP:
            self.product_restriction = product_restriction 
        if location_restriction_profile_id is not APIHelper.SKIP:
            self.location_restriction_profile_id = location_restriction_profile_id 
        if location_restrictions is not APIHelper.SKIP:
            self.location_restrictions = location_restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        reset_day_time_restriction = dictionary.get("ResetDayTimeRestriction") if dictionary.get("ResetDayTimeRestriction") else False
        reset_location_restriction = dictionary.get("ResetLocationRestriction") if dictionary.get("ResetLocationRestriction") else False
        reset_product_restriction = dictionary.get("ResetProductRestriction") if dictionary.get("ResetProductRestriction") else False
        usage_restrictions = UsageRestrictions.from_dictionary(dictionary.get('UsageRestrictions')) if 'UsageRestrictions' in dictionary.keys() else APIHelper.SKIP
        day_time_restrictions = DayTimeRestrictions.from_dictionary(dictionary.get('DayTimeRestrictions')) if 'DayTimeRestrictions' in dictionary.keys() else APIHelper.SKIP
        product_restriction = ProductRestrictions.from_dictionary(dictionary.get('ProductRestriction')) if 'ProductRestriction' in dictionary.keys() else APIHelper.SKIP
        location_restriction_profile_id = dictionary.get("LocationRestrictionProfileId") if dictionary.get("LocationRestrictionProfileId") else APIHelper.SKIP
        location_restrictions = LocationRestrictions.from_dictionary(dictionary.get('LocationRestrictions')) if 'LocationRestrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(reset_day_time_restriction,
                   reset_location_restriction,
                   reset_product_restriction,
                   usage_restrictions,
                   day_time_restrictions,
                   product_restriction,
                   location_restriction_profile_id,
                   location_restrictions)
