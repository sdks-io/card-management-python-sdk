# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class UpdateMPayRegStatusRequestMPayRequestsItems(object):

    """Implementation of the 'UpdateMPayRegStatusRequestMPayRequestsItems' model.

    Attributes:
        global_request_id (str): List of MPay Request to be updated for Fleet
            Manager approval status. Mandatory Maximum number of requests that
            can be submitted are 50
        status (str): Status of mobile payment registration request Mandatory.
            Allowed values – •    Approved •   Rejected
        approver_user_id (str): Approver’s User ID ApproverUserID is mandatory
            when Status is Approved else optional
        approver_user_display_name (str): Approver’s display name Mandatory
            when Status is Approved else optional.
        reason (str): Reason for Fleet Manager approval/rejection. Optional

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "global_request_id": 'GlobalRequestID',
        "status": 'Status',
        "approver_user_id": 'ApproverUserID',
        "approver_user_display_name": 'ApproverUserDisplayName',
        "reason": 'Reason'
    }

    _optionals = [
        'global_request_id',
        'status',
        'approver_user_id',
        'approver_user_display_name',
        'reason',
    ]

    def __init__(self,
                 global_request_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 approver_user_id=APIHelper.SKIP,
                 approver_user_display_name=APIHelper.SKIP,
                 reason=APIHelper.SKIP):
        """Constructor for the UpdateMPayRegStatusRequestMPayRequestsItems class"""

        # Initialize members of the class
        if global_request_id is not APIHelper.SKIP:
            self.global_request_id = global_request_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if approver_user_id is not APIHelper.SKIP:
            self.approver_user_id = approver_user_id 
        if approver_user_display_name is not APIHelper.SKIP:
            self.approver_user_display_name = approver_user_display_name 
        if reason is not APIHelper.SKIP:
            self.reason = reason 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        global_request_id = dictionary.get("GlobalRequestID") if dictionary.get("GlobalRequestID") else APIHelper.SKIP
        status = dictionary.get("Status") if dictionary.get("Status") else APIHelper.SKIP
        approver_user_id = dictionary.get("ApproverUserID") if dictionary.get("ApproverUserID") else APIHelper.SKIP
        approver_user_display_name = dictionary.get("ApproverUserDisplayName") if dictionary.get("ApproverUserDisplayName") else APIHelper.SKIP
        reason = dictionary.get("Reason") if dictionary.get("Reason") else APIHelper.SKIP
        # Return an object of this model
        return cls(global_request_id,
                   status,
                   approver_user_id,
                   approver_user_display_name,
                   reason)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'global_request_id={(self.global_request_id if hasattr(self, "global_request_id") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'approver_user_id={(self.approver_user_id if hasattr(self, "approver_user_id") else None)!r}, '
                f'approver_user_display_name={(self.approver_user_display_name if hasattr(self, "approver_user_display_name") else None)!r}, '
                f'reason={(self.reason if hasattr(self, "reason") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'global_request_id={(self.global_request_id if hasattr(self, "global_request_id") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'approver_user_id={(self.approver_user_id if hasattr(self, "approver_user_id") else None)!s}, '
                f'approver_user_display_name={(self.approver_user_display_name if hasattr(self, "approver_user_display_name") else None)!s}, '
                f'reason={(self.reason if hasattr(self, "reason") else None)!s})')
