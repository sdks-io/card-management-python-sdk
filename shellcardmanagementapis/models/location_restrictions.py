# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.location_restrictions_country_restrictions import LocationRestrictionsCountryRestrictions
from shellcardmanagementapis.models.location_restrictions_network_restrictions_items import LocationRestrictionsNetworkRestrictionsItems
from shellcardmanagementapis.models.location_restrictions_partner_site_restrictions_items import LocationRestrictionsPartnerSiteRestrictionsItems
from shellcardmanagementapis.models.location_restrictions_shell_site_restrictions_items import LocationRestrictionsShellSiteRestrictionsItems


class LocationRestrictions(object):

    """Implementation of the 'LocationRestrictions' model.

    Location restrictions to be applied on the bundle which either allows or
    restricts using the cards, which are under the bundle, in the specified
    locations. 
    Mandatory if respective action is set as “Add”.
    Details of location restrictions are given below.

    Attributes:
        country_restrictions (LocationRestrictionsCountryRestrictions): An
            entity that encapsulate the country restrictions.  Optional.
        network_restrictions
            (List[LocationRestrictionsNetworkRestrictionsItems]): A list of
            NetworkRestriction entity. Each item in the list encapsulates a
            network restriction in a given country.  Optional.  The details of
            the entity are described below:
        shell_site_restrictions
            (List[LocationRestrictionsShellSiteRestrictionsItems]): A list of
            ShellSiteRestriction entity. Each item in the list encapsulates a
            site restriction of Shell network in a given country.  Optional. 
            The details of the entity are described below.
        partner_site_restrictions
            (List[LocationRestrictionsPartnerSiteRestrictionsItems]): A list
            of PartnerSiteRestriction entity. Each item in the list
            encapsulates a site restriction of a given partner network. 
            Optional.  The details of the entity are described below.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_restrictions": 'CountryRestrictions',
        "network_restrictions": 'NetworkRestrictions',
        "shell_site_restrictions": 'ShellSiteRestrictions',
        "partner_site_restrictions": 'PartnerSiteRestrictions'
    }

    _optionals = [
        'country_restrictions',
        'network_restrictions',
        'shell_site_restrictions',
        'partner_site_restrictions',
    ]

    def __init__(self,
                 country_restrictions=APIHelper.SKIP,
                 network_restrictions=APIHelper.SKIP,
                 shell_site_restrictions=APIHelper.SKIP,
                 partner_site_restrictions=APIHelper.SKIP):
        """Constructor for the LocationRestrictions class"""

        # Initialize members of the class
        if country_restrictions is not APIHelper.SKIP:
            self.country_restrictions = country_restrictions 
        if network_restrictions is not APIHelper.SKIP:
            self.network_restrictions = network_restrictions 
        if shell_site_restrictions is not APIHelper.SKIP:
            self.shell_site_restrictions = shell_site_restrictions 
        if partner_site_restrictions is not APIHelper.SKIP:
            self.partner_site_restrictions = partner_site_restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        country_restrictions = LocationRestrictionsCountryRestrictions.from_dictionary(dictionary.get('CountryRestrictions')) if 'CountryRestrictions' in dictionary.keys() else APIHelper.SKIP
        network_restrictions = None
        if dictionary.get('NetworkRestrictions') is not None:
            network_restrictions = [LocationRestrictionsNetworkRestrictionsItems.from_dictionary(x) for x in dictionary.get('NetworkRestrictions')]
        else:
            network_restrictions = APIHelper.SKIP
        shell_site_restrictions = None
        if dictionary.get('ShellSiteRestrictions') is not None:
            shell_site_restrictions = [LocationRestrictionsShellSiteRestrictionsItems.from_dictionary(x) for x in dictionary.get('ShellSiteRestrictions')]
        else:
            shell_site_restrictions = APIHelper.SKIP
        partner_site_restrictions = None
        if dictionary.get('PartnerSiteRestrictions') is not None:
            partner_site_restrictions = [LocationRestrictionsPartnerSiteRestrictionsItems.from_dictionary(x) for x in dictionary.get('PartnerSiteRestrictions')]
        else:
            partner_site_restrictions = APIHelper.SKIP
        # Return an object of this model
        return cls(country_restrictions,
                   network_restrictions,
                   shell_site_restrictions,
                   partner_site_restrictions)
