# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.account_velocity_limit import AccountVelocityLimit
from shellcardmanagementapis.models.error_status import ErrorStatus


class SearchAccountLimitResponse(object):

    """Implementation of the 'SearchAccountLimitResponse' model.

    Attributes:
        request_id (str): Request Id of the API call
        account_id (int): Account ID of the customer.
        account_number (str): Account Number Example: GB99215176
        reference_product (str): 3 digit Shell global fuel product code, if
            already set up. Example: 021
        restriction_condition (str): The restriction condition code. Example:
            DECLINE_ALERT
        velocity_limits (List[AccountVelocityLimit]): The model property of
            type List[AccountVelocityLimit].
        error (ErrorStatus): The model property of type ErrorStatus.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "reference_product": 'ReferenceProduct',
        "restriction_condition": 'RestrictionCondition',
        "velocity_limits": 'VelocityLimits',
        "error": 'Error'
    }

    _optionals = [
        'request_id',
        'account_id',
        'account_number',
        'reference_product',
        'restriction_condition',
        'velocity_limits',
        'error',
    ]

    _nullables = [
        'request_id',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 reference_product=APIHelper.SKIP,
                 restriction_condition=APIHelper.SKIP,
                 velocity_limits=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the SearchAccountLimitResponse class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if reference_product is not APIHelper.SKIP:
            self.reference_product = reference_product 
        if restriction_condition is not APIHelper.SKIP:
            self.restriction_condition = restriction_condition 
        if velocity_limits is not APIHelper.SKIP:
            self.velocity_limits = velocity_limits 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if "RequestId" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else APIHelper.SKIP
        reference_product = dictionary.get("ReferenceProduct") if dictionary.get("ReferenceProduct") else APIHelper.SKIP
        restriction_condition = dictionary.get("RestrictionCondition") if dictionary.get("RestrictionCondition") else APIHelper.SKIP
        velocity_limits = None
        if dictionary.get('VelocityLimits') is not None:
            velocity_limits = [AccountVelocityLimit.from_dictionary(x) for x in dictionary.get('VelocityLimits')]
        else:
            velocity_limits = APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   account_id,
                   account_number,
                   reference_product,
                   restriction_condition,
                   velocity_limits,
                   error)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'reference_product={(self.reference_product if hasattr(self, "reference_product") else None)!r}, '
                f'restriction_condition={(self.restriction_condition if hasattr(self, "restriction_condition") else None)!r}, '
                f'velocity_limits={(self.velocity_limits if hasattr(self, "velocity_limits") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'reference_product={(self.reference_product if hasattr(self, "reference_product") else None)!s}, '
                f'restriction_condition={(self.restriction_condition if hasattr(self, "restriction_condition") else None)!s}, '
                f'velocity_limits={(self.velocity_limits if hasattr(self, "velocity_limits") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s})')
