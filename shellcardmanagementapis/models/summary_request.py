# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.search_card import SearchCard


class SummaryRequest(object):

    """Implementation of the 'SummaryRequest' model.

    Encapsulates the details of a Summary Request.
    Summary Request fields are same as the Search Request base class and no
    new fields are required.

    Attributes:
        account_id (int): Account ID of the customer.<br/> Optional.<br/> This
            input is a search criterion, if given.
        account_number (str): Account Number of the customer.<br/>
            Optional.<br/> This input is a search criterion, if given.
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer. <br /> Optional If ColCo Id or ColCoCountryCode is
            passed else Mandatory.<br />
        col_co_country_code (str): The 2 character ISO Code for the customer
            and card owning country.<br /> Optional If ColCoId or ColCoCode is
            passed else Mandatory.<br />
        col_co_id (int): Collecting Company Id (in ) of the selected payer.<br
            /> Optional If ColCo Codeor ColCoCountryCode is passed else
            Mandatory <br />
        payer_id (int): Payer Id (i.e. Customer Id of the Payment Customer )
            of the selected payer.<br /> Optional if PayerNumber is passed
            else Mandatory
        payer_number (str): Payer Number of the selected payer.<br /> Optional
            if PayerId is passed else Mandatory
        card_group_id (int): Card group id.<br /> Optional. <br /> This input
            is a search criterion, if given.<br /> When -1 is passed, those
            cards that does not belong to any card group will be returned.
        card_group_name (str): Card group name.<br /> Optional.<br /> This
            input is a search criterion, if given.<br /> If CardGroupId is
            provided then this search criterion will be ignored, else, those
            cards that have the card group name completely matching with the
            entered value will be returned
        card_status (List[str]): Status of the card.<br /> Mandatory.<br />
            Multiple statuses are allowed to be included in the search
            criteria.<br /> CardStatus filter accepts either of the two values
            for each status as described below. However, the output field
            “StatusDescription” is aligned with second value highlighted in
            italics.<br /> Below are the possible allowed statuses: <br /> •
            ACTIVE or Active – Cards at status Active (The result will include
            all the cards having the following intermediate statuses as
            defined s, if the IncludeIntermediateStatus flag is true: Active
            (Block in progress), Active (Cancel in progress), Active (Marked
            as damaged)), New (Cancel in progress).<br /> • ON_ORDER or New –
            Cards at status New <br /> • EXPIRED or Expired – Cards at status
            Expired<br /> • BLOCKED or Blocked Card – Cards at status Block
            (The result will include all cards having the following
            intermediate status as defined, if the IncludeIntermediateStatus
            flag is true: Blocked card (Unblock in progress))<br /> •
            TEMP_BLOCKED_CUSTOMER or Temporary Block(Customer) – Cards at
            status Temporary Blocked By Customer<br /> • TEMP_BLOCKED_SHELL or
            Temporary Block (Shell) – Cards at Status Temporary Blocked by
            Shell<br /> • CANCELLED or Cancelled – Cards at status
            Cancelled<br /> • PENDING_RENEWAL or Pending Renewal - Cards that
            are in renewal process<br /> • REPLACED or Replaced – Cards at
            Status Replaced<br /> • FRAUD or Fraud – Cards at Status FRAUD<br
            /> • ALL
        expiring_in_days (int): Cards active and expiring in given number of
            days.<br /> Optional<br /> Note: When a value is passed in this
            parameter, only active cards will be considered while searching.
        issued_after (str): If provided, only list cards issued after the
            given date<br /> Optional<br /> Format: yyyyMMdd<br /> Note:
            Clients to convert this to appropriate DateTime type.
        pan_ends_with (str): Last digits of the PAN number<br /> Minimum 4
            last digits of the card should be sent for this field to be
            considered as part of the search criteria.<br /> Optional<br />
            Max Length: 50
        driver_name (List[str]): Driver Name embossed on the card<br />
            Optional<br /> Up to 10 driver names could be passed in the
            parameter.<br /> Minimum of 4 characters should be provided for
            each driver name else not considered.<br /> Those cards will be
            returned when part of the driver name matches with any of the
            string passed in the list.<br /> Max Length for each Driver name:
            50
        vehicle_registration_number (List[str]): Vehicle Registration embossed
            on the card<br /> Optional<br /> Up to 10 vehicle registration
            numbers could be passed in the parameter.<br /> Minimum of 4
            characters should be provided for each VRN else not considered<br
            /> Those cards will be returned when part of the VRN matches with
            any of the string passed in the list.<br /> Max Length for each
            VRN: 50
        include_cards (List[SearchCard]): List of SearchCard entity i.e., Card
            Id or PAN, which needs to be included in the response.<br />
            Details of the SerachCard entity are given below.
        exclude_cards (List[SearchCard]): List of SearchCard entity i.e., Card
            Id or PAN, which needs to be excluded in the response. <br />
            Details of the SerachCard entity are given below.
        exclude_bundle_id (str): Bundle Id for the Card, which needs to be
            excluded in the response.<br /> Optional
        card_segment (str): Market segment to which card belongs to.<br />
            Optional.<br /> Allowed values<br /> • CRT<br /> • Fleet
        purchase_category_code (str): Purchase category code of the card.<br
            /> Optional.
        card_type_code (str): ISO code of the card i.e. first 7 digits of the
            PAN<br /> Optional.
        exclude_pending_renewal_cards (bool): Default value is True.<br />
            When true, the API will not return cards that are at Pending
            Renewal Status in Cards Platform
        exclude_cancelled_cards (bool): Default value is True.<br /> When
            true, the API will not return cards that are at Cancelled Status
            in Cards Platform
        exclude_replaced_cards (bool): Default value is False.<br /> When
            true, the API will not return cards that are at Replaced Status in
            Cards Platform
        exclude_fraud_cards (bool): Default value is False.<br /> When true,
            the API will not return cards that are at Fraud Status in Cards
            Platform
        exclude_card_group_id (int): Optional<br /> When passed, the API will
            not return cards that are currently in the Card Group specified
        exclude_card_group_name (str): Optional<br /> When passed, the API
            will not return cards that are currently in the Card Group
            specified
        creation_date (str): Card Creation Date<br /> Optional<br /> Format:
            yyyyMMdd
        effective_date (str): Effective date for the Card<br /> Optional<br />
            Format: yyyyMMdd
        network (str): Cards allowed to be used in site.<br /> Optional.<br />
            Allowed values<br /> • ShellSitesOnly<br /> •
            PartnersSitesIncluded<br />
        coverage (str): Cards allowed to used nationally/internationally.<br
            /> Optional.<br /> Allowed values<br />   -National<br />  
            -International
        expiry_month (str): Month in which the card is expiring.<br />
            Optional.<br /> Format: MMYYYY
        exclude_old_cards (bool): Default Value: False<br /> When this field
            is set to True, cards with below status 2 years (configurable) ago
            and earlier are excluded from the result<br />   -Blocked Card<br
            />   -Expired<br />   -Cancelled<br />   -Suspended<br />  
            -Blocked<br />   -Expired and Cancelled<br />   -Replaced<br />  
            -Replaced By<br />   -Closed<br />   -Fraud<br />
        reissue_setting (str): Default Value: All<br /> Optional<br /> This
            option is used to filter the list of cards with
            ‘ReissueSetting’.<br /> If ‘True’, the API will return cards with
            ReIssueSetting value is true.<br /> If ‘False’, the API will
            return cards with ReIsssueSetting value is false.<br /> If ‘ALL’,
            API will return cards with ReIssueSetting value True &amp; False
            both.<br /> Allowed Values:<br /> 1.    All<br /> 2.    True<br />
            3.    False
        request_id (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_status": 'CardStatus',
        "request_id": 'RequestId',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "col_co_code": 'ColCoCode',
        "col_co_country_code": 'ColCoCountryCode',
        "col_co_id": 'ColCoId',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber',
        "card_group_id": 'CardGroupId',
        "card_group_name": 'CardGroupName',
        "expiring_in_days": 'ExpiringInDays',
        "issued_after": 'IssuedAfter',
        "pan_ends_with": 'PANEndsWith',
        "driver_name": 'DriverName',
        "vehicle_registration_number": 'VehicleRegistrationNumber',
        "include_cards": 'IncludeCards',
        "exclude_cards": 'ExcludeCards',
        "exclude_bundle_id": 'ExcludeBundleId',
        "card_segment": 'CardSegment',
        "purchase_category_code": 'PurchaseCategoryCode',
        "card_type_code": 'CardTypeCode',
        "exclude_pending_renewal_cards": 'ExcludePendingRenewalCards',
        "exclude_cancelled_cards": 'ExcludeCancelledCards',
        "exclude_replaced_cards": 'ExcludeReplacedCards',
        "exclude_fraud_cards": 'ExcludeFraudCards',
        "exclude_card_group_id": 'ExcludeCardGroupId',
        "exclude_card_group_name": 'ExcludeCardGroupName',
        "creation_date": 'CreationDate',
        "effective_date": 'EffectiveDate',
        "network": 'Network',
        "coverage": 'Coverage',
        "expiry_month": 'ExpiryMonth',
        "exclude_old_cards": 'ExcludeOldCards',
        "reissue_setting": 'ReissueSetting'
    }

    _optionals = [
        'account_id',
        'account_number',
        'col_co_code',
        'col_co_country_code',
        'col_co_id',
        'payer_id',
        'payer_number',
        'card_group_id',
        'card_group_name',
        'expiring_in_days',
        'issued_after',
        'pan_ends_with',
        'driver_name',
        'vehicle_registration_number',
        'include_cards',
        'exclude_cards',
        'exclude_bundle_id',
        'card_segment',
        'purchase_category_code',
        'card_type_code',
        'exclude_pending_renewal_cards',
        'exclude_cancelled_cards',
        'exclude_replaced_cards',
        'exclude_fraud_cards',
        'exclude_card_group_id',
        'exclude_card_group_name',
        'creation_date',
        'effective_date',
        'network',
        'coverage',
        'expiry_month',
        'exclude_old_cards',
        'reissue_setting',
    ]

    _nullables = [
        'account_id',
        'account_number',
        'col_co_code',
        'col_co_country_code',
        'col_co_id',
        'payer_id',
        'payer_number',
        'card_group_id',
        'card_group_name',
        'card_status',
        'expiring_in_days',
        'issued_after',
        'pan_ends_with',
        'exclude_bundle_id',
        'card_segment',
        'purchase_category_code',
        'card_type_code',
        'exclude_card_group_id',
        'exclude_card_group_name',
        'creation_date',
        'effective_date',
        'network',
        'coverage',
        'expiry_month',
        'reissue_setting',
        'request_id',
    ]

    def __init__(self,
                 card_status=None,
                 request_id=None,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 col_co_country_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 card_group_id=APIHelper.SKIP,
                 card_group_name=APIHelper.SKIP,
                 expiring_in_days=APIHelper.SKIP,
                 issued_after=APIHelper.SKIP,
                 pan_ends_with=APIHelper.SKIP,
                 driver_name=APIHelper.SKIP,
                 vehicle_registration_number=APIHelper.SKIP,
                 include_cards=APIHelper.SKIP,
                 exclude_cards=APIHelper.SKIP,
                 exclude_bundle_id=APIHelper.SKIP,
                 card_segment=APIHelper.SKIP,
                 purchase_category_code=APIHelper.SKIP,
                 card_type_code=APIHelper.SKIP,
                 exclude_pending_renewal_cards=APIHelper.SKIP,
                 exclude_cancelled_cards=APIHelper.SKIP,
                 exclude_replaced_cards=APIHelper.SKIP,
                 exclude_fraud_cards=APIHelper.SKIP,
                 exclude_card_group_id=APIHelper.SKIP,
                 exclude_card_group_name=APIHelper.SKIP,
                 creation_date=APIHelper.SKIP,
                 effective_date=APIHelper.SKIP,
                 network=APIHelper.SKIP,
                 coverage=APIHelper.SKIP,
                 expiry_month=APIHelper.SKIP,
                 exclude_old_cards=APIHelper.SKIP,
                 reissue_setting=APIHelper.SKIP):
        """Constructor for the SummaryRequest class"""

        # Initialize members of the class
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_country_code is not APIHelper.SKIP:
            self.col_co_country_code = col_co_country_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if card_group_id is not APIHelper.SKIP:
            self.card_group_id = card_group_id 
        if card_group_name is not APIHelper.SKIP:
            self.card_group_name = card_group_name 
        self.card_status = card_status 
        if expiring_in_days is not APIHelper.SKIP:
            self.expiring_in_days = expiring_in_days 
        if issued_after is not APIHelper.SKIP:
            self.issued_after = issued_after 
        if pan_ends_with is not APIHelper.SKIP:
            self.pan_ends_with = pan_ends_with 
        if driver_name is not APIHelper.SKIP:
            self.driver_name = driver_name 
        if vehicle_registration_number is not APIHelper.SKIP:
            self.vehicle_registration_number = vehicle_registration_number 
        if include_cards is not APIHelper.SKIP:
            self.include_cards = include_cards 
        if exclude_cards is not APIHelper.SKIP:
            self.exclude_cards = exclude_cards 
        if exclude_bundle_id is not APIHelper.SKIP:
            self.exclude_bundle_id = exclude_bundle_id 
        if card_segment is not APIHelper.SKIP:
            self.card_segment = card_segment 
        if purchase_category_code is not APIHelper.SKIP:
            self.purchase_category_code = purchase_category_code 
        if card_type_code is not APIHelper.SKIP:
            self.card_type_code = card_type_code 
        if exclude_pending_renewal_cards is not APIHelper.SKIP:
            self.exclude_pending_renewal_cards = exclude_pending_renewal_cards 
        if exclude_cancelled_cards is not APIHelper.SKIP:
            self.exclude_cancelled_cards = exclude_cancelled_cards 
        if exclude_replaced_cards is not APIHelper.SKIP:
            self.exclude_replaced_cards = exclude_replaced_cards 
        if exclude_fraud_cards is not APIHelper.SKIP:
            self.exclude_fraud_cards = exclude_fraud_cards 
        if exclude_card_group_id is not APIHelper.SKIP:
            self.exclude_card_group_id = exclude_card_group_id 
        if exclude_card_group_name is not APIHelper.SKIP:
            self.exclude_card_group_name = exclude_card_group_name 
        if creation_date is not APIHelper.SKIP:
            self.creation_date = creation_date 
        if effective_date is not APIHelper.SKIP:
            self.effective_date = effective_date 
        if network is not APIHelper.SKIP:
            self.network = network 
        if coverage is not APIHelper.SKIP:
            self.coverage = coverage 
        if expiry_month is not APIHelper.SKIP:
            self.expiry_month = expiry_month 
        if exclude_old_cards is not APIHelper.SKIP:
            self.exclude_old_cards = exclude_old_cards 
        if reissue_setting is not APIHelper.SKIP:
            self.reissue_setting = reissue_setting 
        self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        card_status = dictionary.get("CardStatus") if dictionary.get("CardStatus") else None
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else None
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        col_co_country_code = dictionary.get("ColCoCountryCode") if "ColCoCountryCode" in dictionary.keys() else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if "PayerId" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        card_group_id = dictionary.get("CardGroupId") if "CardGroupId" in dictionary.keys() else APIHelper.SKIP
        card_group_name = dictionary.get("CardGroupName") if "CardGroupName" in dictionary.keys() else APIHelper.SKIP
        expiring_in_days = dictionary.get("ExpiringInDays") if "ExpiringInDays" in dictionary.keys() else APIHelper.SKIP
        issued_after = dictionary.get("IssuedAfter") if "IssuedAfter" in dictionary.keys() else APIHelper.SKIP
        pan_ends_with = dictionary.get("PANEndsWith") if "PANEndsWith" in dictionary.keys() else APIHelper.SKIP
        driver_name = dictionary.get("DriverName") if dictionary.get("DriverName") else APIHelper.SKIP
        vehicle_registration_number = dictionary.get("VehicleRegistrationNumber") if dictionary.get("VehicleRegistrationNumber") else APIHelper.SKIP
        include_cards = None
        if dictionary.get('IncludeCards') is not None:
            include_cards = [SearchCard.from_dictionary(x) for x in dictionary.get('IncludeCards')]
        else:
            include_cards = APIHelper.SKIP
        exclude_cards = None
        if dictionary.get('ExcludeCards') is not None:
            exclude_cards = [SearchCard.from_dictionary(x) for x in dictionary.get('ExcludeCards')]
        else:
            exclude_cards = APIHelper.SKIP
        exclude_bundle_id = dictionary.get("ExcludeBundleId") if "ExcludeBundleId" in dictionary.keys() else APIHelper.SKIP
        card_segment = dictionary.get("CardSegment") if "CardSegment" in dictionary.keys() else APIHelper.SKIP
        purchase_category_code = dictionary.get("PurchaseCategoryCode") if "PurchaseCategoryCode" in dictionary.keys() else APIHelper.SKIP
        card_type_code = dictionary.get("CardTypeCode") if "CardTypeCode" in dictionary.keys() else APIHelper.SKIP
        exclude_pending_renewal_cards = dictionary.get("ExcludePendingRenewalCards") if "ExcludePendingRenewalCards" in dictionary.keys() else APIHelper.SKIP
        exclude_cancelled_cards = dictionary.get("ExcludeCancelledCards") if "ExcludeCancelledCards" in dictionary.keys() else APIHelper.SKIP
        exclude_replaced_cards = dictionary.get("ExcludeReplacedCards") if "ExcludeReplacedCards" in dictionary.keys() else APIHelper.SKIP
        exclude_fraud_cards = dictionary.get("ExcludeFraudCards") if "ExcludeFraudCards" in dictionary.keys() else APIHelper.SKIP
        exclude_card_group_id = dictionary.get("ExcludeCardGroupId") if "ExcludeCardGroupId" in dictionary.keys() else APIHelper.SKIP
        exclude_card_group_name = dictionary.get("ExcludeCardGroupName") if "ExcludeCardGroupName" in dictionary.keys() else APIHelper.SKIP
        creation_date = dictionary.get("CreationDate") if "CreationDate" in dictionary.keys() else APIHelper.SKIP
        effective_date = dictionary.get("EffectiveDate") if "EffectiveDate" in dictionary.keys() else APIHelper.SKIP
        network = dictionary.get("Network") if "Network" in dictionary.keys() else APIHelper.SKIP
        coverage = dictionary.get("Coverage") if "Coverage" in dictionary.keys() else APIHelper.SKIP
        expiry_month = dictionary.get("ExpiryMonth") if "ExpiryMonth" in dictionary.keys() else APIHelper.SKIP
        exclude_old_cards = dictionary.get("ExcludeOldCards") if "ExcludeOldCards" in dictionary.keys() else APIHelper.SKIP
        reissue_setting = dictionary.get("ReissueSetting") if "ReissueSetting" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(card_status,
                   request_id,
                   account_id,
                   account_number,
                   col_co_code,
                   col_co_country_code,
                   col_co_id,
                   payer_id,
                   payer_number,
                   card_group_id,
                   card_group_name,
                   expiring_in_days,
                   issued_after,
                   pan_ends_with,
                   driver_name,
                   vehicle_registration_number,
                   include_cards,
                   exclude_cards,
                   exclude_bundle_id,
                   card_segment,
                   purchase_category_code,
                   card_type_code,
                   exclude_pending_renewal_cards,
                   exclude_cancelled_cards,
                   exclude_replaced_cards,
                   exclude_fraud_cards,
                   exclude_card_group_id,
                   exclude_card_group_name,
                   creation_date,
                   effective_date,
                   network,
                   coverage,
                   expiry_month,
                   exclude_old_cards,
                   reissue_setting)
