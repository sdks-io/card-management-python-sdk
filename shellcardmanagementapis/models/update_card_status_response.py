# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.error_details import ErrorDetails
from shellcardmanagementapis.models.submitted_card import SubmittedCard


class UpdateCardStatusResponse(object):

    """Implementation of the 'UpdateCardStatusResponse' model.

    TODO: type model description here.

    Attributes:
        request_id (str): Unique request identifier passed from end user. This
            identifier helps in tracing a transaction
        status (str): Indicates overall status of the request. Allowed values:
            SUCCESS, FAILED, PARTIAL_SUCCESS
        data (List[SubmittedCard]): TODO: type description here.
        main_reference (int): Update status reference number for tracking the
            execution of the request. <br>Note: Reference will be empty for
            status 9006 and 9012 i.e., request for all the cards failed.
        order_replacement_reference (int): Order replacement reference number
            for tracking the execution of the order replacement cards request.
            <br/>Note: Reference will be empty for status 9006 and 9012 i.e.,
            request for all the cards failed or if there were no order
            replacement requested in the input.
        errors (List[ErrorDetails]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "status": 'Status',
        "data": 'Data',
        "main_reference": 'MainReference',
        "order_replacement_reference": 'OrderReplacementReference',
        "errors": 'Errors'
    }

    _optionals = [
        'request_id',
        'status',
        'data',
        'main_reference',
        'order_replacement_reference',
        'errors',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 main_reference=APIHelper.SKIP,
                 order_replacement_reference=APIHelper.SKIP,
                 errors=APIHelper.SKIP):
        """Constructor for the UpdateCardStatusResponse class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if data is not APIHelper.SKIP:
            self.data = data 
        if main_reference is not APIHelper.SKIP:
            self.main_reference = main_reference 
        if order_replacement_reference is not APIHelper.SKIP:
            self.order_replacement_reference = order_replacement_reference 
        if errors is not APIHelper.SKIP:
            self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        status = dictionary.get("Status") if dictionary.get("Status") else APIHelper.SKIP
        data = None
        if dictionary.get('Data') is not None:
            data = [SubmittedCard.from_dictionary(x) for x in dictionary.get('Data')]
        else:
            data = APIHelper.SKIP
        main_reference = dictionary.get("MainReference") if dictionary.get("MainReference") else APIHelper.SKIP
        order_replacement_reference = dictionary.get("OrderReplacementReference") if dictionary.get("OrderReplacementReference") else APIHelper.SKIP
        errors = None
        if dictionary.get('Errors') is not None:
            errors = [ErrorDetails.from_dictionary(x) for x in dictionary.get('Errors')]
        else:
            errors = APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   status,
                   data,
                   main_reference,
                   order_replacement_reference,
                   errors)
