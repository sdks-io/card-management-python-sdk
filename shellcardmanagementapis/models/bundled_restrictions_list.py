# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.bundled_details_product_list import BundledDetailsProductList
from shellcardmanagementapis.models.day_time_restrictions import DayTimeRestrictions
from shellcardmanagementapis.models.location_restriction import LocationRestriction


class BundledRestrictionsList(object):

    """Implementation of the 'BundledRestrictionsList' model.

    Attributes:
        usage_restrictions (object): The model property of type object.
        day_time_restrictions (DayTimeRestrictions): The model property of
            type DayTimeRestrictions.
        product_restrictions (BundledDetailsProductList): The model property
            of type BundledDetailsProductList.
        location_restrictions (LocationRestriction): The model property of
            type LocationRestriction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "usage_restrictions": 'UsageRestrictions',
        "day_time_restrictions": 'DayTimeRestrictions',
        "product_restrictions": 'ProductRestrictions',
        "location_restrictions": 'LocationRestrictions'
    }

    _optionals = [
        'usage_restrictions',
        'day_time_restrictions',
        'product_restrictions',
        'location_restrictions',
    ]

    def __init__(self,
                 usage_restrictions=APIHelper.SKIP,
                 day_time_restrictions=APIHelper.SKIP,
                 product_restrictions=APIHelper.SKIP,
                 location_restrictions=APIHelper.SKIP):
        """Constructor for the BundledRestrictionsList class"""

        # Initialize members of the class
        if usage_restrictions is not APIHelper.SKIP:
            self.usage_restrictions = usage_restrictions 
        if day_time_restrictions is not APIHelper.SKIP:
            self.day_time_restrictions = day_time_restrictions 
        if product_restrictions is not APIHelper.SKIP:
            self.product_restrictions = product_restrictions 
        if location_restrictions is not APIHelper.SKIP:
            self.location_restrictions = location_restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        usage_restrictions = dictionary.get("UsageRestrictions") if dictionary.get("UsageRestrictions") else APIHelper.SKIP
        day_time_restrictions = DayTimeRestrictions.from_dictionary(dictionary.get('DayTimeRestrictions')) if 'DayTimeRestrictions' in dictionary.keys() else APIHelper.SKIP
        product_restrictions = BundledDetailsProductList.from_dictionary(dictionary.get('ProductRestrictions')) if 'ProductRestrictions' in dictionary.keys() else APIHelper.SKIP
        location_restrictions = LocationRestriction.from_dictionary(dictionary.get('LocationRestrictions')) if 'LocationRestrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(usage_restrictions,
                   day_time_restrictions,
                   product_restrictions,
                   location_restrictions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'usage_restrictions={(self.usage_restrictions if hasattr(self, "usage_restrictions") else None)!r}, '
                f'day_time_restrictions={(self.day_time_restrictions if hasattr(self, "day_time_restrictions") else None)!r}, '
                f'product_restrictions={(self.product_restrictions if hasattr(self, "product_restrictions") else None)!r}, '
                f'location_restrictions={(self.location_restrictions if hasattr(self, "location_restrictions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'usage_restrictions={(self.usage_restrictions if hasattr(self, "usage_restrictions") else None)!s}, '
                f'day_time_restrictions={(self.day_time_restrictions if hasattr(self, "day_time_restrictions") else None)!s}, '
                f'product_restrictions={(self.product_restrictions if hasattr(self, "product_restrictions") else None)!s}, '
                f'location_restrictions={(self.location_restrictions if hasattr(self, "location_restrictions") else None)!s})')
