# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class UsageRestriction(object):

    """Implementation of the 'UsageRestriction' model.

    Details of the usage restrictions such as day/week/month value and volume
    restrictions applied on the card.

    Attributes:
        level (str): Usage limit is applied on the card from this level. Valid
            values – •    Inherited •    Card When Card level usage
            restrictions are not present, the API will return the inherited
            restrictions. Note: -This field is deprecated. Instead, use
            ‘Override’.
        daily_spend (float): Maximum spend value (amount) allowed per day.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        daily_spend_accumulated (float): Balance spend value (amount)
            available for rest of the day.
        daily_spend_balance (float): Balance spend value (amount) available
            for rest of the day.
        daily_spend_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        daily_spend_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55
        weekly_spend (float): Maximum spend value (amount) allowed per week.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        weekly_spend_accumulated (float): Value (amount) spent during the week.
        weekly_spend_balance (float): Balance spend value (amount) available
            for rest of the week.
        weekly_spend_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        weekly_spend_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        monthly_spend (float): Maximum spend value (amount) allowed per month.
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        monthly_spend_accumulated (float): Value (amount) spent during the
            month.
        monthly_spend_balance (float): Balance spend value (amount) available
            for rest of the month.
        monthly_spend_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        per_transaction_spend (float): Maximum spend value (amount) allowed
            per transaction.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited.
        per_transaction_spend_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        annual_spend (float): Maximum spend value (amount) allowed per annum. 
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        annual_spend_accumulated (float): Value (amount) spent during the year.
        annual_spend_balance (float): Balance spend value (amount) available
            for rest of the year.
        annual_spend_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        annual_spend_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        life_time_spend (float): Maximum spend value (amount) allowed in
            card’s life time.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited
        life_time_spend_accumulated (float): Value (amount) spent during the
            card’s life time
        life_time_spend_balance (float): Balance spend value (amount)
            available for rest of the card’s life time.
        life_time_spend_override (bool): Indicate if the limit is overridden
            or default. (False for default).   Example: false
        life_time_spend_threshold (float): The limit to trigger an alert if
            the balance after a transaction reaches it or below. 0 indicates
            no alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        daily_volume (float): Maximum volume (quantity) allowed per day.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        daily_volume_accumulated (float): Volume (quantity) bought during the
            day.
        daily_volume_balance (float): Balance volume (quantity) available for
            rest of the day.
        daily_volume_override (float): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        daily_volume_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        weekly_volume (float): Maximum volume (quantity) allowed per week.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        weekly_volume_accumulated (float): Volume (quantity) bought during the
            week.
        weekly_volume_balance (float): Balance volume (quantity) available for
            rest of the week.
        weekly_volume_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        weekly_volume_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        monthly_volume (float): Maximum volume (quantity) allowed per month.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        monthly_volume_accumulated (float): Volume (quantity) bought during
            the month.
        monthly_volume_balance (float): Balance volume (quantity) available
            for rest of the month.
        monthly_volume_override (bool): Indicate if the limit is overridden or
            default. (False for default).
        monthly_volume_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        per_transaction_volume (float): Maximum volume (quantity) allowed per
            transaction.   Card limit ‘0’ represents the value is inherited
            and inherited limit could be calculated by adding accumulated and
            balance.  However, Inherited limit ‘0’ represents unlimited.
        per_transaction_volume_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        annual_volume (float): Maximum volume (quantity) allowed per annum.  
            Card limit ‘0’ represents the value is inherited and inherited
            limit could be calculated by adding accumulated and balance. 
            However, Inherited limit ‘0’ represents unlimited.
        annual_volume_accumulated (float): Volume (quantity) bought during the
            year.
        annual_volume_balance (float): Balance volume (quantity) available for
            rest of the year.
        annual_volume_override (bool): Indicate if the limit is overridden or
            default. (False for default).   Example: false
        annual_volume_threshold (float): The limit to trigger an alert if the
            balance after a transaction reaches it or below. 0 indicates no
            alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        life_time_volume (float): Maximum volume (quantity) allowed in the
            card’s life time.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited.
        life_time_volume_accumulated (float): Volume (quantity) bought during
            the card’s life time.
        life_time_volume_balance (float): Balance volume (quantity) available
            for rest of the card’s life time.
        life_time_volume_override (bool): Indicate if the limit is overridden
            or default. (False for default).   Example: false
        life_time_volume_threshold (float): The limit to trigger an alert if
            the balance after a transaction reaches it or below. 0 indicates
            no alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        daily_transaction_count (float): Maximum number of transactions
            allowed per day.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited
        daily_transaction_accumulated (float): Number of times the card is
            used during the day.
        daily_transaction_balance (float): Number of times the card could be
            used in rest of the day.
        daily_transaction_override (bool): Indicate if the limit is overridden
            or default. (False for default).   Example: false
        daily_transaction_threshold (float): The limit to trigger an alert if
            the balance after a transaction reaches it or below. 0 indicates
            no alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        weekly_transaction_count (float): Maximum number of transactions
            allowed per week.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited.
        weekly_transaction_accumulated (float): Number of times the card is
            used during the week
        weekly_transaction_balance (float): Number of times the card could be
            used in rest of the week.
        weekly_transaction_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        weekly_transaction_threshold (float): The limit to trigger an alert if
            the balance after a transaction reaches it or below. 0 indicates
            no alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        monthly_transaction_count (float): Maximum number of transactions
            allowed per month.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.  However, Inherited limit ‘0’ represents
            unlimited.
        monthly_transaction_accumulated (float): Number of times the card is
            used during the month
        monthly_transaction_balance (float): Number of times the card could be
            used in rest of the month.
        monthly_transaction_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        monthly_transaction_threshold (float): The limit to trigger an alert
            if the balance after a transaction reaches it or below. 0
            indicates no alerts will be sent. Not present if not set (issuer
            value threshold limit applies if available). Not present for COUNT
            type velocity. Example: 50.55 This is an optional output field.
        annual_transaction_count (float): Maximum number of transactions
            allowed per annum.   Card limit ‘0’ represents the value is
            inherited and inherited limit could be calculated by adding
            accumulated and balance.
        annual_transaction_accumulated (float): Number of times the card is
            used during the year.
        annual_transaction_balance (float): Number of times the card could be
            used in rest of the year.
        annual_transaction_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        annual_transaction_threshold (float): The limit to trigger an alert if
            the balance after a transaction reaches it or below. 0 indicates
            no alerts will be sent. Not present if not set (issuer value
            threshold limit applies if available). Not present for COUNT type
            velocity. Example: 50.55 This is an optional output field.
        life_time_transaction_count (float): Maximum number of transactions
            allowed in the card’s life time.   Card limit ‘0’ represents the
            value is inherited and inherited limit could be calculated by
            adding accumulated and balance.  However, Inherited limit ‘0’
            represents unlimited.
        life_time_transaction_accumulated (float): Number of times the card is
            used during the card’s life time.
        life_time_transaction_balance (float): Number of times the card could
            be used in rest of the card’s life time.
        life_time_transaction_override (bool): Indicate if the limit is
            overridden or default. (False for default).   Example: false
        life_time_transaction_threshold (float): The limit to trigger an alert
            if the balance after a transaction reaches it or below. 0
            indicates no alerts will be sent. Not present if not set (issuer
            value threshold limit applies if available). Not present for COUNT
            type velocity. Example: 50.55 This is an optional output field.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "level": 'Level',
        "daily_spend": 'DailySpend',
        "daily_spend_accumulated": 'DailySpendAccumulated',
        "daily_spend_balance": 'DailySpendBalance',
        "daily_spend_override": 'DailySpendOverride',
        "daily_spend_threshold": 'DailySpendThreshold',
        "weekly_spend": 'WeeklySpend',
        "weekly_spend_accumulated": 'WeeklySpendAccumulated',
        "weekly_spend_balance": 'WeeklySpendBalance',
        "weekly_spend_override": 'WeeklySpendOverride',
        "weekly_spend_threshold": 'WeeklySpendThreshold',
        "monthly_spend": 'MonthlySpend',
        "monthly_spend_accumulated": 'MonthlySpendAccumulated',
        "monthly_spend_balance": 'MonthlySpendBalance',
        "monthly_spend_override": 'MonthlySpendOverride',
        "per_transaction_spend": 'PerTransactionSpend',
        "per_transaction_spend_override": 'PerTransactionSpendOverride',
        "annual_spend": 'AnnualSpend',
        "annual_spend_accumulated": 'AnnualSpendAccumulated',
        "annual_spend_balance": 'AnnualSpendBalance',
        "annual_spend_override": 'AnnualSpendOverride',
        "annual_spend_threshold": 'AnnualSpendThreshold',
        "life_time_spend": 'LifeTimeSpend',
        "life_time_spend_accumulated": 'LifeTimeSpendAccumulated',
        "life_time_spend_balance": 'LifeTimeSpendBalance',
        "life_time_spend_override": 'LifeTimeSpendOverride',
        "life_time_spend_threshold": 'LifeTimeSpendThreshold',
        "daily_volume": 'DailyVolume',
        "daily_volume_accumulated": 'DailyVolumeAccumulated',
        "daily_volume_balance": 'DailyVolumeBalance',
        "daily_volume_override": 'DailyVolumeOverride',
        "daily_volume_threshold": 'DailyVolumeThreshold',
        "weekly_volume": 'WeeklyVolume',
        "weekly_volume_accumulated": 'WeeklyVolumeAccumulated',
        "weekly_volume_balance": 'WeeklyVolumeBalance',
        "weekly_volume_override": 'WeeklyVolumeOverride',
        "weekly_volume_threshold": 'WeeklyVolumeThreshold',
        "monthly_volume": 'MonthlyVolume',
        "monthly_volume_accumulated": 'MonthlyVolumeAccumulated',
        "monthly_volume_balance": 'MonthlyVolumeBalance',
        "monthly_volume_override": 'MonthlyVolumeOverride',
        "monthly_volume_threshold": 'MonthlyVolumeThreshold',
        "per_transaction_volume": 'PerTransactionVolume',
        "per_transaction_volume_override": 'PerTransactionVolumeOverride',
        "annual_volume": 'AnnualVolume',
        "annual_volume_accumulated": 'AnnualVolumeAccumulated',
        "annual_volume_balance": 'AnnualVolumeBalance',
        "annual_volume_override": 'AnnualVolumeOverride',
        "annual_volume_threshold": 'AnnualVolumeThreshold',
        "life_time_volume": 'LifeTimeVolume',
        "life_time_volume_accumulated": 'LifeTimeVolumeAccumulated',
        "life_time_volume_balance": 'LifeTimeVolumeBalance',
        "life_time_volume_override": 'LifeTimeVolumeOverride',
        "life_time_volume_threshold": 'LifeTimeVolumeThreshold',
        "daily_transaction_count": 'DailyTransactionCount',
        "daily_transaction_accumulated": 'DailyTransactionAccumulated',
        "daily_transaction_balance": 'DailyTransactionBalance',
        "daily_transaction_override": 'DailyTransactionOverride',
        "daily_transaction_threshold": 'DailyTransactionThreshold',
        "weekly_transaction_count": 'WeeklyTransactionCount',
        "weekly_transaction_accumulated": 'WeeklyTransactionAccumulated',
        "weekly_transaction_balance": 'WeeklyTransactionBalance',
        "weekly_transaction_override": 'WeeklyTransactionOverride',
        "weekly_transaction_threshold": 'WeeklyTransactionThreshold',
        "monthly_transaction_count": 'MonthlyTransactionCount',
        "monthly_transaction_accumulated": 'MonthlyTransactionAccumulated',
        "monthly_transaction_balance": 'MonthlyTransactionBalance',
        "monthly_transaction_override": 'MonthlyTransactionOverride',
        "monthly_transaction_threshold": 'MonthlyTransactionThreshold',
        "annual_transaction_count": 'AnnualTransactionCount',
        "annual_transaction_accumulated": 'AnnualTransactionAccumulated',
        "annual_transaction_balance": 'AnnualTransactionBalance',
        "annual_transaction_override": 'AnnualTransactionOverride',
        "annual_transaction_threshold": 'AnnualTransactionThreshold',
        "life_time_transaction_count": 'LifeTimeTransactionCount',
        "life_time_transaction_accumulated": 'LifeTimeTransactionAccumulated',
        "life_time_transaction_balance": 'LifeTimeTransactionBalance',
        "life_time_transaction_override": 'LifeTimeTransactionOverride',
        "life_time_transaction_threshold": 'LifeTimeTransactionThreshold'
    }

    _optionals = [
        'level',
        'daily_spend',
        'daily_spend_accumulated',
        'daily_spend_balance',
        'daily_spend_override',
        'daily_spend_threshold',
        'weekly_spend',
        'weekly_spend_accumulated',
        'weekly_spend_balance',
        'weekly_spend_override',
        'weekly_spend_threshold',
        'monthly_spend',
        'monthly_spend_accumulated',
        'monthly_spend_balance',
        'monthly_spend_override',
        'per_transaction_spend',
        'per_transaction_spend_override',
        'annual_spend',
        'annual_spend_accumulated',
        'annual_spend_balance',
        'annual_spend_override',
        'annual_spend_threshold',
        'life_time_spend',
        'life_time_spend_accumulated',
        'life_time_spend_balance',
        'life_time_spend_override',
        'life_time_spend_threshold',
        'daily_volume',
        'daily_volume_accumulated',
        'daily_volume_balance',
        'daily_volume_override',
        'daily_volume_threshold',
        'weekly_volume',
        'weekly_volume_accumulated',
        'weekly_volume_balance',
        'weekly_volume_override',
        'weekly_volume_threshold',
        'monthly_volume',
        'monthly_volume_accumulated',
        'monthly_volume_balance',
        'monthly_volume_override',
        'monthly_volume_threshold',
        'per_transaction_volume',
        'per_transaction_volume_override',
        'annual_volume',
        'annual_volume_accumulated',
        'annual_volume_balance',
        'annual_volume_override',
        'annual_volume_threshold',
        'life_time_volume',
        'life_time_volume_accumulated',
        'life_time_volume_balance',
        'life_time_volume_override',
        'life_time_volume_threshold',
        'daily_transaction_count',
        'daily_transaction_accumulated',
        'daily_transaction_balance',
        'daily_transaction_override',
        'daily_transaction_threshold',
        'weekly_transaction_count',
        'weekly_transaction_accumulated',
        'weekly_transaction_balance',
        'weekly_transaction_override',
        'weekly_transaction_threshold',
        'monthly_transaction_count',
        'monthly_transaction_accumulated',
        'monthly_transaction_balance',
        'monthly_transaction_override',
        'monthly_transaction_threshold',
        'annual_transaction_count',
        'annual_transaction_accumulated',
        'annual_transaction_balance',
        'annual_transaction_override',
        'annual_transaction_threshold',
        'life_time_transaction_count',
        'life_time_transaction_accumulated',
        'life_time_transaction_balance',
        'life_time_transaction_override',
        'life_time_transaction_threshold',
    ]

    def __init__(self,
                 level=APIHelper.SKIP,
                 daily_spend=APIHelper.SKIP,
                 daily_spend_accumulated=APIHelper.SKIP,
                 daily_spend_balance=APIHelper.SKIP,
                 daily_spend_override=APIHelper.SKIP,
                 daily_spend_threshold=APIHelper.SKIP,
                 weekly_spend=APIHelper.SKIP,
                 weekly_spend_accumulated=APIHelper.SKIP,
                 weekly_spend_balance=APIHelper.SKIP,
                 weekly_spend_override=APIHelper.SKIP,
                 weekly_spend_threshold=APIHelper.SKIP,
                 monthly_spend=APIHelper.SKIP,
                 monthly_spend_accumulated=APIHelper.SKIP,
                 monthly_spend_balance=APIHelper.SKIP,
                 monthly_spend_override=APIHelper.SKIP,
                 per_transaction_spend=APIHelper.SKIP,
                 per_transaction_spend_override=APIHelper.SKIP,
                 annual_spend=APIHelper.SKIP,
                 annual_spend_accumulated=APIHelper.SKIP,
                 annual_spend_balance=APIHelper.SKIP,
                 annual_spend_override=APIHelper.SKIP,
                 annual_spend_threshold=APIHelper.SKIP,
                 life_time_spend=APIHelper.SKIP,
                 life_time_spend_accumulated=APIHelper.SKIP,
                 life_time_spend_balance=APIHelper.SKIP,
                 life_time_spend_override=APIHelper.SKIP,
                 life_time_spend_threshold=APIHelper.SKIP,
                 daily_volume=APIHelper.SKIP,
                 daily_volume_accumulated=APIHelper.SKIP,
                 daily_volume_balance=APIHelper.SKIP,
                 daily_volume_override=APIHelper.SKIP,
                 daily_volume_threshold=APIHelper.SKIP,
                 weekly_volume=APIHelper.SKIP,
                 weekly_volume_accumulated=APIHelper.SKIP,
                 weekly_volume_balance=APIHelper.SKIP,
                 weekly_volume_override=APIHelper.SKIP,
                 weekly_volume_threshold=APIHelper.SKIP,
                 monthly_volume=APIHelper.SKIP,
                 monthly_volume_accumulated=APIHelper.SKIP,
                 monthly_volume_balance=APIHelper.SKIP,
                 monthly_volume_override=APIHelper.SKIP,
                 monthly_volume_threshold=APIHelper.SKIP,
                 per_transaction_volume=APIHelper.SKIP,
                 per_transaction_volume_override=APIHelper.SKIP,
                 annual_volume=APIHelper.SKIP,
                 annual_volume_accumulated=APIHelper.SKIP,
                 annual_volume_balance=APIHelper.SKIP,
                 annual_volume_override=APIHelper.SKIP,
                 annual_volume_threshold=APIHelper.SKIP,
                 life_time_volume=APIHelper.SKIP,
                 life_time_volume_accumulated=APIHelper.SKIP,
                 life_time_volume_balance=APIHelper.SKIP,
                 life_time_volume_override=APIHelper.SKIP,
                 life_time_volume_threshold=APIHelper.SKIP,
                 daily_transaction_count=APIHelper.SKIP,
                 daily_transaction_accumulated=APIHelper.SKIP,
                 daily_transaction_balance=APIHelper.SKIP,
                 daily_transaction_override=APIHelper.SKIP,
                 daily_transaction_threshold=APIHelper.SKIP,
                 weekly_transaction_count=APIHelper.SKIP,
                 weekly_transaction_accumulated=APIHelper.SKIP,
                 weekly_transaction_balance=APIHelper.SKIP,
                 weekly_transaction_override=APIHelper.SKIP,
                 weekly_transaction_threshold=APIHelper.SKIP,
                 monthly_transaction_count=APIHelper.SKIP,
                 monthly_transaction_accumulated=APIHelper.SKIP,
                 monthly_transaction_balance=APIHelper.SKIP,
                 monthly_transaction_override=APIHelper.SKIP,
                 monthly_transaction_threshold=APIHelper.SKIP,
                 annual_transaction_count=APIHelper.SKIP,
                 annual_transaction_accumulated=APIHelper.SKIP,
                 annual_transaction_balance=APIHelper.SKIP,
                 annual_transaction_override=APIHelper.SKIP,
                 annual_transaction_threshold=APIHelper.SKIP,
                 life_time_transaction_count=APIHelper.SKIP,
                 life_time_transaction_accumulated=APIHelper.SKIP,
                 life_time_transaction_balance=APIHelper.SKIP,
                 life_time_transaction_override=APIHelper.SKIP,
                 life_time_transaction_threshold=APIHelper.SKIP):
        """Constructor for the UsageRestriction class"""

        # Initialize members of the class
        if level is not APIHelper.SKIP:
            self.level = level 
        if daily_spend is not APIHelper.SKIP:
            self.daily_spend = daily_spend 
        if daily_spend_accumulated is not APIHelper.SKIP:
            self.daily_spend_accumulated = daily_spend_accumulated 
        if daily_spend_balance is not APIHelper.SKIP:
            self.daily_spend_balance = daily_spend_balance 
        if daily_spend_override is not APIHelper.SKIP:
            self.daily_spend_override = daily_spend_override 
        if daily_spend_threshold is not APIHelper.SKIP:
            self.daily_spend_threshold = daily_spend_threshold 
        if weekly_spend is not APIHelper.SKIP:
            self.weekly_spend = weekly_spend 
        if weekly_spend_accumulated is not APIHelper.SKIP:
            self.weekly_spend_accumulated = weekly_spend_accumulated 
        if weekly_spend_balance is not APIHelper.SKIP:
            self.weekly_spend_balance = weekly_spend_balance 
        if weekly_spend_override is not APIHelper.SKIP:
            self.weekly_spend_override = weekly_spend_override 
        if weekly_spend_threshold is not APIHelper.SKIP:
            self.weekly_spend_threshold = weekly_spend_threshold 
        if monthly_spend is not APIHelper.SKIP:
            self.monthly_spend = monthly_spend 
        if monthly_spend_accumulated is not APIHelper.SKIP:
            self.monthly_spend_accumulated = monthly_spend_accumulated 
        if monthly_spend_balance is not APIHelper.SKIP:
            self.monthly_spend_balance = monthly_spend_balance 
        if monthly_spend_override is not APIHelper.SKIP:
            self.monthly_spend_override = monthly_spend_override 
        if per_transaction_spend is not APIHelper.SKIP:
            self.per_transaction_spend = per_transaction_spend 
        if per_transaction_spend_override is not APIHelper.SKIP:
            self.per_transaction_spend_override = per_transaction_spend_override 
        if annual_spend is not APIHelper.SKIP:
            self.annual_spend = annual_spend 
        if annual_spend_accumulated is not APIHelper.SKIP:
            self.annual_spend_accumulated = annual_spend_accumulated 
        if annual_spend_balance is not APIHelper.SKIP:
            self.annual_spend_balance = annual_spend_balance 
        if annual_spend_override is not APIHelper.SKIP:
            self.annual_spend_override = annual_spend_override 
        if annual_spend_threshold is not APIHelper.SKIP:
            self.annual_spend_threshold = annual_spend_threshold 
        if life_time_spend is not APIHelper.SKIP:
            self.life_time_spend = life_time_spend 
        if life_time_spend_accumulated is not APIHelper.SKIP:
            self.life_time_spend_accumulated = life_time_spend_accumulated 
        if life_time_spend_balance is not APIHelper.SKIP:
            self.life_time_spend_balance = life_time_spend_balance 
        if life_time_spend_override is not APIHelper.SKIP:
            self.life_time_spend_override = life_time_spend_override 
        if life_time_spend_threshold is not APIHelper.SKIP:
            self.life_time_spend_threshold = life_time_spend_threshold 
        if daily_volume is not APIHelper.SKIP:
            self.daily_volume = daily_volume 
        if daily_volume_accumulated is not APIHelper.SKIP:
            self.daily_volume_accumulated = daily_volume_accumulated 
        if daily_volume_balance is not APIHelper.SKIP:
            self.daily_volume_balance = daily_volume_balance 
        if daily_volume_override is not APIHelper.SKIP:
            self.daily_volume_override = daily_volume_override 
        if daily_volume_threshold is not APIHelper.SKIP:
            self.daily_volume_threshold = daily_volume_threshold 
        if weekly_volume is not APIHelper.SKIP:
            self.weekly_volume = weekly_volume 
        if weekly_volume_accumulated is not APIHelper.SKIP:
            self.weekly_volume_accumulated = weekly_volume_accumulated 
        if weekly_volume_balance is not APIHelper.SKIP:
            self.weekly_volume_balance = weekly_volume_balance 
        if weekly_volume_override is not APIHelper.SKIP:
            self.weekly_volume_override = weekly_volume_override 
        if weekly_volume_threshold is not APIHelper.SKIP:
            self.weekly_volume_threshold = weekly_volume_threshold 
        if monthly_volume is not APIHelper.SKIP:
            self.monthly_volume = monthly_volume 
        if monthly_volume_accumulated is not APIHelper.SKIP:
            self.monthly_volume_accumulated = monthly_volume_accumulated 
        if monthly_volume_balance is not APIHelper.SKIP:
            self.monthly_volume_balance = monthly_volume_balance 
        if monthly_volume_override is not APIHelper.SKIP:
            self.monthly_volume_override = monthly_volume_override 
        if monthly_volume_threshold is not APIHelper.SKIP:
            self.monthly_volume_threshold = monthly_volume_threshold 
        if per_transaction_volume is not APIHelper.SKIP:
            self.per_transaction_volume = per_transaction_volume 
        if per_transaction_volume_override is not APIHelper.SKIP:
            self.per_transaction_volume_override = per_transaction_volume_override 
        if annual_volume is not APIHelper.SKIP:
            self.annual_volume = annual_volume 
        if annual_volume_accumulated is not APIHelper.SKIP:
            self.annual_volume_accumulated = annual_volume_accumulated 
        if annual_volume_balance is not APIHelper.SKIP:
            self.annual_volume_balance = annual_volume_balance 
        if annual_volume_override is not APIHelper.SKIP:
            self.annual_volume_override = annual_volume_override 
        if annual_volume_threshold is not APIHelper.SKIP:
            self.annual_volume_threshold = annual_volume_threshold 
        if life_time_volume is not APIHelper.SKIP:
            self.life_time_volume = life_time_volume 
        if life_time_volume_accumulated is not APIHelper.SKIP:
            self.life_time_volume_accumulated = life_time_volume_accumulated 
        if life_time_volume_balance is not APIHelper.SKIP:
            self.life_time_volume_balance = life_time_volume_balance 
        if life_time_volume_override is not APIHelper.SKIP:
            self.life_time_volume_override = life_time_volume_override 
        if life_time_volume_threshold is not APIHelper.SKIP:
            self.life_time_volume_threshold = life_time_volume_threshold 
        if daily_transaction_count is not APIHelper.SKIP:
            self.daily_transaction_count = daily_transaction_count 
        if daily_transaction_accumulated is not APIHelper.SKIP:
            self.daily_transaction_accumulated = daily_transaction_accumulated 
        if daily_transaction_balance is not APIHelper.SKIP:
            self.daily_transaction_balance = daily_transaction_balance 
        if daily_transaction_override is not APIHelper.SKIP:
            self.daily_transaction_override = daily_transaction_override 
        if daily_transaction_threshold is not APIHelper.SKIP:
            self.daily_transaction_threshold = daily_transaction_threshold 
        if weekly_transaction_count is not APIHelper.SKIP:
            self.weekly_transaction_count = weekly_transaction_count 
        if weekly_transaction_accumulated is not APIHelper.SKIP:
            self.weekly_transaction_accumulated = weekly_transaction_accumulated 
        if weekly_transaction_balance is not APIHelper.SKIP:
            self.weekly_transaction_balance = weekly_transaction_balance 
        if weekly_transaction_override is not APIHelper.SKIP:
            self.weekly_transaction_override = weekly_transaction_override 
        if weekly_transaction_threshold is not APIHelper.SKIP:
            self.weekly_transaction_threshold = weekly_transaction_threshold 
        if monthly_transaction_count is not APIHelper.SKIP:
            self.monthly_transaction_count = monthly_transaction_count 
        if monthly_transaction_accumulated is not APIHelper.SKIP:
            self.monthly_transaction_accumulated = monthly_transaction_accumulated 
        if monthly_transaction_balance is not APIHelper.SKIP:
            self.monthly_transaction_balance = monthly_transaction_balance 
        if monthly_transaction_override is not APIHelper.SKIP:
            self.monthly_transaction_override = monthly_transaction_override 
        if monthly_transaction_threshold is not APIHelper.SKIP:
            self.monthly_transaction_threshold = monthly_transaction_threshold 
        if annual_transaction_count is not APIHelper.SKIP:
            self.annual_transaction_count = annual_transaction_count 
        if annual_transaction_accumulated is not APIHelper.SKIP:
            self.annual_transaction_accumulated = annual_transaction_accumulated 
        if annual_transaction_balance is not APIHelper.SKIP:
            self.annual_transaction_balance = annual_transaction_balance 
        if annual_transaction_override is not APIHelper.SKIP:
            self.annual_transaction_override = annual_transaction_override 
        if annual_transaction_threshold is not APIHelper.SKIP:
            self.annual_transaction_threshold = annual_transaction_threshold 
        if life_time_transaction_count is not APIHelper.SKIP:
            self.life_time_transaction_count = life_time_transaction_count 
        if life_time_transaction_accumulated is not APIHelper.SKIP:
            self.life_time_transaction_accumulated = life_time_transaction_accumulated 
        if life_time_transaction_balance is not APIHelper.SKIP:
            self.life_time_transaction_balance = life_time_transaction_balance 
        if life_time_transaction_override is not APIHelper.SKIP:
            self.life_time_transaction_override = life_time_transaction_override 
        if life_time_transaction_threshold is not APIHelper.SKIP:
            self.life_time_transaction_threshold = life_time_transaction_threshold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        level = dictionary.get("Level") if dictionary.get("Level") else APIHelper.SKIP
        daily_spend = dictionary.get("DailySpend") if dictionary.get("DailySpend") else APIHelper.SKIP
        daily_spend_accumulated = dictionary.get("DailySpendAccumulated") if dictionary.get("DailySpendAccumulated") else APIHelper.SKIP
        daily_spend_balance = dictionary.get("DailySpendBalance") if dictionary.get("DailySpendBalance") else APIHelper.SKIP
        daily_spend_override = dictionary.get("DailySpendOverride") if "DailySpendOverride" in dictionary.keys() else APIHelper.SKIP
        daily_spend_threshold = dictionary.get("DailySpendThreshold") if dictionary.get("DailySpendThreshold") else APIHelper.SKIP
        weekly_spend = dictionary.get("WeeklySpend") if dictionary.get("WeeklySpend") else APIHelper.SKIP
        weekly_spend_accumulated = dictionary.get("WeeklySpendAccumulated") if dictionary.get("WeeklySpendAccumulated") else APIHelper.SKIP
        weekly_spend_balance = dictionary.get("WeeklySpendBalance") if dictionary.get("WeeklySpendBalance") else APIHelper.SKIP
        weekly_spend_override = dictionary.get("WeeklySpendOverride") if "WeeklySpendOverride" in dictionary.keys() else APIHelper.SKIP
        weekly_spend_threshold = dictionary.get("WeeklySpendThreshold") if dictionary.get("WeeklySpendThreshold") else APIHelper.SKIP
        monthly_spend = dictionary.get("MonthlySpend") if dictionary.get("MonthlySpend") else APIHelper.SKIP
        monthly_spend_accumulated = dictionary.get("MonthlySpendAccumulated") if dictionary.get("MonthlySpendAccumulated") else APIHelper.SKIP
        monthly_spend_balance = dictionary.get("MonthlySpendBalance") if dictionary.get("MonthlySpendBalance") else APIHelper.SKIP
        monthly_spend_override = dictionary.get("MonthlySpendOverride") if "MonthlySpendOverride" in dictionary.keys() else APIHelper.SKIP
        per_transaction_spend = dictionary.get("PerTransactionSpend") if dictionary.get("PerTransactionSpend") else APIHelper.SKIP
        per_transaction_spend_override = dictionary.get("PerTransactionSpendOverride") if "PerTransactionSpendOverride" in dictionary.keys() else APIHelper.SKIP
        annual_spend = dictionary.get("AnnualSpend") if dictionary.get("AnnualSpend") else APIHelper.SKIP
        annual_spend_accumulated = dictionary.get("AnnualSpendAccumulated") if dictionary.get("AnnualSpendAccumulated") else APIHelper.SKIP
        annual_spend_balance = dictionary.get("AnnualSpendBalance") if dictionary.get("AnnualSpendBalance") else APIHelper.SKIP
        annual_spend_override = dictionary.get("AnnualSpendOverride") if "AnnualSpendOverride" in dictionary.keys() else APIHelper.SKIP
        annual_spend_threshold = dictionary.get("AnnualSpendThreshold") if dictionary.get("AnnualSpendThreshold") else APIHelper.SKIP
        life_time_spend = dictionary.get("LifeTimeSpend") if dictionary.get("LifeTimeSpend") else APIHelper.SKIP
        life_time_spend_accumulated = dictionary.get("LifeTimeSpendAccumulated") if dictionary.get("LifeTimeSpendAccumulated") else APIHelper.SKIP
        life_time_spend_balance = dictionary.get("LifeTimeSpendBalance") if dictionary.get("LifeTimeSpendBalance") else APIHelper.SKIP
        life_time_spend_override = dictionary.get("LifeTimeSpendOverride") if "LifeTimeSpendOverride" in dictionary.keys() else APIHelper.SKIP
        life_time_spend_threshold = dictionary.get("LifeTimeSpendThreshold") if dictionary.get("LifeTimeSpendThreshold") else APIHelper.SKIP
        daily_volume = dictionary.get("DailyVolume") if dictionary.get("DailyVolume") else APIHelper.SKIP
        daily_volume_accumulated = dictionary.get("DailyVolumeAccumulated") if dictionary.get("DailyVolumeAccumulated") else APIHelper.SKIP
        daily_volume_balance = dictionary.get("DailyVolumeBalance") if dictionary.get("DailyVolumeBalance") else APIHelper.SKIP
        daily_volume_override = dictionary.get("DailyVolumeOverride") if dictionary.get("DailyVolumeOverride") else APIHelper.SKIP
        daily_volume_threshold = dictionary.get("DailyVolumeThreshold") if dictionary.get("DailyVolumeThreshold") else APIHelper.SKIP
        weekly_volume = dictionary.get("WeeklyVolume") if dictionary.get("WeeklyVolume") else APIHelper.SKIP
        weekly_volume_accumulated = dictionary.get("WeeklyVolumeAccumulated") if dictionary.get("WeeklyVolumeAccumulated") else APIHelper.SKIP
        weekly_volume_balance = dictionary.get("WeeklyVolumeBalance") if dictionary.get("WeeklyVolumeBalance") else APIHelper.SKIP
        weekly_volume_override = dictionary.get("WeeklyVolumeOverride") if "WeeklyVolumeOverride" in dictionary.keys() else APIHelper.SKIP
        weekly_volume_threshold = dictionary.get("WeeklyVolumeThreshold") if dictionary.get("WeeklyVolumeThreshold") else APIHelper.SKIP
        monthly_volume = dictionary.get("MonthlyVolume") if dictionary.get("MonthlyVolume") else APIHelper.SKIP
        monthly_volume_accumulated = dictionary.get("MonthlyVolumeAccumulated") if dictionary.get("MonthlyVolumeAccumulated") else APIHelper.SKIP
        monthly_volume_balance = dictionary.get("MonthlyVolumeBalance") if dictionary.get("MonthlyVolumeBalance") else APIHelper.SKIP
        monthly_volume_override = dictionary.get("MonthlyVolumeOverride") if "MonthlyVolumeOverride" in dictionary.keys() else APIHelper.SKIP
        monthly_volume_threshold = dictionary.get("MonthlyVolumeThreshold") if dictionary.get("MonthlyVolumeThreshold") else APIHelper.SKIP
        per_transaction_volume = dictionary.get("PerTransactionVolume") if dictionary.get("PerTransactionVolume") else APIHelper.SKIP
        per_transaction_volume_override = dictionary.get("PerTransactionVolumeOverride") if "PerTransactionVolumeOverride" in dictionary.keys() else APIHelper.SKIP
        annual_volume = dictionary.get("AnnualVolume") if dictionary.get("AnnualVolume") else APIHelper.SKIP
        annual_volume_accumulated = dictionary.get("AnnualVolumeAccumulated") if dictionary.get("AnnualVolumeAccumulated") else APIHelper.SKIP
        annual_volume_balance = dictionary.get("AnnualVolumeBalance") if dictionary.get("AnnualVolumeBalance") else APIHelper.SKIP
        annual_volume_override = dictionary.get("AnnualVolumeOverride") if "AnnualVolumeOverride" in dictionary.keys() else APIHelper.SKIP
        annual_volume_threshold = dictionary.get("AnnualVolumeThreshold") if dictionary.get("AnnualVolumeThreshold") else APIHelper.SKIP
        life_time_volume = dictionary.get("LifeTimeVolume") if dictionary.get("LifeTimeVolume") else APIHelper.SKIP
        life_time_volume_accumulated = dictionary.get("LifeTimeVolumeAccumulated") if dictionary.get("LifeTimeVolumeAccumulated") else APIHelper.SKIP
        life_time_volume_balance = dictionary.get("LifeTimeVolumeBalance") if dictionary.get("LifeTimeVolumeBalance") else APIHelper.SKIP
        life_time_volume_override = dictionary.get("LifeTimeVolumeOverride") if "LifeTimeVolumeOverride" in dictionary.keys() else APIHelper.SKIP
        life_time_volume_threshold = dictionary.get("LifeTimeVolumeThreshold") if dictionary.get("LifeTimeVolumeThreshold") else APIHelper.SKIP
        daily_transaction_count = dictionary.get("DailyTransactionCount") if dictionary.get("DailyTransactionCount") else APIHelper.SKIP
        daily_transaction_accumulated = dictionary.get("DailyTransactionAccumulated") if dictionary.get("DailyTransactionAccumulated") else APIHelper.SKIP
        daily_transaction_balance = dictionary.get("DailyTransactionBalance") if dictionary.get("DailyTransactionBalance") else APIHelper.SKIP
        daily_transaction_override = dictionary.get("DailyTransactionOverride") if "DailyTransactionOverride" in dictionary.keys() else APIHelper.SKIP
        daily_transaction_threshold = dictionary.get("DailyTransactionThreshold") if dictionary.get("DailyTransactionThreshold") else APIHelper.SKIP
        weekly_transaction_count = dictionary.get("WeeklyTransactionCount") if dictionary.get("WeeklyTransactionCount") else APIHelper.SKIP
        weekly_transaction_accumulated = dictionary.get("WeeklyTransactionAccumulated") if dictionary.get("WeeklyTransactionAccumulated") else APIHelper.SKIP
        weekly_transaction_balance = dictionary.get("WeeklyTransactionBalance") if dictionary.get("WeeklyTransactionBalance") else APIHelper.SKIP
        weekly_transaction_override = dictionary.get("WeeklyTransactionOverride") if "WeeklyTransactionOverride" in dictionary.keys() else APIHelper.SKIP
        weekly_transaction_threshold = dictionary.get("WeeklyTransactionThreshold") if dictionary.get("WeeklyTransactionThreshold") else APIHelper.SKIP
        monthly_transaction_count = dictionary.get("MonthlyTransactionCount") if dictionary.get("MonthlyTransactionCount") else APIHelper.SKIP
        monthly_transaction_accumulated = dictionary.get("MonthlyTransactionAccumulated") if dictionary.get("MonthlyTransactionAccumulated") else APIHelper.SKIP
        monthly_transaction_balance = dictionary.get("MonthlyTransactionBalance") if dictionary.get("MonthlyTransactionBalance") else APIHelper.SKIP
        monthly_transaction_override = dictionary.get("MonthlyTransactionOverride") if "MonthlyTransactionOverride" in dictionary.keys() else APIHelper.SKIP
        monthly_transaction_threshold = dictionary.get("MonthlyTransactionThreshold") if dictionary.get("MonthlyTransactionThreshold") else APIHelper.SKIP
        annual_transaction_count = dictionary.get("AnnualTransactionCount") if dictionary.get("AnnualTransactionCount") else APIHelper.SKIP
        annual_transaction_accumulated = dictionary.get("AnnualTransactionAccumulated") if dictionary.get("AnnualTransactionAccumulated") else APIHelper.SKIP
        annual_transaction_balance = dictionary.get("AnnualTransactionBalance") if dictionary.get("AnnualTransactionBalance") else APIHelper.SKIP
        annual_transaction_override = dictionary.get("AnnualTransactionOverride") if "AnnualTransactionOverride" in dictionary.keys() else APIHelper.SKIP
        annual_transaction_threshold = dictionary.get("AnnualTransactionThreshold") if dictionary.get("AnnualTransactionThreshold") else APIHelper.SKIP
        life_time_transaction_count = dictionary.get("LifeTimeTransactionCount") if dictionary.get("LifeTimeTransactionCount") else APIHelper.SKIP
        life_time_transaction_accumulated = dictionary.get("LifeTimeTransactionAccumulated") if dictionary.get("LifeTimeTransactionAccumulated") else APIHelper.SKIP
        life_time_transaction_balance = dictionary.get("LifeTimeTransactionBalance") if dictionary.get("LifeTimeTransactionBalance") else APIHelper.SKIP
        life_time_transaction_override = dictionary.get("LifeTimeTransactionOverride") if "LifeTimeTransactionOverride" in dictionary.keys() else APIHelper.SKIP
        life_time_transaction_threshold = dictionary.get("LifeTimeTransactionThreshold") if dictionary.get("LifeTimeTransactionThreshold") else APIHelper.SKIP
        # Return an object of this model
        return cls(level,
                   daily_spend,
                   daily_spend_accumulated,
                   daily_spend_balance,
                   daily_spend_override,
                   daily_spend_threshold,
                   weekly_spend,
                   weekly_spend_accumulated,
                   weekly_spend_balance,
                   weekly_spend_override,
                   weekly_spend_threshold,
                   monthly_spend,
                   monthly_spend_accumulated,
                   monthly_spend_balance,
                   monthly_spend_override,
                   per_transaction_spend,
                   per_transaction_spend_override,
                   annual_spend,
                   annual_spend_accumulated,
                   annual_spend_balance,
                   annual_spend_override,
                   annual_spend_threshold,
                   life_time_spend,
                   life_time_spend_accumulated,
                   life_time_spend_balance,
                   life_time_spend_override,
                   life_time_spend_threshold,
                   daily_volume,
                   daily_volume_accumulated,
                   daily_volume_balance,
                   daily_volume_override,
                   daily_volume_threshold,
                   weekly_volume,
                   weekly_volume_accumulated,
                   weekly_volume_balance,
                   weekly_volume_override,
                   weekly_volume_threshold,
                   monthly_volume,
                   monthly_volume_accumulated,
                   monthly_volume_balance,
                   monthly_volume_override,
                   monthly_volume_threshold,
                   per_transaction_volume,
                   per_transaction_volume_override,
                   annual_volume,
                   annual_volume_accumulated,
                   annual_volume_balance,
                   annual_volume_override,
                   annual_volume_threshold,
                   life_time_volume,
                   life_time_volume_accumulated,
                   life_time_volume_balance,
                   life_time_volume_override,
                   life_time_volume_threshold,
                   daily_transaction_count,
                   daily_transaction_accumulated,
                   daily_transaction_balance,
                   daily_transaction_override,
                   daily_transaction_threshold,
                   weekly_transaction_count,
                   weekly_transaction_accumulated,
                   weekly_transaction_balance,
                   weekly_transaction_override,
                   weekly_transaction_threshold,
                   monthly_transaction_count,
                   monthly_transaction_accumulated,
                   monthly_transaction_balance,
                   monthly_transaction_override,
                   monthly_transaction_threshold,
                   annual_transaction_count,
                   annual_transaction_accumulated,
                   annual_transaction_balance,
                   annual_transaction_override,
                   annual_transaction_threshold,
                   life_time_transaction_count,
                   life_time_transaction_accumulated,
                   life_time_transaction_balance,
                   life_time_transaction_override,
                   life_time_transaction_threshold)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'level={(self.level if hasattr(self, "level") else None)!r}, '
                f'daily_spend={(self.daily_spend if hasattr(self, "daily_spend") else None)!r}, '
                f'daily_spend_accumulated={(self.daily_spend_accumulated if hasattr(self, "daily_spend_accumulated") else None)!r}, '
                f'daily_spend_balance={(self.daily_spend_balance if hasattr(self, "daily_spend_balance") else None)!r}, '
                f'daily_spend_override={(self.daily_spend_override if hasattr(self, "daily_spend_override") else None)!r}, '
                f'daily_spend_threshold={(self.daily_spend_threshold if hasattr(self, "daily_spend_threshold") else None)!r}, '
                f'weekly_spend={(self.weekly_spend if hasattr(self, "weekly_spend") else None)!r}, '
                f'weekly_spend_accumulated={(self.weekly_spend_accumulated if hasattr(self, "weekly_spend_accumulated") else None)!r}, '
                f'weekly_spend_balance={(self.weekly_spend_balance if hasattr(self, "weekly_spend_balance") else None)!r}, '
                f'weekly_spend_override={(self.weekly_spend_override if hasattr(self, "weekly_spend_override") else None)!r}, '
                f'weekly_spend_threshold={(self.weekly_spend_threshold if hasattr(self, "weekly_spend_threshold") else None)!r}, '
                f'monthly_spend={(self.monthly_spend if hasattr(self, "monthly_spend") else None)!r}, '
                f'monthly_spend_accumulated={(self.monthly_spend_accumulated if hasattr(self, "monthly_spend_accumulated") else None)!r}, '
                f'monthly_spend_balance={(self.monthly_spend_balance if hasattr(self, "monthly_spend_balance") else None)!r}, '
                f'monthly_spend_override={(self.monthly_spend_override if hasattr(self, "monthly_spend_override") else None)!r}, '
                f'per_transaction_spend={(self.per_transaction_spend if hasattr(self, "per_transaction_spend") else None)!r}, '
                f'per_transaction_spend_override={(self.per_transaction_spend_override if hasattr(self, "per_transaction_spend_override") else None)!r}, '
                f'annual_spend={(self.annual_spend if hasattr(self, "annual_spend") else None)!r}, '
                f'annual_spend_accumulated={(self.annual_spend_accumulated if hasattr(self, "annual_spend_accumulated") else None)!r}, '
                f'annual_spend_balance={(self.annual_spend_balance if hasattr(self, "annual_spend_balance") else None)!r}, '
                f'annual_spend_override={(self.annual_spend_override if hasattr(self, "annual_spend_override") else None)!r}, '
                f'annual_spend_threshold={(self.annual_spend_threshold if hasattr(self, "annual_spend_threshold") else None)!r}, '
                f'life_time_spend={(self.life_time_spend if hasattr(self, "life_time_spend") else None)!r}, '
                f'life_time_spend_accumulated={(self.life_time_spend_accumulated if hasattr(self, "life_time_spend_accumulated") else None)!r}, '
                f'life_time_spend_balance={(self.life_time_spend_balance if hasattr(self, "life_time_spend_balance") else None)!r}, '
                f'life_time_spend_override={(self.life_time_spend_override if hasattr(self, "life_time_spend_override") else None)!r}, '
                f'life_time_spend_threshold={(self.life_time_spend_threshold if hasattr(self, "life_time_spend_threshold") else None)!r}, '
                f'daily_volume={(self.daily_volume if hasattr(self, "daily_volume") else None)!r}, '
                f'daily_volume_accumulated={(self.daily_volume_accumulated if hasattr(self, "daily_volume_accumulated") else None)!r}, '
                f'daily_volume_balance={(self.daily_volume_balance if hasattr(self, "daily_volume_balance") else None)!r}, '
                f'daily_volume_override={(self.daily_volume_override if hasattr(self, "daily_volume_override") else None)!r}, '
                f'daily_volume_threshold={(self.daily_volume_threshold if hasattr(self, "daily_volume_threshold") else None)!r}, '
                f'weekly_volume={(self.weekly_volume if hasattr(self, "weekly_volume") else None)!r}, '
                f'weekly_volume_accumulated={(self.weekly_volume_accumulated if hasattr(self, "weekly_volume_accumulated") else None)!r}, '
                f'weekly_volume_balance={(self.weekly_volume_balance if hasattr(self, "weekly_volume_balance") else None)!r}, '
                f'weekly_volume_override={(self.weekly_volume_override if hasattr(self, "weekly_volume_override") else None)!r}, '
                f'weekly_volume_threshold={(self.weekly_volume_threshold if hasattr(self, "weekly_volume_threshold") else None)!r}, '
                f'monthly_volume={(self.monthly_volume if hasattr(self, "monthly_volume") else None)!r}, '
                f'monthly_volume_accumulated={(self.monthly_volume_accumulated if hasattr(self, "monthly_volume_accumulated") else None)!r}, '
                f'monthly_volume_balance={(self.monthly_volume_balance if hasattr(self, "monthly_volume_balance") else None)!r}, '
                f'monthly_volume_override={(self.monthly_volume_override if hasattr(self, "monthly_volume_override") else None)!r}, '
                f'monthly_volume_threshold={(self.monthly_volume_threshold if hasattr(self, "monthly_volume_threshold") else None)!r}, '
                f'per_transaction_volume={(self.per_transaction_volume if hasattr(self, "per_transaction_volume") else None)!r}, '
                f'per_transaction_volume_override={(self.per_transaction_volume_override if hasattr(self, "per_transaction_volume_override") else None)!r}, '
                f'annual_volume={(self.annual_volume if hasattr(self, "annual_volume") else None)!r}, '
                f'annual_volume_accumulated={(self.annual_volume_accumulated if hasattr(self, "annual_volume_accumulated") else None)!r}, '
                f'annual_volume_balance={(self.annual_volume_balance if hasattr(self, "annual_volume_balance") else None)!r}, '
                f'annual_volume_override={(self.annual_volume_override if hasattr(self, "annual_volume_override") else None)!r}, '
                f'annual_volume_threshold={(self.annual_volume_threshold if hasattr(self, "annual_volume_threshold") else None)!r}, '
                f'life_time_volume={(self.life_time_volume if hasattr(self, "life_time_volume") else None)!r}, '
                f'life_time_volume_accumulated={(self.life_time_volume_accumulated if hasattr(self, "life_time_volume_accumulated") else None)!r}, '
                f'life_time_volume_balance={(self.life_time_volume_balance if hasattr(self, "life_time_volume_balance") else None)!r}, '
                f'life_time_volume_override={(self.life_time_volume_override if hasattr(self, "life_time_volume_override") else None)!r}, '
                f'life_time_volume_threshold={(self.life_time_volume_threshold if hasattr(self, "life_time_volume_threshold") else None)!r}, '
                f'daily_transaction_count={(self.daily_transaction_count if hasattr(self, "daily_transaction_count") else None)!r}, '
                f'daily_transaction_accumulated={(self.daily_transaction_accumulated if hasattr(self, "daily_transaction_accumulated") else None)!r}, '
                f'daily_transaction_balance={(self.daily_transaction_balance if hasattr(self, "daily_transaction_balance") else None)!r}, '
                f'daily_transaction_override={(self.daily_transaction_override if hasattr(self, "daily_transaction_override") else None)!r}, '
                f'daily_transaction_threshold={(self.daily_transaction_threshold if hasattr(self, "daily_transaction_threshold") else None)!r}, '
                f'weekly_transaction_count={(self.weekly_transaction_count if hasattr(self, "weekly_transaction_count") else None)!r}, '
                f'weekly_transaction_accumulated={(self.weekly_transaction_accumulated if hasattr(self, "weekly_transaction_accumulated") else None)!r}, '
                f'weekly_transaction_balance={(self.weekly_transaction_balance if hasattr(self, "weekly_transaction_balance") else None)!r}, '
                f'weekly_transaction_override={(self.weekly_transaction_override if hasattr(self, "weekly_transaction_override") else None)!r}, '
                f'weekly_transaction_threshold={(self.weekly_transaction_threshold if hasattr(self, "weekly_transaction_threshold") else None)!r}, '
                f'monthly_transaction_count={(self.monthly_transaction_count if hasattr(self, "monthly_transaction_count") else None)!r}, '
                f'monthly_transaction_accumulated={(self.monthly_transaction_accumulated if hasattr(self, "monthly_transaction_accumulated") else None)!r}, '
                f'monthly_transaction_balance={(self.monthly_transaction_balance if hasattr(self, "monthly_transaction_balance") else None)!r}, '
                f'monthly_transaction_override={(self.monthly_transaction_override if hasattr(self, "monthly_transaction_override") else None)!r}, '
                f'monthly_transaction_threshold={(self.monthly_transaction_threshold if hasattr(self, "monthly_transaction_threshold") else None)!r}, '
                f'annual_transaction_count={(self.annual_transaction_count if hasattr(self, "annual_transaction_count") else None)!r}, '
                f'annual_transaction_accumulated={(self.annual_transaction_accumulated if hasattr(self, "annual_transaction_accumulated") else None)!r}, '
                f'annual_transaction_balance={(self.annual_transaction_balance if hasattr(self, "annual_transaction_balance") else None)!r}, '
                f'annual_transaction_override={(self.annual_transaction_override if hasattr(self, "annual_transaction_override") else None)!r}, '
                f'annual_transaction_threshold={(self.annual_transaction_threshold if hasattr(self, "annual_transaction_threshold") else None)!r}, '
                f'life_time_transaction_count={(self.life_time_transaction_count if hasattr(self, "life_time_transaction_count") else None)!r}, '
                f'life_time_transaction_accumulated={(self.life_time_transaction_accumulated if hasattr(self, "life_time_transaction_accumulated") else None)!r}, '
                f'life_time_transaction_balance={(self.life_time_transaction_balance if hasattr(self, "life_time_transaction_balance") else None)!r}, '
                f'life_time_transaction_override={(self.life_time_transaction_override if hasattr(self, "life_time_transaction_override") else None)!r}, '
                f'life_time_transaction_threshold={(self.life_time_transaction_threshold if hasattr(self, "life_time_transaction_threshold") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'level={(self.level if hasattr(self, "level") else None)!s}, '
                f'daily_spend={(self.daily_spend if hasattr(self, "daily_spend") else None)!s}, '
                f'daily_spend_accumulated={(self.daily_spend_accumulated if hasattr(self, "daily_spend_accumulated") else None)!s}, '
                f'daily_spend_balance={(self.daily_spend_balance if hasattr(self, "daily_spend_balance") else None)!s}, '
                f'daily_spend_override={(self.daily_spend_override if hasattr(self, "daily_spend_override") else None)!s}, '
                f'daily_spend_threshold={(self.daily_spend_threshold if hasattr(self, "daily_spend_threshold") else None)!s}, '
                f'weekly_spend={(self.weekly_spend if hasattr(self, "weekly_spend") else None)!s}, '
                f'weekly_spend_accumulated={(self.weekly_spend_accumulated if hasattr(self, "weekly_spend_accumulated") else None)!s}, '
                f'weekly_spend_balance={(self.weekly_spend_balance if hasattr(self, "weekly_spend_balance") else None)!s}, '
                f'weekly_spend_override={(self.weekly_spend_override if hasattr(self, "weekly_spend_override") else None)!s}, '
                f'weekly_spend_threshold={(self.weekly_spend_threshold if hasattr(self, "weekly_spend_threshold") else None)!s}, '
                f'monthly_spend={(self.monthly_spend if hasattr(self, "monthly_spend") else None)!s}, '
                f'monthly_spend_accumulated={(self.monthly_spend_accumulated if hasattr(self, "monthly_spend_accumulated") else None)!s}, '
                f'monthly_spend_balance={(self.monthly_spend_balance if hasattr(self, "monthly_spend_balance") else None)!s}, '
                f'monthly_spend_override={(self.monthly_spend_override if hasattr(self, "monthly_spend_override") else None)!s}, '
                f'per_transaction_spend={(self.per_transaction_spend if hasattr(self, "per_transaction_spend") else None)!s}, '
                f'per_transaction_spend_override={(self.per_transaction_spend_override if hasattr(self, "per_transaction_spend_override") else None)!s}, '
                f'annual_spend={(self.annual_spend if hasattr(self, "annual_spend") else None)!s}, '
                f'annual_spend_accumulated={(self.annual_spend_accumulated if hasattr(self, "annual_spend_accumulated") else None)!s}, '
                f'annual_spend_balance={(self.annual_spend_balance if hasattr(self, "annual_spend_balance") else None)!s}, '
                f'annual_spend_override={(self.annual_spend_override if hasattr(self, "annual_spend_override") else None)!s}, '
                f'annual_spend_threshold={(self.annual_spend_threshold if hasattr(self, "annual_spend_threshold") else None)!s}, '
                f'life_time_spend={(self.life_time_spend if hasattr(self, "life_time_spend") else None)!s}, '
                f'life_time_spend_accumulated={(self.life_time_spend_accumulated if hasattr(self, "life_time_spend_accumulated") else None)!s}, '
                f'life_time_spend_balance={(self.life_time_spend_balance if hasattr(self, "life_time_spend_balance") else None)!s}, '
                f'life_time_spend_override={(self.life_time_spend_override if hasattr(self, "life_time_spend_override") else None)!s}, '
                f'life_time_spend_threshold={(self.life_time_spend_threshold if hasattr(self, "life_time_spend_threshold") else None)!s}, '
                f'daily_volume={(self.daily_volume if hasattr(self, "daily_volume") else None)!s}, '
                f'daily_volume_accumulated={(self.daily_volume_accumulated if hasattr(self, "daily_volume_accumulated") else None)!s}, '
                f'daily_volume_balance={(self.daily_volume_balance if hasattr(self, "daily_volume_balance") else None)!s}, '
                f'daily_volume_override={(self.daily_volume_override if hasattr(self, "daily_volume_override") else None)!s}, '
                f'daily_volume_threshold={(self.daily_volume_threshold if hasattr(self, "daily_volume_threshold") else None)!s}, '
                f'weekly_volume={(self.weekly_volume if hasattr(self, "weekly_volume") else None)!s}, '
                f'weekly_volume_accumulated={(self.weekly_volume_accumulated if hasattr(self, "weekly_volume_accumulated") else None)!s}, '
                f'weekly_volume_balance={(self.weekly_volume_balance if hasattr(self, "weekly_volume_balance") else None)!s}, '
                f'weekly_volume_override={(self.weekly_volume_override if hasattr(self, "weekly_volume_override") else None)!s}, '
                f'weekly_volume_threshold={(self.weekly_volume_threshold if hasattr(self, "weekly_volume_threshold") else None)!s}, '
                f'monthly_volume={(self.monthly_volume if hasattr(self, "monthly_volume") else None)!s}, '
                f'monthly_volume_accumulated={(self.monthly_volume_accumulated if hasattr(self, "monthly_volume_accumulated") else None)!s}, '
                f'monthly_volume_balance={(self.monthly_volume_balance if hasattr(self, "monthly_volume_balance") else None)!s}, '
                f'monthly_volume_override={(self.monthly_volume_override if hasattr(self, "monthly_volume_override") else None)!s}, '
                f'monthly_volume_threshold={(self.monthly_volume_threshold if hasattr(self, "monthly_volume_threshold") else None)!s}, '
                f'per_transaction_volume={(self.per_transaction_volume if hasattr(self, "per_transaction_volume") else None)!s}, '
                f'per_transaction_volume_override={(self.per_transaction_volume_override if hasattr(self, "per_transaction_volume_override") else None)!s}, '
                f'annual_volume={(self.annual_volume if hasattr(self, "annual_volume") else None)!s}, '
                f'annual_volume_accumulated={(self.annual_volume_accumulated if hasattr(self, "annual_volume_accumulated") else None)!s}, '
                f'annual_volume_balance={(self.annual_volume_balance if hasattr(self, "annual_volume_balance") else None)!s}, '
                f'annual_volume_override={(self.annual_volume_override if hasattr(self, "annual_volume_override") else None)!s}, '
                f'annual_volume_threshold={(self.annual_volume_threshold if hasattr(self, "annual_volume_threshold") else None)!s}, '
                f'life_time_volume={(self.life_time_volume if hasattr(self, "life_time_volume") else None)!s}, '
                f'life_time_volume_accumulated={(self.life_time_volume_accumulated if hasattr(self, "life_time_volume_accumulated") else None)!s}, '
                f'life_time_volume_balance={(self.life_time_volume_balance if hasattr(self, "life_time_volume_balance") else None)!s}, '
                f'life_time_volume_override={(self.life_time_volume_override if hasattr(self, "life_time_volume_override") else None)!s}, '
                f'life_time_volume_threshold={(self.life_time_volume_threshold if hasattr(self, "life_time_volume_threshold") else None)!s}, '
                f'daily_transaction_count={(self.daily_transaction_count if hasattr(self, "daily_transaction_count") else None)!s}, '
                f'daily_transaction_accumulated={(self.daily_transaction_accumulated if hasattr(self, "daily_transaction_accumulated") else None)!s}, '
                f'daily_transaction_balance={(self.daily_transaction_balance if hasattr(self, "daily_transaction_balance") else None)!s}, '
                f'daily_transaction_override={(self.daily_transaction_override if hasattr(self, "daily_transaction_override") else None)!s}, '
                f'daily_transaction_threshold={(self.daily_transaction_threshold if hasattr(self, "daily_transaction_threshold") else None)!s}, '
                f'weekly_transaction_count={(self.weekly_transaction_count if hasattr(self, "weekly_transaction_count") else None)!s}, '
                f'weekly_transaction_accumulated={(self.weekly_transaction_accumulated if hasattr(self, "weekly_transaction_accumulated") else None)!s}, '
                f'weekly_transaction_balance={(self.weekly_transaction_balance if hasattr(self, "weekly_transaction_balance") else None)!s}, '
                f'weekly_transaction_override={(self.weekly_transaction_override if hasattr(self, "weekly_transaction_override") else None)!s}, '
                f'weekly_transaction_threshold={(self.weekly_transaction_threshold if hasattr(self, "weekly_transaction_threshold") else None)!s}, '
                f'monthly_transaction_count={(self.monthly_transaction_count if hasattr(self, "monthly_transaction_count") else None)!s}, '
                f'monthly_transaction_accumulated={(self.monthly_transaction_accumulated if hasattr(self, "monthly_transaction_accumulated") else None)!s}, '
                f'monthly_transaction_balance={(self.monthly_transaction_balance if hasattr(self, "monthly_transaction_balance") else None)!s}, '
                f'monthly_transaction_override={(self.monthly_transaction_override if hasattr(self, "monthly_transaction_override") else None)!s}, '
                f'monthly_transaction_threshold={(self.monthly_transaction_threshold if hasattr(self, "monthly_transaction_threshold") else None)!s}, '
                f'annual_transaction_count={(self.annual_transaction_count if hasattr(self, "annual_transaction_count") else None)!s}, '
                f'annual_transaction_accumulated={(self.annual_transaction_accumulated if hasattr(self, "annual_transaction_accumulated") else None)!s}, '
                f'annual_transaction_balance={(self.annual_transaction_balance if hasattr(self, "annual_transaction_balance") else None)!s}, '
                f'annual_transaction_override={(self.annual_transaction_override if hasattr(self, "annual_transaction_override") else None)!s}, '
                f'annual_transaction_threshold={(self.annual_transaction_threshold if hasattr(self, "annual_transaction_threshold") else None)!s}, '
                f'life_time_transaction_count={(self.life_time_transaction_count if hasattr(self, "life_time_transaction_count") else None)!s}, '
                f'life_time_transaction_accumulated={(self.life_time_transaction_accumulated if hasattr(self, "life_time_transaction_accumulated") else None)!s}, '
                f'life_time_transaction_balance={(self.life_time_transaction_balance if hasattr(self, "life_time_transaction_balance") else None)!s}, '
                f'life_time_transaction_override={(self.life_time_transaction_override if hasattr(self, "life_time_transaction_override") else None)!s}, '
                f'life_time_transaction_threshold={(self.life_time_transaction_threshold if hasattr(self, "life_time_transaction_threshold") else None)!s})')
