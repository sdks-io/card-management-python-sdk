# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class AccountVelocityLimit(object):

    """Implementation of the 'AccountVelocityLimit' model.

    TODO: type model description here.

    Attributes:
        mtype (str): Type of velocity (COUNT type is not present for limits of
            PERTRX period  Possible Values: VALUE, VOLUME, COUNT
        period (str): Duration of the velocity or threshold alert.  Possible
            Values: DAILY, WEEKLY, MONTHLY, ANNUAL, LIFETIME, PERTRX
        limit (float): The limit associated with this velocity with the
            correct number of digits after the decimal point according to the
            minor denomination of the currency of the card issuer (except for
            COUNT type velocity).
        accumulation (float): The transaction accumulation during the current
            period with the correct number of digits after the decimal point
            according to the minor denomination of the currency of the card
            issuer (except for COUNT type velocity). Not present for PERTRX
            period.
        balance (float): The remaining/available balance at this point in time
            with the correct number of digits after the decimal point
            according to the minor denomination of the currency of the card
            issuer (except for COUNT type velocity). Not present for PERTRX
            period.
        override (bool): Indicate if the limit is overridden or default.
            (false for default).
        product_group (str): The reference group name for product
            differentiated velocities. This field cannot be used with Volume
            type velocity.  Example: RoadSvc  This is an optional output
            field.
        threshold (float): The limit to trigger an alert if the balance after
            a transaction reaches it or below. 0 indicates no alerts will be
            sent. Not present if not set (issuer value threshold limit applies
            if available). Not present for COUNT type velocity.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'Type',
        "period": 'Period',
        "limit": 'Limit',
        "accumulation": 'Accumulation',
        "balance": 'Balance',
        "override": 'Override',
        "product_group": 'ProductGroup',
        "threshold": 'Threshold'
    }

    _optionals = [
        'mtype',
        'period',
        'limit',
        'accumulation',
        'balance',
        'override',
        'product_group',
        'threshold',
    ]

    _nullables = [
        'mtype',
        'period',
        'limit',
        'accumulation',
        'balance',
        'override',
        'product_group',
        'threshold',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 period=APIHelper.SKIP,
                 limit=APIHelper.SKIP,
                 accumulation=APIHelper.SKIP,
                 balance=APIHelper.SKIP,
                 override=APIHelper.SKIP,
                 product_group=APIHelper.SKIP,
                 threshold=APIHelper.SKIP):
        """Constructor for the AccountVelocityLimit class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if period is not APIHelper.SKIP:
            self.period = period 
        if limit is not APIHelper.SKIP:
            self.limit = limit 
        if accumulation is not APIHelper.SKIP:
            self.accumulation = accumulation 
        if balance is not APIHelper.SKIP:
            self.balance = balance 
        if override is not APIHelper.SKIP:
            self.override = override 
        if product_group is not APIHelper.SKIP:
            self.product_group = product_group 
        if threshold is not APIHelper.SKIP:
            self.threshold = threshold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("Type") if "Type" in dictionary.keys() else APIHelper.SKIP
        period = dictionary.get("Period") if "Period" in dictionary.keys() else APIHelper.SKIP
        limit = dictionary.get("Limit") if "Limit" in dictionary.keys() else APIHelper.SKIP
        accumulation = dictionary.get("Accumulation") if "Accumulation" in dictionary.keys() else APIHelper.SKIP
        balance = dictionary.get("Balance") if "Balance" in dictionary.keys() else APIHelper.SKIP
        override = dictionary.get("Override") if "Override" in dictionary.keys() else APIHelper.SKIP
        product_group = dictionary.get("ProductGroup") if "ProductGroup" in dictionary.keys() else APIHelper.SKIP
        threshold = dictionary.get("Threshold") if "Threshold" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   period,
                   limit,
                   accumulation,
                   balance,
                   override,
                   product_group,
                   threshold)
