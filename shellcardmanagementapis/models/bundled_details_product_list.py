# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class BundledDetailsProductList(object):

    """Implementation of the 'BundledDetailsProductList' model.

    TODO: type model description here.

    Attributes:
        purchase_category_id (int): Purchase category Id  Example: 123, 124,
            etc.,
        purchase_category_code (str): Purchase category name.  Example:   0 -
            All Fuels (without VP) and Lubricants  1 - FuelSave only  2 -
            FuelSave and Lubricants  3 - No Restrictions
        products (List[str]): An array of 3-digit global product codes. 
            Example: [ "033", "021", "023" ]
        product_groups (List[str]): An array of product group ids.  Example: [
            "670246404", "40557126" ]
        fuel_set_id (str): Fuel set id that is allowed to be purchased with
            the card
        fuel_set_name (str): Fuel set name that is allowed to be purchased
            with the card
        non_fuel_sets (str): Non-Fuel set name that is allowed to be purchased
            with the card

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "purchase_category_id": 'PurchaseCategoryId',
        "purchase_category_code": 'PurchaseCategoryCode',
        "products": 'Products',
        "product_groups": 'ProductGroups',
        "fuel_set_id": 'FuelSetId',
        "fuel_set_name": 'FuelSetName',
        "non_fuel_sets": 'NonFuelSets'
    }

    _optionals = [
        'purchase_category_id',
        'purchase_category_code',
        'products',
        'product_groups',
        'fuel_set_id',
        'fuel_set_name',
        'non_fuel_sets',
    ]

    def __init__(self,
                 purchase_category_id=APIHelper.SKIP,
                 purchase_category_code=APIHelper.SKIP,
                 products=APIHelper.SKIP,
                 product_groups=APIHelper.SKIP,
                 fuel_set_id=APIHelper.SKIP,
                 fuel_set_name=APIHelper.SKIP,
                 non_fuel_sets=APIHelper.SKIP):
        """Constructor for the BundledDetailsProductList class"""

        # Initialize members of the class
        if purchase_category_id is not APIHelper.SKIP:
            self.purchase_category_id = purchase_category_id 
        if purchase_category_code is not APIHelper.SKIP:
            self.purchase_category_code = purchase_category_code 
        if products is not APIHelper.SKIP:
            self.products = products 
        if product_groups is not APIHelper.SKIP:
            self.product_groups = product_groups 
        if fuel_set_id is not APIHelper.SKIP:
            self.fuel_set_id = fuel_set_id 
        if fuel_set_name is not APIHelper.SKIP:
            self.fuel_set_name = fuel_set_name 
        if non_fuel_sets is not APIHelper.SKIP:
            self.non_fuel_sets = non_fuel_sets 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        purchase_category_id = dictionary.get("PurchaseCategoryId") if dictionary.get("PurchaseCategoryId") else APIHelper.SKIP
        purchase_category_code = dictionary.get("PurchaseCategoryCode") if dictionary.get("PurchaseCategoryCode") else APIHelper.SKIP
        products = dictionary.get("Products") if dictionary.get("Products") else APIHelper.SKIP
        product_groups = dictionary.get("ProductGroups") if dictionary.get("ProductGroups") else APIHelper.SKIP
        fuel_set_id = dictionary.get("FuelSetId") if dictionary.get("FuelSetId") else APIHelper.SKIP
        fuel_set_name = dictionary.get("FuelSetName") if dictionary.get("FuelSetName") else APIHelper.SKIP
        non_fuel_sets = dictionary.get("NonFuelSets") if dictionary.get("NonFuelSets") else APIHelper.SKIP
        # Return an object of this model
        return cls(purchase_category_id,
                   purchase_category_code,
                   products,
                   product_groups,
                   fuel_set_id,
                   fuel_set_name,
                   non_fuel_sets)
