# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.error_status import ErrorStatus


class AccountRestrictionResponse(object):

    """Implementation of the 'AccountRestrictionResponse' model.

    TODO: type model description here.

    Attributes:
        request_id (str): Request Id of the API call
        account_id (int): Account Id on which restriction is applied. Example:
            123456
        account_number (str): Account Number on which restriction is applied.
            Example: GB000000123
        usage_restriction_status (str): Status of the card usage restriction
            submitted to Gateway. Based on the response from Gateway value
            will be set as either “Success” or “Failed”.
        usage_restriction_description (str): Response for the usage
            restriction in case of an error. This field will have a value only
            when “UsageRestrictionStatus” is “Failed”.
        error (ErrorStatus): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "usage_restriction_status": 'UsageRestrictionStatus',
        "usage_restriction_description": 'UsageRestrictionDescription',
        "error": 'Error'
    }

    _optionals = [
        'request_id',
        'account_id',
        'account_number',
        'usage_restriction_status',
        'usage_restriction_description',
        'error',
    ]

    _nullables = [
        'request_id',
    ]

    def __init__(self,
                 request_id=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 usage_restriction_status=APIHelper.SKIP,
                 usage_restriction_description=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the AccountRestrictionResponse class"""

        # Initialize members of the class
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if usage_restriction_status is not APIHelper.SKIP:
            self.usage_restriction_status = usage_restriction_status 
        if usage_restriction_description is not APIHelper.SKIP:
            self.usage_restriction_description = usage_restriction_description 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if "RequestId" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else APIHelper.SKIP
        usage_restriction_status = dictionary.get("UsageRestrictionStatus") if dictionary.get("UsageRestrictionStatus") else APIHelper.SKIP
        usage_restriction_description = dictionary.get("UsageRestrictionDescription") if dictionary.get("UsageRestrictionDescription") else APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   account_id,
                   account_number,
                   usage_restriction_status,
                   usage_restriction_description,
                   error)
