# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.card_contact import CardContact
from shellcardmanagementapis.models.pin_contact import PINContact


class CardDetail(object):

    """Implementation of the 'CardDetail' model.

    Request entity object for CardDetail

    Attributes:
        payer_id (int): Payer Id  of the selected payer.<br /> Optional if
            PayerNumber is passed else Mandatory
        payer_number (str): Payer Number of the selected payer.<br /> Optional
            if PayerId is passed else Mandatory
        account_id (int): Account ID of the customer.<br /> Optional if
            AccountNumber is passed, else mandatory.<br /> This input is a
            search criterion, if given.
        account_number (str): Account Number of the customer.<br /> Optional
            if AccountId is passed, else mandatory.<br /> This input is a
            search criterion, if given.
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.<br /> Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.
        col_co_id (int): Collecting Company Id of the selected payer.<br />
            Optional If ColCo Code is passed else Mandatory
        card_type_id (int): Card Type ID<br /> Mandatory
        token_type_id (int): Token Type Id – Linked to the selected card
            type<br /> Optional<br /> Default – Assign the default token type
            associated with the card type of the card being created.<br /> The
            default value will be set by the background process and an error
            (code 12009) will be thrown by the background process when default
            value is not identified or invalid token type id is passed in the
            request.
        emboss_text (str): Text to be printed on the card as Account Name.<br
            /> Optional – When not provided default emboss text associated
            with the card type will be embossed.<br /> Max length: 27<br />
            The value should be validated against a configured list of allowed
            characters.<br /> [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
        vrn (str): Vehicle registration number.<br/>  Optional when DriverName
            is passed else mandatory.<br/>  Mandatory when ColCo setting is
            marked as ‘VRN mandatory’.<br />  Max length: 24<br />  The value
            will be validated against a configured list of allowed
            characters.<br />  Default value for the configuration is:
            [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] .   </br>Note: If Driver Name is null
            or empty, max allowed characters for VRN is 16.  When Driver Name
            is provided, max allowed characters for VRN is 24.
        driver_name (str): Driver Name.<br /> Optional when VRN is passed else
            mandatory.<br /> Max length: 27<br /> The value will be validated
            against a configured list of allowed characters.<br /> Default
            value for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]<br />
        odometer_input_required (bool): Odometer Input to be enabled on the
            card<br /> Optional.<br /> Default is False
        fleet_id_input_required (bool): FleetId Input to be enabled on the
            card<br /> Optional.<br /> Default is False<br /> Note: If
            AllowFleetIdInput settings of the account is disabled and this
            flag is marked        true in the request, then request will be
            processed with VRN input required        enabled instead of Fleet
            Id input required
        purchase_category_id (int): Purchase category Id<br /> Mandatory
        self_selected_encrypted_pin (str): The encrypted value of
            self-selected PIN.<br /> Optional – When not provided, the PIN
            will be auto generated(if the card token type supports PIN) and
            delivered based on the given PIN delivery option.<br /> Max
            Length: 256
        self_selected_pin_key_id (str): KeyId of the PIN encrypted value.<br
            /> Mandatory, if opted for self-selected PIN else optional.<br />
            Max Length: 30
        self_selected_pin_session_key (str): Encoded message of the TCS form
            which is used for encrypting the PIN of this card.<br /> The
            encode message forms are provided to clients by another API
            (“TCS”).<br /> Instructions to encrypt the PIN is covered in the
            related API specifications document.<br /> Mandatory –If opted for
            self-selected PIN else optional. Max Length: 1024
        card_group_id (int): Card group ID<br /> Optional
        card_group_name (str): Card group name<br /> This field is mandatory
            when IsNewCardGroup parameter is set to true.<br /> Maximum field
            length: 40<br /> The value will be validated against a configured
            list of allowed characters.<br /> Default value for the
            configuration is: [0-9A-Z.]
        is_new_card_group (bool): This need to be set to true if the card
            group needs to be created prior to processing the card order and
            the card needs to be assigned to the newly created card group.<br
            /> Optional<br /> Default - False
        emboss_card_group (bool): This should be set to true if the card group
            name needs to be printed on the newly created card under a new
            card group.<br />  Optional<br />  Default – False<br />  Note:
            This value will be considered only if a new CardGroup is created
            for the Card.(i.e.when IsNewCardGroup is true)         If the Card
            is added to an existing CardGroup,         the property
            ‘PrintOnCard’ set for the CardGroup will determine whether the
            CardGroupName should be embossed on the Card.
        card_delivery_type (int): Card delivery type.<br /> Mandatory <br />
            Allowed Value: <br /> 1.    Customer Address(Default) <br /> 2.   
            New Delivery Address
        card_contact (CardContact): TODO: type description here.
        pin_delivery_address_type (int): PIN delivery address type
            selection.<br /> Optional<br /> Allowed Values:<br /> 1.   
            Customer Address(Default)<br /> 2.    Card Address<br /> 3.    New
            Delivery Address
        pin_advice_type (int): PIN delivery method.<br /> Mandatory<br />
            Allowed Values:<br /> 1.    Paper<br /> 2.    Email<br /> 3.   
            SMS<br /> 4.    None <br /> **Note:** Paper delivery not
            applicable for selfselctedPIN type
        pin_contact (PINContact): TODO: type description here.
        notify_caller (bool): True/False.<br /> Optional.<br /> Default:
            False<br /> If true, the caller would be notified back with the
            status as success or failure after the card order is processed.
            This webhook feature has to be subscribed by the customer prior to
            use , please refer the API documentation for the more details.
        caller (str): The caller to be notified with the status of the card
            order.<br /> Mandatory, if NotifyCaller is true.<br /> Maximum
            field length: 20<br /> Allowed values:<br /> •    “NextGenUI”:
            This value to be used by next gen UI application.<br /> •   
            “FleetHubUILifeTime”: This value to be used by Fleet Hub UI
            application for life time restriction cards.<br /> Note: The
            values passed in this field are case insensitive
        notify_caller_on_sync (bool): True/False.<br /> Optional.<br />
            Default: False<br /> If true, the caller would be notified back
            with the status as success or failed after the processed card is
            synced with Gateway.
        validate_fleet_id (bool): True/False.<br /> Optional.<br /> Default:
            False<br /> For cards ordered with Validate Fleet Id parameter set
            to true, CFGW will be notified to enable this validation for the
            card.<br /> Note: When “FleetIdInputRequired” is not set on the
            card, validate fleet id will be considered false regardless of the
            value passed on this parameter.
        fleet_option (str): Type of action will be performed for the card when
            the fleet Id is validated.<br /> Optional.<br /> Default:
            NO_VALIDATION<br /> Allowed values:<br /> •    ALERT<br /> •   
            DECLINE<br /> •    DECLINE_ALERT<br /> •    NO_VALIDATION<br />
            Note: When FleetIdOption is not provided and validatefleetid is
            true then by default allowed value is NO_VALIDATION.
        bundle_id (str): Gateway Bundle Id to which the ordered card will be
            added.<br /> Optional.<br /> When a valid bundle Id is passed,
            upon successful processing of Card Order, the card will be added
            to the provided bundle in Gateway. If card bundle has crossed the
            limit of 500 cards or if the card bundle is not available in the
            gateway then the background services will fail to added the card
            to the bundle.
        usage_restriction_action (str): The value indicates what actions is to
            be performed with respect to usage restrictions on the card being
            ordered.<br /> UsageRestrictionAction is mandatory when bundle Id
            is passed. Else ignored.<br /> Allowed values: –<br /> • Update<br
            /> • Default<br /> • None
        product_restriction_action (str): The value indicates what actions is
            to be performed with respect to product restrictions on the card
            being ordered.<br /> ProductRestrictionAction is mandatory when
            bundle Id is passed. Else ignored.<br /> Allowed values: -<br /> •
            Update<br /> • Default<br /> • None<br /> Note: This field is
            applicable when product restrictions
        products (List[str]): An array of 3-digit global product codes.<br />
            Optional.<br /> Default restrictions will be applied both products
            and product groups are null or empty.<br /> Note: This field is
            applicable when product restrictions are migrated to CFGW else, it
            will be ignored.
        product_groups (List[str]): An array of product group ids.<br />
            Optional.<br /> Default restrictions will be applied both products
            and product groups are null or empty.<br /> Note: This field is
            applicable when product restrictions are migrated to CFGW else, it
            will be ignored
        expiry_date (str): Expiry Date for newly created card to be update in
            cards plot form.<br />  Optional.<br />  Format: MMyy<br />  If
            not apply default Expiry Date.<br />  Note: There is a limit to
            the ExpiryDate which the user can choose for the Card.         The
            expiry date which can be set for a card depends on the Card Type
            and the associated business rules for the OU.         If the user
            chooses a later ExpiryDate than the allowed value for the CardType
            for the OU,    Default Assigned Expiry Date will be applied on the
            card.
        client_reference_id (str): This is the Client Reference Id of card in
            the order which needs to be passed by the client.This will be
            playback in the ordercard enquiry<br /> Optional
        auto_renew (CardDetailAutoRenewEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_delivery_type": 'CardDeliveryType',
        "pin_advice_type": 'PINAdviceType',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "card_type_id": 'CardTypeId',
        "token_type_id": 'TokenTypeId',
        "emboss_text": 'EmbossText',
        "vrn": 'VRN',
        "driver_name": 'DriverName',
        "odometer_input_required": 'OdometerInputRequired',
        "fleet_id_input_required": 'FleetIdInputRequired',
        "purchase_category_id": 'PurchaseCategoryId',
        "self_selected_encrypted_pin": 'SelfSelectedEncryptedPIN',
        "self_selected_pin_key_id": 'SelfSelectedPINKeyID',
        "self_selected_pin_session_key": 'SelfSelectedPINSessionKey',
        "card_group_id": 'CardGroupId',
        "card_group_name": 'CardGroupName',
        "is_new_card_group": 'IsNewCardGroup',
        "emboss_card_group": 'EmbossCardGroup',
        "card_contact": 'CardContact',
        "pin_delivery_address_type": 'PINDeliveryAddressType',
        "pin_contact": 'PINContact',
        "notify_caller": 'NotifyCaller',
        "caller": 'Caller',
        "notify_caller_on_sync": 'NotifyCallerOnSync',
        "validate_fleet_id": 'ValidateFleetId',
        "fleet_option": 'FleetOption',
        "bundle_id": 'BundleId',
        "usage_restriction_action": 'UsageRestrictionAction',
        "product_restriction_action": 'ProductRestrictionAction',
        "products": 'Products',
        "product_groups": 'ProductGroups',
        "expiry_date": 'ExpiryDate',
        "client_reference_id": 'ClientReferenceId',
        "auto_renew": 'AutoRenew'
    }

    _optionals = [
        'payer_id',
        'payer_number',
        'account_id',
        'account_number',
        'col_co_code',
        'col_co_id',
        'card_type_id',
        'token_type_id',
        'emboss_text',
        'vrn',
        'driver_name',
        'odometer_input_required',
        'fleet_id_input_required',
        'purchase_category_id',
        'self_selected_encrypted_pin',
        'self_selected_pin_key_id',
        'self_selected_pin_session_key',
        'card_group_id',
        'card_group_name',
        'is_new_card_group',
        'emboss_card_group',
        'card_contact',
        'pin_delivery_address_type',
        'pin_contact',
        'notify_caller',
        'caller',
        'notify_caller_on_sync',
        'validate_fleet_id',
        'fleet_option',
        'bundle_id',
        'usage_restriction_action',
        'product_restriction_action',
        'products',
        'product_groups',
        'expiry_date',
        'client_reference_id',
        'auto_renew',
    ]

    _nullables = [
        'payer_id',
        'payer_number',
        'account_id',
        'account_number',
        'col_co_code',
        'col_co_id',
        'card_type_id',
        'token_type_id',
        'emboss_text',
        'vrn',
        'driver_name',
        'purchase_category_id',
        'self_selected_pin_key_id',
        'self_selected_pin_session_key',
        'card_group_id',
        'card_group_name',
        'card_delivery_type',
        'pin_delivery_address_type',
        'pin_advice_type',
        'caller',
        'fleet_option',
        'bundle_id',
        'usage_restriction_action',
        'product_restriction_action',
        'expiry_date',
        'client_reference_id',
    ]

    def __init__(self,
                 card_delivery_type=None,
                 pin_advice_type=None,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 card_type_id=APIHelper.SKIP,
                 token_type_id=APIHelper.SKIP,
                 emboss_text=APIHelper.SKIP,
                 vrn=APIHelper.SKIP,
                 driver_name=APIHelper.SKIP,
                 odometer_input_required=APIHelper.SKIP,
                 fleet_id_input_required=APIHelper.SKIP,
                 purchase_category_id=APIHelper.SKIP,
                 self_selected_encrypted_pin=APIHelper.SKIP,
                 self_selected_pin_key_id=APIHelper.SKIP,
                 self_selected_pin_session_key=APIHelper.SKIP,
                 card_group_id=APIHelper.SKIP,
                 card_group_name=APIHelper.SKIP,
                 is_new_card_group=APIHelper.SKIP,
                 emboss_card_group=APIHelper.SKIP,
                 card_contact=APIHelper.SKIP,
                 pin_delivery_address_type=APIHelper.SKIP,
                 pin_contact=APIHelper.SKIP,
                 notify_caller=APIHelper.SKIP,
                 caller=APIHelper.SKIP,
                 notify_caller_on_sync=APIHelper.SKIP,
                 validate_fleet_id=APIHelper.SKIP,
                 fleet_option=APIHelper.SKIP,
                 bundle_id=APIHelper.SKIP,
                 usage_restriction_action=APIHelper.SKIP,
                 product_restriction_action=APIHelper.SKIP,
                 products=APIHelper.SKIP,
                 product_groups=APIHelper.SKIP,
                 expiry_date=APIHelper.SKIP,
                 client_reference_id=APIHelper.SKIP,
                 auto_renew=APIHelper.SKIP):
        """Constructor for the CardDetail class"""

        # Initialize members of the class
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if card_type_id is not APIHelper.SKIP:
            self.card_type_id = card_type_id 
        if token_type_id is not APIHelper.SKIP:
            self.token_type_id = token_type_id 
        if emboss_text is not APIHelper.SKIP:
            self.emboss_text = emboss_text 
        if vrn is not APIHelper.SKIP:
            self.vrn = vrn 
        if driver_name is not APIHelper.SKIP:
            self.driver_name = driver_name 
        if odometer_input_required is not APIHelper.SKIP:
            self.odometer_input_required = odometer_input_required 
        if fleet_id_input_required is not APIHelper.SKIP:
            self.fleet_id_input_required = fleet_id_input_required 
        if purchase_category_id is not APIHelper.SKIP:
            self.purchase_category_id = purchase_category_id 
        if self_selected_encrypted_pin is not APIHelper.SKIP:
            self.self_selected_encrypted_pin = self_selected_encrypted_pin 
        if self_selected_pin_key_id is not APIHelper.SKIP:
            self.self_selected_pin_key_id = self_selected_pin_key_id 
        if self_selected_pin_session_key is not APIHelper.SKIP:
            self.self_selected_pin_session_key = self_selected_pin_session_key 
        if card_group_id is not APIHelper.SKIP:
            self.card_group_id = card_group_id 
        if card_group_name is not APIHelper.SKIP:
            self.card_group_name = card_group_name 
        if is_new_card_group is not APIHelper.SKIP:
            self.is_new_card_group = is_new_card_group 
        if emboss_card_group is not APIHelper.SKIP:
            self.emboss_card_group = emboss_card_group 
        self.card_delivery_type = card_delivery_type 
        if card_contact is not APIHelper.SKIP:
            self.card_contact = card_contact 
        if pin_delivery_address_type is not APIHelper.SKIP:
            self.pin_delivery_address_type = pin_delivery_address_type 
        self.pin_advice_type = pin_advice_type 
        if pin_contact is not APIHelper.SKIP:
            self.pin_contact = pin_contact 
        if notify_caller is not APIHelper.SKIP:
            self.notify_caller = notify_caller 
        if caller is not APIHelper.SKIP:
            self.caller = caller 
        if notify_caller_on_sync is not APIHelper.SKIP:
            self.notify_caller_on_sync = notify_caller_on_sync 
        if validate_fleet_id is not APIHelper.SKIP:
            self.validate_fleet_id = validate_fleet_id 
        if fleet_option is not APIHelper.SKIP:
            self.fleet_option = fleet_option 
        if bundle_id is not APIHelper.SKIP:
            self.bundle_id = bundle_id 
        if usage_restriction_action is not APIHelper.SKIP:
            self.usage_restriction_action = usage_restriction_action 
        if product_restriction_action is not APIHelper.SKIP:
            self.product_restriction_action = product_restriction_action 
        if products is not APIHelper.SKIP:
            self.products = products 
        if product_groups is not APIHelper.SKIP:
            self.product_groups = product_groups 
        if expiry_date is not APIHelper.SKIP:
            self.expiry_date = expiry_date 
        if client_reference_id is not APIHelper.SKIP:
            self.client_reference_id = client_reference_id 
        if auto_renew is not APIHelper.SKIP:
            self.auto_renew = auto_renew 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        card_delivery_type = dictionary.get("CardDeliveryType") if dictionary.get("CardDeliveryType") else None
        pin_advice_type = dictionary.get("PINAdviceType") if dictionary.get("PINAdviceType") else None
        payer_id = dictionary.get("PayerId") if "PayerId" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        card_type_id = dictionary.get("CardTypeId") if "CardTypeId" in dictionary.keys() else APIHelper.SKIP
        token_type_id = dictionary.get("TokenTypeId") if "TokenTypeId" in dictionary.keys() else APIHelper.SKIP
        emboss_text = dictionary.get("EmbossText") if "EmbossText" in dictionary.keys() else APIHelper.SKIP
        vrn = dictionary.get("VRN") if "VRN" in dictionary.keys() else APIHelper.SKIP
        driver_name = dictionary.get("DriverName") if "DriverName" in dictionary.keys() else APIHelper.SKIP
        odometer_input_required = dictionary.get("OdometerInputRequired") if "OdometerInputRequired" in dictionary.keys() else APIHelper.SKIP
        fleet_id_input_required = dictionary.get("FleetIdInputRequired") if "FleetIdInputRequired" in dictionary.keys() else APIHelper.SKIP
        purchase_category_id = dictionary.get("PurchaseCategoryId") if "PurchaseCategoryId" in dictionary.keys() else APIHelper.SKIP
        self_selected_encrypted_pin = dictionary.get("SelfSelectedEncryptedPIN") if dictionary.get("SelfSelectedEncryptedPIN") else APIHelper.SKIP
        self_selected_pin_key_id = dictionary.get("SelfSelectedPINKeyID") if "SelfSelectedPINKeyID" in dictionary.keys() else APIHelper.SKIP
        self_selected_pin_session_key = dictionary.get("SelfSelectedPINSessionKey") if "SelfSelectedPINSessionKey" in dictionary.keys() else APIHelper.SKIP
        card_group_id = dictionary.get("CardGroupId") if "CardGroupId" in dictionary.keys() else APIHelper.SKIP
        card_group_name = dictionary.get("CardGroupName") if "CardGroupName" in dictionary.keys() else APIHelper.SKIP
        is_new_card_group = dictionary.get("IsNewCardGroup") if "IsNewCardGroup" in dictionary.keys() else APIHelper.SKIP
        emboss_card_group = dictionary.get("EmbossCardGroup") if "EmbossCardGroup" in dictionary.keys() else APIHelper.SKIP
        card_contact = CardContact.from_dictionary(dictionary.get('CardContact')) if 'CardContact' in dictionary.keys() else APIHelper.SKIP
        pin_delivery_address_type = dictionary.get("PINDeliveryAddressType") if "PINDeliveryAddressType" in dictionary.keys() else APIHelper.SKIP
        pin_contact = PINContact.from_dictionary(dictionary.get('PINContact')) if 'PINContact' in dictionary.keys() else APIHelper.SKIP
        notify_caller = dictionary.get("NotifyCaller") if "NotifyCaller" in dictionary.keys() else APIHelper.SKIP
        caller = dictionary.get("Caller") if "Caller" in dictionary.keys() else APIHelper.SKIP
        notify_caller_on_sync = dictionary.get("NotifyCallerOnSync") if "NotifyCallerOnSync" in dictionary.keys() else APIHelper.SKIP
        validate_fleet_id = dictionary.get("ValidateFleetId") if "ValidateFleetId" in dictionary.keys() else APIHelper.SKIP
        fleet_option = dictionary.get("FleetOption") if "FleetOption" in dictionary.keys() else APIHelper.SKIP
        bundle_id = dictionary.get("BundleId") if "BundleId" in dictionary.keys() else APIHelper.SKIP
        usage_restriction_action = dictionary.get("UsageRestrictionAction") if "UsageRestrictionAction" in dictionary.keys() else APIHelper.SKIP
        product_restriction_action = dictionary.get("ProductRestrictionAction") if "ProductRestrictionAction" in dictionary.keys() else APIHelper.SKIP
        products = dictionary.get("Products") if dictionary.get("Products") else APIHelper.SKIP
        product_groups = dictionary.get("ProductGroups") if dictionary.get("ProductGroups") else APIHelper.SKIP
        expiry_date = dictionary.get("ExpiryDate") if "ExpiryDate" in dictionary.keys() else APIHelper.SKIP
        client_reference_id = dictionary.get("ClientReferenceId") if "ClientReferenceId" in dictionary.keys() else APIHelper.SKIP
        auto_renew = dictionary.get("AutoRenew") if dictionary.get("AutoRenew") else APIHelper.SKIP
        # Return an object of this model
        return cls(card_delivery_type,
                   pin_advice_type,
                   payer_id,
                   payer_number,
                   account_id,
                   account_number,
                   col_co_code,
                   col_co_id,
                   card_type_id,
                   token_type_id,
                   emboss_text,
                   vrn,
                   driver_name,
                   odometer_input_required,
                   fleet_id_input_required,
                   purchase_category_id,
                   self_selected_encrypted_pin,
                   self_selected_pin_key_id,
                   self_selected_pin_session_key,
                   card_group_id,
                   card_group_name,
                   is_new_card_group,
                   emboss_card_group,
                   card_contact,
                   pin_delivery_address_type,
                   pin_contact,
                   notify_caller,
                   caller,
                   notify_caller_on_sync,
                   validate_fleet_id,
                   fleet_option,
                   bundle_id,
                   usage_restriction_action,
                   product_restriction_action,
                   products,
                   product_groups,
                   expiry_date,
                   client_reference_id,
                   auto_renew)
