# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.update_card import UpdateCard


class CardManagementV1UpdatestatusRequest(object):

    """Implementation of the 'CardManagementV1UpdatestatusRequest' model.

    Attributes:
        cards (List[UpdateCard]): List of UpdateCardRequest entity. Each card
            in the list will be updated to the given target status. The
            details of the entity are given below.
        reason_id (int): Reason id for updating the card status.<br />
            Optional<br /> Either Reason ID or Text is madatory when
            TargetStatus is ‘Block’ or ‘Damaged’. Else ignored.<br /> Possible
            values:<br /> -Lost <br /> -Stolen <br /> -Card no longer
            required<br /> When passed, the reason Id will be validated with
            the allowed reason ids configured for the card type of the
            card.<br /> . If the given reason Id is not allowed for certain
            card types, then the request will be rejected as invalid ResonId.
        reason_text (str): Reason text for updating the card status.<br />
            Optional Either Reason ID or Text is madatory when TargetStatus is
            ‘Block’ or ‘Damaged’. Else ignored.<br /> Possible values:<br />
            -Lost <br /> -Stolen <br /> -Card no longer required <br />  
            Optional – However, either Reason ID or Text is madatory when
            TargetStatus is ‘Block’ or ‘Damaged’.<br />   When Reason Text is
            passed and the Target Status is either Block or Damaged, the text
            will be validated with the allowed list of values configured for
            the card type of the card.<br />   If the text is not allowed,
            request will be rejected as invaid ResonText.<br />   Note:<br /> 
            Customer blocked’ will be used as the reason for ‘Temporary Block’.
        target_status (str): The list of cards passed in Cards parameter will
            be updated to this status.<br /> Mandatory<br /> Allowed
            values:<br /> -TemporaryBlock<br /> -Unblock<br /> -Block<br />
            -Damaged<br />

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cards": 'Cards',
        "target_status": 'TargetStatus',
        "reason_id": 'ReasonId',
        "reason_text": 'ReasonText'
    }

    _optionals = [
        'reason_id',
        'reason_text',
    ]

    _nullables = [
        'reason_id',
        'reason_text',
    ]

    def __init__(self,
                 cards=None,
                 target_status=None,
                 reason_id=APIHelper.SKIP,
                 reason_text=APIHelper.SKIP):
        """Constructor for the CardManagementV1UpdatestatusRequest class"""

        # Initialize members of the class
        self.cards = cards 
        if reason_id is not APIHelper.SKIP:
            self.reason_id = reason_id 
        if reason_text is not APIHelper.SKIP:
            self.reason_text = reason_text 
        self.target_status = target_status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        cards = None
        if dictionary.get('Cards') is not None:
            cards = [UpdateCard.from_dictionary(x) for x in dictionary.get('Cards')]
        target_status = dictionary.get("TargetStatus") if dictionary.get("TargetStatus") else None
        reason_id = dictionary.get("ReasonId") if "ReasonId" in dictionary.keys() else APIHelper.SKIP
        reason_text = dictionary.get("ReasonText") if "ReasonText" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(cards,
                   target_status,
                   reason_id,
                   reason_text)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'cards={self.cards!r}, '
                f'reason_id={(self.reason_id if hasattr(self, "reason_id") else None)!r}, '
                f'reason_text={(self.reason_text if hasattr(self, "reason_text") else None)!r}, '
                f'target_status={self.target_status!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'cards={self.cards!s}, '
                f'reason_id={(self.reason_id if hasattr(self, "reason_id") else None)!s}, '
                f'reason_text={(self.reason_text if hasattr(self, "reason_text") else None)!s}, '
                f'target_status={self.target_status!s})')
