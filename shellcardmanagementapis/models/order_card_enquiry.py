# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class OrderCardEnquiry(object):

    """Implementation of the 'OrderCardEnquiry' model.

    This entity models the data that is sent in the https

    Attributes:
        account_id (int): Account ID on the card request
        account_number (str): AccountNumber
        bco_reference (int): Bulk card order request refrence numer.<br />
            This field will be null if the order is not through BCO.
        bco_row_number (int): Row number of the request in the BCO file.<br />
            This field will be null if the order is not through BCO.
        card_group_id (int): Card group ID
        card_group_name (str): Card group name
        card_id (int): Unique Card Id.<br /> The field will be null if the
            card order request is not successly processed.
        card_pan (str): Card PAN.<br /> Mask PAN (Mask all digits except the
            Last 6 digits of the PAN).<br /> The field will be null if the
            card order request is not successly processed.
        masked_pan (str): Card PAN
        panid (float): Card PAN ID as a unique number for each PAN
        card_type_code (str): CardTypeCode<br /> ISO code of the card i.e.
            first 7 digits of the PAN
        card_type_id (int): CardTypeId
        card_type_name (str): CardTypeName
        driver_name (str): Driver name
        error_code (str): Error code for the order card request.<br /> The
            value will be 0000 if it is processed without errors.
        error_description (str): Error description for the order card
            request.<br /> The value will be empty string if it is processed
            without errors.
        gateway_sync_error_code (str): Error code for the Gateway sync
            error.<br /> The value will be 0000 if it is processed without
            errors.
        gateway_sync_error_description (str): Error description for the
            Gateway sync error.<br /> The value will be empty string if it is
            processed without errors.
        gateway_sync_status (str): GatewaySyncStatus<br /> Status of the card
            sync with CFGW.<br /> Possible values:<br /> -Success<br />
            -Failed<br /> -In Progress<br /> -Not Submitted
        main_reference (int): Main reference number for the order card
            request.<br /> This field will be null if the order is through BCO.
        order_card_reference (int): Indivitual card reference number for the
            order card request.<br /> This field will be null if the order is
            through BCO.
        order_status (str): Order status.<br /> Possible values:<br /> P  
            Pending<br /> I   Picked up for processing<br /> PX    Failed at
            Queue but retry attempts pending<br /> X    Failed  at Queue<br />
            R    Card is processed, awaiting for PAN update.<br /> S   
            Processed<br /> F    Failed
        payer_id (int): Payer ID on the card request.
        payer_number (str): Payer Number on the card request
        processed_date (str): Date and time (in cutomers local time) when the
            card order request is processed<br /> Format: yyyyMMdd HH:mm:ss<br
            /> Note: The client application to convert the string to
            appropriate date/time type.
        purchase_category_code (str): PurchaseCategoryCode
        purchase_category_id (int): PurchaseCategoryId <br /> Note: Not
            Purchase code. This is a unique purchase category id assigned
        purchase_category_name (str): PurchaseCategoryName
        submitted_date (str): Date and time (in cutomers local time) when the
            card order request is submitted.<br /> Format: yyyyMMdd
            HH:mm:ss<br /> Note: The client application to convert the string
            to appropriate date/time type.
        sync_processed_date (str): SyncProcessedDate<br /> Date and time (in
            cutomers local time) when the sync card request is processed.<br
            /> Format: yyyyMMdd HH:mm:ss<br /> Note: The client application to
            convert the string to appropriate date/time type.
        sync_requested_date (str): SyncRequestedDate<br /> Date and time (in
            cutomers local time) when the sync card request is submitted.<br
            /> Format: yyyyMMdd HH:mm:ss <br /> Note: The client application
            to convert the string to appropriate date/time type.
        vrn (str): Vehicle registration number
        order_request_id (str): Unique Id of the Original Order card request,
            the status of which is enquired by this API. <br /> This is
            returned for end to end traceability of a request based on the
            original Order Card request.
        expiry_date (str): Expiry date of the card. Format: yyyymmdd hh:mm:ss 
            (Clients to convert this to appropriate DateTime type.) Note: This
            is the Expiry Date saved DB. If the Order Card request is still
            not processed, i.e. PAN is not yet issued, this field will be null
            or empty.  For a Card Order with a custom Expiry Date passed in
            the request, this value will be returned after it is updated
            successfully in GFN by the background process.
        client_reference_id (str): This is the Client Reference Id of card in
            the order which needs to be passed by the client.
        status_description (str): Order status.<br /> Possible values<br />  
            Success<br />   Failed<br />   InProgress<br />
        col_co_id (int): Colcoid

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "bco_reference": 'BCOReference',
        "bco_row_number": 'BCORowNumber',
        "card_group_id": 'CardGroupId',
        "card_group_name": 'CardGroupName',
        "card_id": 'CardId',
        "card_pan": 'CardPAN',
        "masked_pan": 'MaskedPAN',
        "panid": 'PANID',
        "card_type_code": 'CardTypeCode',
        "card_type_id": 'CardTypeId',
        "card_type_name": 'CardTypeName',
        "driver_name": 'DriverName',
        "error_code": 'ErrorCode',
        "error_description": 'ErrorDescription',
        "gateway_sync_error_code": 'GatewaySyncErrorCode',
        "gateway_sync_error_description": 'GatewaySyncErrorDescription',
        "gateway_sync_status": 'GatewaySyncStatus',
        "main_reference": 'MainReference',
        "order_card_reference": 'OrderCardReference',
        "order_status": 'OrderStatus',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber',
        "processed_date": 'ProcessedDate',
        "purchase_category_code": 'PurchaseCategoryCode',
        "purchase_category_id": 'PurchaseCategoryId',
        "purchase_category_name": 'PurchaseCategoryName',
        "submitted_date": 'SubmittedDate',
        "sync_processed_date": 'SyncProcessedDate',
        "sync_requested_date": 'SyncRequestedDate',
        "vrn": 'VRN',
        "order_request_id": 'OrderRequestId',
        "expiry_date": 'ExpiryDate',
        "client_reference_id": 'ClientReferenceId',
        "status_description": 'StatusDescription',
        "col_co_id": 'ColCoId'
    }

    _optionals = [
        'account_id',
        'account_number',
        'bco_reference',
        'bco_row_number',
        'card_group_id',
        'card_group_name',
        'card_id',
        'card_pan',
        'masked_pan',
        'panid',
        'card_type_code',
        'card_type_id',
        'card_type_name',
        'driver_name',
        'error_code',
        'error_description',
        'gateway_sync_error_code',
        'gateway_sync_error_description',
        'gateway_sync_status',
        'main_reference',
        'order_card_reference',
        'order_status',
        'payer_id',
        'payer_number',
        'processed_date',
        'purchase_category_code',
        'purchase_category_id',
        'purchase_category_name',
        'submitted_date',
        'sync_processed_date',
        'sync_requested_date',
        'vrn',
        'order_request_id',
        'expiry_date',
        'client_reference_id',
        'status_description',
        'col_co_id',
    ]

    _nullables = [
        'account_id',
        'account_number',
        'bco_reference',
        'bco_row_number',
        'card_group_id',
        'card_group_name',
        'card_id',
        'card_pan',
        'masked_pan',
        'panid',
        'card_type_code',
        'card_type_id',
        'card_type_name',
        'driver_name',
        'error_code',
        'error_description',
        'gateway_sync_error_code',
        'gateway_sync_error_description',
        'gateway_sync_status',
        'order_status',
        'payer_number',
        'processed_date',
        'purchase_category_code',
        'purchase_category_id',
        'purchase_category_name',
        'submitted_date',
        'sync_processed_date',
        'sync_requested_date',
        'vrn',
        'order_request_id',
        'expiry_date',
        'client_reference_id',
        'status_description',
        'col_co_id',
    ]

    def __init__(self,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 bco_reference=APIHelper.SKIP,
                 bco_row_number=APIHelper.SKIP,
                 card_group_id=APIHelper.SKIP,
                 card_group_name=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 card_pan=APIHelper.SKIP,
                 masked_pan=APIHelper.SKIP,
                 panid=APIHelper.SKIP,
                 card_type_code=APIHelper.SKIP,
                 card_type_id=APIHelper.SKIP,
                 card_type_name=APIHelper.SKIP,
                 driver_name=APIHelper.SKIP,
                 error_code=APIHelper.SKIP,
                 error_description=APIHelper.SKIP,
                 gateway_sync_error_code=APIHelper.SKIP,
                 gateway_sync_error_description=APIHelper.SKIP,
                 gateway_sync_status=APIHelper.SKIP,
                 main_reference=APIHelper.SKIP,
                 order_card_reference=APIHelper.SKIP,
                 order_status=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 processed_date=APIHelper.SKIP,
                 purchase_category_code=APIHelper.SKIP,
                 purchase_category_id=APIHelper.SKIP,
                 purchase_category_name=APIHelper.SKIP,
                 submitted_date=APIHelper.SKIP,
                 sync_processed_date=APIHelper.SKIP,
                 sync_requested_date=APIHelper.SKIP,
                 vrn=APIHelper.SKIP,
                 order_request_id=APIHelper.SKIP,
                 expiry_date=APIHelper.SKIP,
                 client_reference_id=APIHelper.SKIP,
                 status_description=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP):
        """Constructor for the OrderCardEnquiry class"""

        # Initialize members of the class
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if bco_reference is not APIHelper.SKIP:
            self.bco_reference = bco_reference 
        if bco_row_number is not APIHelper.SKIP:
            self.bco_row_number = bco_row_number 
        if card_group_id is not APIHelper.SKIP:
            self.card_group_id = card_group_id 
        if card_group_name is not APIHelper.SKIP:
            self.card_group_name = card_group_name 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if card_pan is not APIHelper.SKIP:
            self.card_pan = card_pan 
        if masked_pan is not APIHelper.SKIP:
            self.masked_pan = masked_pan 
        if panid is not APIHelper.SKIP:
            self.panid = panid 
        if card_type_code is not APIHelper.SKIP:
            self.card_type_code = card_type_code 
        if card_type_id is not APIHelper.SKIP:
            self.card_type_id = card_type_id 
        if card_type_name is not APIHelper.SKIP:
            self.card_type_name = card_type_name 
        if driver_name is not APIHelper.SKIP:
            self.driver_name = driver_name 
        if error_code is not APIHelper.SKIP:
            self.error_code = error_code 
        if error_description is not APIHelper.SKIP:
            self.error_description = error_description 
        if gateway_sync_error_code is not APIHelper.SKIP:
            self.gateway_sync_error_code = gateway_sync_error_code 
        if gateway_sync_error_description is not APIHelper.SKIP:
            self.gateway_sync_error_description = gateway_sync_error_description 
        if gateway_sync_status is not APIHelper.SKIP:
            self.gateway_sync_status = gateway_sync_status 
        if main_reference is not APIHelper.SKIP:
            self.main_reference = main_reference 
        if order_card_reference is not APIHelper.SKIP:
            self.order_card_reference = order_card_reference 
        if order_status is not APIHelper.SKIP:
            self.order_status = order_status 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if processed_date is not APIHelper.SKIP:
            self.processed_date = processed_date 
        if purchase_category_code is not APIHelper.SKIP:
            self.purchase_category_code = purchase_category_code 
        if purchase_category_id is not APIHelper.SKIP:
            self.purchase_category_id = purchase_category_id 
        if purchase_category_name is not APIHelper.SKIP:
            self.purchase_category_name = purchase_category_name 
        if submitted_date is not APIHelper.SKIP:
            self.submitted_date = submitted_date 
        if sync_processed_date is not APIHelper.SKIP:
            self.sync_processed_date = sync_processed_date 
        if sync_requested_date is not APIHelper.SKIP:
            self.sync_requested_date = sync_requested_date 
        if vrn is not APIHelper.SKIP:
            self.vrn = vrn 
        if order_request_id is not APIHelper.SKIP:
            self.order_request_id = order_request_id 
        if expiry_date is not APIHelper.SKIP:
            self.expiry_date = expiry_date 
        if client_reference_id is not APIHelper.SKIP:
            self.client_reference_id = client_reference_id 
        if status_description is not APIHelper.SKIP:
            self.status_description = status_description 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        bco_reference = dictionary.get("BCOReference") if "BCOReference" in dictionary.keys() else APIHelper.SKIP
        bco_row_number = dictionary.get("BCORowNumber") if "BCORowNumber" in dictionary.keys() else APIHelper.SKIP
        card_group_id = dictionary.get("CardGroupId") if "CardGroupId" in dictionary.keys() else APIHelper.SKIP
        card_group_name = dictionary.get("CardGroupName") if "CardGroupName" in dictionary.keys() else APIHelper.SKIP
        card_id = dictionary.get("CardId") if "CardId" in dictionary.keys() else APIHelper.SKIP
        card_pan = dictionary.get("CardPAN") if "CardPAN" in dictionary.keys() else APIHelper.SKIP
        masked_pan = dictionary.get("MaskedPAN") if "MaskedPAN" in dictionary.keys() else APIHelper.SKIP
        panid = dictionary.get("PANID") if "PANID" in dictionary.keys() else APIHelper.SKIP
        card_type_code = dictionary.get("CardTypeCode") if "CardTypeCode" in dictionary.keys() else APIHelper.SKIP
        card_type_id = dictionary.get("CardTypeId") if "CardTypeId" in dictionary.keys() else APIHelper.SKIP
        card_type_name = dictionary.get("CardTypeName") if "CardTypeName" in dictionary.keys() else APIHelper.SKIP
        driver_name = dictionary.get("DriverName") if "DriverName" in dictionary.keys() else APIHelper.SKIP
        error_code = dictionary.get("ErrorCode") if "ErrorCode" in dictionary.keys() else APIHelper.SKIP
        error_description = dictionary.get("ErrorDescription") if "ErrorDescription" in dictionary.keys() else APIHelper.SKIP
        gateway_sync_error_code = dictionary.get("GatewaySyncErrorCode") if "GatewaySyncErrorCode" in dictionary.keys() else APIHelper.SKIP
        gateway_sync_error_description = dictionary.get("GatewaySyncErrorDescription") if "GatewaySyncErrorDescription" in dictionary.keys() else APIHelper.SKIP
        gateway_sync_status = dictionary.get("GatewaySyncStatus") if "GatewaySyncStatus" in dictionary.keys() else APIHelper.SKIP
        main_reference = dictionary.get("MainReference") if dictionary.get("MainReference") else APIHelper.SKIP
        order_card_reference = dictionary.get("OrderCardReference") if dictionary.get("OrderCardReference") else APIHelper.SKIP
        order_status = dictionary.get("OrderStatus") if "OrderStatus" in dictionary.keys() else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        processed_date = dictionary.get("ProcessedDate") if "ProcessedDate" in dictionary.keys() else APIHelper.SKIP
        purchase_category_code = dictionary.get("PurchaseCategoryCode") if "PurchaseCategoryCode" in dictionary.keys() else APIHelper.SKIP
        purchase_category_id = dictionary.get("PurchaseCategoryId") if "PurchaseCategoryId" in dictionary.keys() else APIHelper.SKIP
        purchase_category_name = dictionary.get("PurchaseCategoryName") if "PurchaseCategoryName" in dictionary.keys() else APIHelper.SKIP
        submitted_date = dictionary.get("SubmittedDate") if "SubmittedDate" in dictionary.keys() else APIHelper.SKIP
        sync_processed_date = dictionary.get("SyncProcessedDate") if "SyncProcessedDate" in dictionary.keys() else APIHelper.SKIP
        sync_requested_date = dictionary.get("SyncRequestedDate") if "SyncRequestedDate" in dictionary.keys() else APIHelper.SKIP
        vrn = dictionary.get("VRN") if "VRN" in dictionary.keys() else APIHelper.SKIP
        order_request_id = dictionary.get("OrderRequestId") if "OrderRequestId" in dictionary.keys() else APIHelper.SKIP
        expiry_date = dictionary.get("ExpiryDate") if "ExpiryDate" in dictionary.keys() else APIHelper.SKIP
        client_reference_id = dictionary.get("ClientReferenceId") if "ClientReferenceId" in dictionary.keys() else APIHelper.SKIP
        status_description = dictionary.get("StatusDescription") if "StatusDescription" in dictionary.keys() else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(account_id,
                   account_number,
                   bco_reference,
                   bco_row_number,
                   card_group_id,
                   card_group_name,
                   card_id,
                   card_pan,
                   masked_pan,
                   panid,
                   card_type_code,
                   card_type_id,
                   card_type_name,
                   driver_name,
                   error_code,
                   error_description,
                   gateway_sync_error_code,
                   gateway_sync_error_description,
                   gateway_sync_status,
                   main_reference,
                   order_card_reference,
                   order_status,
                   payer_id,
                   payer_number,
                   processed_date,
                   purchase_category_code,
                   purchase_category_id,
                   purchase_category_name,
                   submitted_date,
                   sync_processed_date,
                   sync_requested_date,
                   vrn,
                   order_request_id,
                   expiry_date,
                   client_reference_id,
                   status_description,
                   col_co_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'bco_reference={(self.bco_reference if hasattr(self, "bco_reference") else None)!r}, '
                f'bco_row_number={(self.bco_row_number if hasattr(self, "bco_row_number") else None)!r}, '
                f'card_group_id={(self.card_group_id if hasattr(self, "card_group_id") else None)!r}, '
                f'card_group_name={(self.card_group_name if hasattr(self, "card_group_name") else None)!r}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!r}, '
                f'card_pan={(self.card_pan if hasattr(self, "card_pan") else None)!r}, '
                f'masked_pan={(self.masked_pan if hasattr(self, "masked_pan") else None)!r}, '
                f'panid={(self.panid if hasattr(self, "panid") else None)!r}, '
                f'card_type_code={(self.card_type_code if hasattr(self, "card_type_code") else None)!r}, '
                f'card_type_id={(self.card_type_id if hasattr(self, "card_type_id") else None)!r}, '
                f'card_type_name={(self.card_type_name if hasattr(self, "card_type_name") else None)!r}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!r}, '
                f'error_code={(self.error_code if hasattr(self, "error_code") else None)!r}, '
                f'error_description={(self.error_description if hasattr(self, "error_description") else None)!r}, '
                f'gateway_sync_error_code={(self.gateway_sync_error_code if hasattr(self, "gateway_sync_error_code") else None)!r}, '
                f'gateway_sync_error_description={(self.gateway_sync_error_description if hasattr(self, "gateway_sync_error_description") else None)!r}, '
                f'gateway_sync_status={(self.gateway_sync_status if hasattr(self, "gateway_sync_status") else None)!r}, '
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!r}, '
                f'order_card_reference={(self.order_card_reference if hasattr(self, "order_card_reference") else None)!r}, '
                f'order_status={(self.order_status if hasattr(self, "order_status") else None)!r}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!r}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!r}, '
                f'processed_date={(self.processed_date if hasattr(self, "processed_date") else None)!r}, '
                f'purchase_category_code={(self.purchase_category_code if hasattr(self, "purchase_category_code") else None)!r}, '
                f'purchase_category_id={(self.purchase_category_id if hasattr(self, "purchase_category_id") else None)!r}, '
                f'purchase_category_name={(self.purchase_category_name if hasattr(self, "purchase_category_name") else None)!r}, '
                f'submitted_date={(self.submitted_date if hasattr(self, "submitted_date") else None)!r}, '
                f'sync_processed_date={(self.sync_processed_date if hasattr(self, "sync_processed_date") else None)!r}, '
                f'sync_requested_date={(self.sync_requested_date if hasattr(self, "sync_requested_date") else None)!r}, '
                f'vrn={(self.vrn if hasattr(self, "vrn") else None)!r}, '
                f'order_request_id={(self.order_request_id if hasattr(self, "order_request_id") else None)!r}, '
                f'expiry_date={(self.expiry_date if hasattr(self, "expiry_date") else None)!r}, '
                f'client_reference_id={(self.client_reference_id if hasattr(self, "client_reference_id") else None)!r}, '
                f'status_description={(self.status_description if hasattr(self, "status_description") else None)!r}, '
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'bco_reference={(self.bco_reference if hasattr(self, "bco_reference") else None)!s}, '
                f'bco_row_number={(self.bco_row_number if hasattr(self, "bco_row_number") else None)!s}, '
                f'card_group_id={(self.card_group_id if hasattr(self, "card_group_id") else None)!s}, '
                f'card_group_name={(self.card_group_name if hasattr(self, "card_group_name") else None)!s}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!s}, '
                f'card_pan={(self.card_pan if hasattr(self, "card_pan") else None)!s}, '
                f'masked_pan={(self.masked_pan if hasattr(self, "masked_pan") else None)!s}, '
                f'panid={(self.panid if hasattr(self, "panid") else None)!s}, '
                f'card_type_code={(self.card_type_code if hasattr(self, "card_type_code") else None)!s}, '
                f'card_type_id={(self.card_type_id if hasattr(self, "card_type_id") else None)!s}, '
                f'card_type_name={(self.card_type_name if hasattr(self, "card_type_name") else None)!s}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!s}, '
                f'error_code={(self.error_code if hasattr(self, "error_code") else None)!s}, '
                f'error_description={(self.error_description if hasattr(self, "error_description") else None)!s}, '
                f'gateway_sync_error_code={(self.gateway_sync_error_code if hasattr(self, "gateway_sync_error_code") else None)!s}, '
                f'gateway_sync_error_description={(self.gateway_sync_error_description if hasattr(self, "gateway_sync_error_description") else None)!s}, '
                f'gateway_sync_status={(self.gateway_sync_status if hasattr(self, "gateway_sync_status") else None)!s}, '
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!s}, '
                f'order_card_reference={(self.order_card_reference if hasattr(self, "order_card_reference") else None)!s}, '
                f'order_status={(self.order_status if hasattr(self, "order_status") else None)!s}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!s}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!s}, '
                f'processed_date={(self.processed_date if hasattr(self, "processed_date") else None)!s}, '
                f'purchase_category_code={(self.purchase_category_code if hasattr(self, "purchase_category_code") else None)!s}, '
                f'purchase_category_id={(self.purchase_category_id if hasattr(self, "purchase_category_id") else None)!s}, '
                f'purchase_category_name={(self.purchase_category_name if hasattr(self, "purchase_category_name") else None)!s}, '
                f'submitted_date={(self.submitted_date if hasattr(self, "submitted_date") else None)!s}, '
                f'sync_processed_date={(self.sync_processed_date if hasattr(self, "sync_processed_date") else None)!s}, '
                f'sync_requested_date={(self.sync_requested_date if hasattr(self, "sync_requested_date") else None)!s}, '
                f'vrn={(self.vrn if hasattr(self, "vrn") else None)!s}, '
                f'order_request_id={(self.order_request_id if hasattr(self, "order_request_id") else None)!s}, '
                f'expiry_date={(self.expiry_date if hasattr(self, "expiry_date") else None)!s}, '
                f'client_reference_id={(self.client_reference_id if hasattr(self, "client_reference_id") else None)!s}, '
                f'status_description={(self.status_description if hasattr(self, "status_description") else None)!s}, '
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!s})')
