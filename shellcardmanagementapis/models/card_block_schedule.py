# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class CardBlockSchedule(object):

    """Implementation of the 'CardBlockSchedule' model.

    Response entity object for CardBlockSchedule  list

    Attributes:
        from_date (str): Effective start date of Block / Unblock<br /> Format:
            yyyyMMdd
        to_date (str): Effective end date of Block / Unblock<br /> Format:
            yyyyMMdd

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "from_date": 'FromDate',
        "to_date": 'ToDate'
    }

    _optionals = [
        'from_date',
        'to_date',
    ]

    _nullables = [
        'from_date',
        'to_date',
    ]

    def __init__(self,
                 from_date=APIHelper.SKIP,
                 to_date=APIHelper.SKIP):
        """Constructor for the CardBlockSchedule class"""

        # Initialize members of the class
        if from_date is not APIHelper.SKIP:
            self.from_date = from_date 
        if to_date is not APIHelper.SKIP:
            self.to_date = to_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        from_date = dictionary.get("FromDate") if "FromDate" in dictionary.keys() else APIHelper.SKIP
        to_date = dictionary.get("ToDate") if "ToDate" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(from_date,
                   to_date)
