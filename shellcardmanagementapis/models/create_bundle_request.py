# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.create_bundle_request_restrictions import CreateBundleRequestRestrictions


class CreateBundleRequest(object):

    """Implementation of the 'CreateBundleRequest' model.

    TODO: type model description here.

    Attributes:
        col_co_id (int): Collecting Company Id  of the selected payer.  
            Optional if ColCoCode is passed else Mandatory.  Example: 
            1-Philippines  5-UK
        payer_id (int): Payer Id of the selected payer.  Optional if
            PayerNumber is passed else Mandatory  Example: 123456
        account_id (int): Account ID of the customer.  Either AccountId or
            AccountNumber or both must be passed.  Example: 123456
        external_bundle_id (str): Identifier of the bundle in external system.
            Optional.
        description (str): A bundle description.  Optional.
        cards (List[str]): List of Card PANs to be added in the bundle. 
            Mandatory.  Example: 7002051006629890645  When PAN matches with
            multiple cards, the restriction will be applied on the latest
            issued card.
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.   Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.  Example:  86-Philippines  5-UK
        payer_number (str): Payer Number (Ex: GB000000123) of the selected
            payer.  Optional if PayerId is passed else Mandatory
        account_number (str): Account Number of the customer.   Either
            AccountId or AccountNumber or both must be passed.  Example:
            GB000000123
        restrictions (CreateBundleRequestRestrictions): Restrictions to be
            applied on the bundle.  Mandatory

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'Description',
        "cards": 'Cards',
        "col_co_id": 'ColCoId',
        "payer_id": 'PayerId',
        "account_id": 'AccountId',
        "external_bundle_id": 'ExternalBundleId',
        "col_co_code": 'ColCoCode',
        "payer_number": 'PayerNumber',
        "account_number": 'AccountNumber',
        "restrictions": 'Restrictions'
    }

    _optionals = [
        'col_co_id',
        'payer_id',
        'account_id',
        'external_bundle_id',
        'col_co_code',
        'payer_number',
        'account_number',
        'restrictions',
    ]

    _nullables = [
        'external_bundle_id',
        'col_co_code',
        'account_number',
    ]

    def __init__(self,
                 description=None,
                 cards=None,
                 col_co_id=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 external_bundle_id=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 restrictions=APIHelper.SKIP):
        """Constructor for the CreateBundleRequest class"""

        # Initialize members of the class
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if external_bundle_id is not APIHelper.SKIP:
            self.external_bundle_id = external_bundle_id 
        self.description = description 
        self.cards = cards 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if restrictions is not APIHelper.SKIP:
            self.restrictions = restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        description = dictionary.get("Description") if dictionary.get("Description") else None
        cards = dictionary.get("Cards") if dictionary.get("Cards") else None
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        external_bundle_id = dictionary.get("ExternalBundleId") if "ExternalBundleId" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if dictionary.get("PayerNumber") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        restrictions = CreateBundleRequestRestrictions.from_dictionary(dictionary.get('Restrictions')) if 'Restrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   cards,
                   col_co_id,
                   payer_id,
                   account_id,
                   external_bundle_id,
                   col_co_code,
                   payer_number,
                   account_number,
                   restrictions)
