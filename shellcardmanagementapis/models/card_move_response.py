# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.card_move_response_error_cards_items import CardMoveResponseErrorCardsItems
from shellcardmanagementapis.models.card_move_response_successful_requests_items import CardMoveResponseSuccessfulRequestsItems
from shellcardmanagementapis.models.error_status import ErrorStatus


class CardMoveResponse(object):

    """Implementation of the 'CardMoveResponse' model.

    Attributes:
        move_card_request_reference (int): The model property of type int.
        successful_requests (List[CardMoveResponseSuccessfulRequestsItems]):
            The model property of type
            List[CardMoveResponseSuccessfulRequestsItems].
        error_cards (List[CardMoveResponseErrorCardsItems]): The model
            property of type List[CardMoveResponseErrorCardsItems].
        request_id (str): The model property of type str.
        error (ErrorStatus): The model property of type ErrorStatus.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "move_card_request_reference": 'MoveCardRequestReference',
        "successful_requests": 'SuccessfulRequests',
        "error_cards": 'ErrorCards',
        "request_id": 'RequestId',
        "error": 'Error'
    }

    _optionals = [
        'move_card_request_reference',
        'successful_requests',
        'error_cards',
        'request_id',
        'error',
    ]

    def __init__(self,
                 move_card_request_reference=APIHelper.SKIP,
                 successful_requests=APIHelper.SKIP,
                 error_cards=APIHelper.SKIP,
                 request_id=APIHelper.SKIP,
                 error=APIHelper.SKIP):
        """Constructor for the CardMoveResponse class"""

        # Initialize members of the class
        if move_card_request_reference is not APIHelper.SKIP:
            self.move_card_request_reference = move_card_request_reference 
        if successful_requests is not APIHelper.SKIP:
            self.successful_requests = successful_requests 
        if error_cards is not APIHelper.SKIP:
            self.error_cards = error_cards 
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 
        if error is not APIHelper.SKIP:
            self.error = error 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        move_card_request_reference = dictionary.get("MoveCardRequestReference") if dictionary.get("MoveCardRequestReference") else APIHelper.SKIP
        successful_requests = None
        if dictionary.get('SuccessfulRequests') is not None:
            successful_requests = [CardMoveResponseSuccessfulRequestsItems.from_dictionary(x) for x in dictionary.get('SuccessfulRequests')]
        else:
            successful_requests = APIHelper.SKIP
        error_cards = None
        if dictionary.get('ErrorCards') is not None:
            error_cards = [CardMoveResponseErrorCardsItems.from_dictionary(x) for x in dictionary.get('ErrorCards')]
        else:
            error_cards = APIHelper.SKIP
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(move_card_request_reference,
                   successful_requests,
                   error_cards,
                   request_id,
                   error)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'move_card_request_reference={(self.move_card_request_reference if hasattr(self, "move_card_request_reference") else None)!r}, '
                f'successful_requests={(self.successful_requests if hasattr(self, "successful_requests") else None)!r}, '
                f'error_cards={(self.error_cards if hasattr(self, "error_cards") else None)!r}, '
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!r}, '
                f'error={(self.error if hasattr(self, "error") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'move_card_request_reference={(self.move_card_request_reference if hasattr(self, "move_card_request_reference") else None)!s}, '
                f'successful_requests={(self.successful_requests if hasattr(self, "successful_requests") else None)!s}, '
                f'error_cards={(self.error_cards if hasattr(self, "error_cards") else None)!s}, '
                f'request_id={(self.request_id if hasattr(self, "request_id") else None)!s}, '
                f'error={(self.error if hasattr(self, "error") else None)!s})')
