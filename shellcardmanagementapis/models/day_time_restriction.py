# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class DayTimeRestriction(object):

    """Implementation of the 'DayTimeRestriction' model.

    Details of the day/time restrictions such as weekdays and time range in
    which transactions should be allowed on the card.

    Attributes:
        monday (bool): True if card could be used on a Monday, else false
        tuesday (bool): True if card could be used on a Tuesday, else false.
        wednesday (bool): True if card could be used on a Wednesday, else
            false.
        thursday (bool): True if card could be used on a Thursday, else false
        friday (bool): True if card could be used on a Friday, else false
        saturday (bool): True if card could be used on a Saturday, else false
        sunday (bool): True if card could be used on a Sunday, else false.
        time_from (str): Card could be used from this time in a day.  Format:
            HH:mm (24-hour format)  Note:   1.    Clients to convert this to
            appropriate DateTime or TimeSpan type.  “00:00” is the lowest time
            value and “23:59” is the highest time value.
        time_to (str): Card could be used up to this time in a day.   Format:
            HH:mm (24-hour format)  Note:   1.    Clients to convert this to
            appropriate DateTime or TimeSpan type.   “00:00” is the lowest
            time value and “23:59” is the highest time value.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "monday": 'Monday',
        "tuesday": 'Tuesday',
        "wednesday": 'Wednesday',
        "thursday": 'Thursday',
        "friday": 'Friday',
        "saturday": 'Saturday',
        "sunday": 'Sunday',
        "time_from": 'TimeFrom',
        "time_to": 'TimeTo'
    }

    _optionals = [
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday',
        'sunday',
        'time_from',
        'time_to',
    ]

    def __init__(self,
                 monday=APIHelper.SKIP,
                 tuesday=APIHelper.SKIP,
                 wednesday=APIHelper.SKIP,
                 thursday=APIHelper.SKIP,
                 friday=APIHelper.SKIP,
                 saturday=APIHelper.SKIP,
                 sunday=APIHelper.SKIP,
                 time_from=APIHelper.SKIP,
                 time_to=APIHelper.SKIP):
        """Constructor for the DayTimeRestriction class"""

        # Initialize members of the class
        if monday is not APIHelper.SKIP:
            self.monday = monday 
        if tuesday is not APIHelper.SKIP:
            self.tuesday = tuesday 
        if wednesday is not APIHelper.SKIP:
            self.wednesday = wednesday 
        if thursday is not APIHelper.SKIP:
            self.thursday = thursday 
        if friday is not APIHelper.SKIP:
            self.friday = friday 
        if saturday is not APIHelper.SKIP:
            self.saturday = saturday 
        if sunday is not APIHelper.SKIP:
            self.sunday = sunday 
        if time_from is not APIHelper.SKIP:
            self.time_from = time_from 
        if time_to is not APIHelper.SKIP:
            self.time_to = time_to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        monday = dictionary.get("Monday") if "Monday" in dictionary.keys() else APIHelper.SKIP
        tuesday = dictionary.get("Tuesday") if "Tuesday" in dictionary.keys() else APIHelper.SKIP
        wednesday = dictionary.get("Wednesday") if "Wednesday" in dictionary.keys() else APIHelper.SKIP
        thursday = dictionary.get("Thursday") if "Thursday" in dictionary.keys() else APIHelper.SKIP
        friday = dictionary.get("Friday") if "Friday" in dictionary.keys() else APIHelper.SKIP
        saturday = dictionary.get("Saturday") if "Saturday" in dictionary.keys() else APIHelper.SKIP
        sunday = dictionary.get("Sunday") if "Sunday" in dictionary.keys() else APIHelper.SKIP
        time_from = dictionary.get("TimeFrom") if dictionary.get("TimeFrom") else APIHelper.SKIP
        time_to = dictionary.get("TimeTo") if dictionary.get("TimeTo") else APIHelper.SKIP
        # Return an object of this model
        return cls(monday,
                   tuesday,
                   wednesday,
                   thursday,
                   friday,
                   saturday,
                   sunday,
                   time_from,
                   time_to)
