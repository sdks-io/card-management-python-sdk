# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class DayTimeRestrictions(object):

    """Implementation of the 'DayTimeRestrictions' model.

    Day/time restrictions such as weekdays and time range to be applied on the
    bundle.
    Mandatory if respective action is set as “Add”.
    The details of DayTimeRestriction entity is given below.

    Attributes:
        friday (bool): True/False.  True if card could be used on a Friday,
            else false.   Default value: false.
        monday (bool): True/False.  True if card could be used on a Monday,
            else false.   Default value: false.
        saturday (bool): True/False.  True if card could be used on a
            Saturday, else false.   Default value: false.
        sunday (bool): True/False.  True if card could be used on a Sunday,
            else false.   Default value: false.
        thursday (bool): True/False.  True if card could be used on a
            Thursday, else false.   Default value: false.
        time_from (str): Card could be used from this time in a day. 
            Mandatory if TimeTo is passed, else optional.  Format: HH:mm
            (24-hour format)  Note:   2. “00:00” is the lowest time value and
            “23:59” is the highest time value.   To allow card to be used
            throughout the day pass null in TimeFrom and TimeTo.
        time_to (str): Card could be used up to this time in a day.  
            Mandatory if TimeFrom is passed, else optional.  Format: HH:mm
            (24-hour format)  Note:   2. “00:00” is the lowest time value and
            “23:59” is the highest time value.  To allow card to be used
            throughout the day pass null in TimeFrom and TimeTo.
        tuesday (bool): True/False.  True if card could be used on a Tuesday,
            else false.   Default value: false.
        wednesday (bool): True/False.  True if card could be used on a
            Wednesday, else false.   Default value: false.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "friday": 'Friday',
        "monday": 'Monday',
        "saturday": 'Saturday',
        "sunday": 'Sunday',
        "thursday": 'Thursday',
        "time_from": 'TimeFrom',
        "time_to": 'TimeTo',
        "tuesday": 'Tuesday',
        "wednesday": 'Wednesday'
    }

    _optionals = [
        'friday',
        'monday',
        'saturday',
        'sunday',
        'thursday',
        'time_from',
        'time_to',
        'tuesday',
        'wednesday',
    ]

    _nullables = [
        'time_from',
        'time_to',
    ]

    def __init__(self,
                 friday=False,
                 monday=False,
                 saturday=False,
                 sunday=False,
                 thursday=False,
                 time_from=APIHelper.SKIP,
                 time_to=APIHelper.SKIP,
                 tuesday=False,
                 wednesday=False):
        """Constructor for the DayTimeRestrictions class"""

        # Initialize members of the class
        self.friday = friday 
        self.monday = monday 
        self.saturday = saturday 
        self.sunday = sunday 
        self.thursday = thursday 
        if time_from is not APIHelper.SKIP:
            self.time_from = time_from 
        if time_to is not APIHelper.SKIP:
            self.time_to = time_to 
        self.tuesday = tuesday 
        self.wednesday = wednesday 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        friday = dictionary.get("Friday") if dictionary.get("Friday") else False
        monday = dictionary.get("Monday") if dictionary.get("Monday") else False
        saturday = dictionary.get("Saturday") if dictionary.get("Saturday") else False
        sunday = dictionary.get("Sunday") if dictionary.get("Sunday") else False
        thursday = dictionary.get("Thursday") if dictionary.get("Thursday") else False
        time_from = dictionary.get("TimeFrom") if "TimeFrom" in dictionary.keys() else APIHelper.SKIP
        time_to = dictionary.get("TimeTo") if "TimeTo" in dictionary.keys() else APIHelper.SKIP
        tuesday = dictionary.get("Tuesday") if dictionary.get("Tuesday") else False
        wednesday = dictionary.get("Wednesday") if dictionary.get("Wednesday") else False
        # Return an object of this model
        return cls(friday,
                   monday,
                   saturday,
                   sunday,
                   thursday,
                   time_from,
                   time_to,
                   tuesday,
                   wednesday)
