# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class RestrictionCardList(object):

    """Implementation of the 'RestrictionCardList' model.

    Attributes:
        card_id (int): Unique Card Id
        pan (str): Card PAN
        expiry_date (str): Expiry date of the card   Format: yyyyMMdd  Note:
            Clients to convert this to appropriate DateTime type.
        status_id (int): Card Status id
        status_description (str): Status Description (Active, Temporarily
            Blocked, etc.,)
        driver_name (str): Driver name Example:  ANDREW GILBERRY
        vrn (str): Vehicle registration number Example: MV65YLH
        issue_date (str): Issue date Format: yyyyMMdd Note: Clients to convert
            this to appropriate DateTime type.
        issue_number (int): Issue Number
        account_id (int): Account ID Example: 29484
        account_number (str): Account Number Example: GB99215176
        account_name (str): Account Name Example: MATTHEW ALGIE & COMPANY
            LIMITED
        account_short_name (str): Account Short Name
        currency_code (str): ISO currency code of the Customer Currency
            Example: GBP
        col_co_currency_code (str): ISO currency code of the country. Example:
            GBP
        col_co_currency_symbol (str): Currency symbol of the country. Example:
            £, $
        restriction_currency_code (str): ISO currency code of the country.
            Example: GBP
        restriction_currency_symbol (str): Currency symbol of the country.
            Example: £, $
        purchase_category_id (str): Purchase category Id Example: 123, 124,
            etc.,
        purchase_category_code (str): Purchase category code   Example:   0 -
            All Fuels (without VP) and Lubricants  1 - FuelSave only  2 -
            FuelSave and Lubricants  3 - No Restrictions  4 - VP and FuelSave 
            5 - Diesel ONLY  6 - Diesel and Lubricants  7 - VP and Lubricants 
            8 - VP and FuelSave and Lubricants
        purchase_category_name (str): Purchase category name   Example:   0 -
            All Fuels (without VP) and Lubricants  1 - FuelSave only  2 -
            FuelSave and Lubricants  3 - No Restrictions  4 - VP and FuelSave 
            5 - Diesel ONLY  6 - Diesel and Lubricants  7 - VP and Lubricants 
            8 - VP and FuelSave and Lubricants
        is_superseded (bool): True/False True if a new card is issued with the
            same PAN, else false
        is_virtual_card (bool): True/False True if it is a virtual card, else
            false
        is_national (bool): True/False True if it is a national card, else
            false
        is_international (bool): True/False True if it is an international
            card, else false
        is_crt (bool): True/False True if it is a CRT type card, else false
        is_fleet (bool): True/False True if it is a Fleet type card, else false
        is_shell_sites_only (bool): True/False True if it is only allowed at
            Shell sites, else false
        is_partner_sites_included (bool): True/False True if it is allowed at
            all partner sites, else false
        card_type_id (int): Card Type ID Example Id & Description: 1 -
            Philippines CRT 7077861 2- Philippines Fleet 7002861 5-SHELL
            FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL
            CRT- HONG KONG 7077821
        card_type_code (str): ISO code of the card i.e. first 7 digits of the
            PAN
        card_type_name (str): Card Type Name Example Id & Description: 1 -
            Philippines CRT 7077861 2- Philippines Fleet 7002861 5-SHELL
            FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL
            CRT- HONG KONG 7077821
        bundle_id (str): Bundle Id associated with card in the Gateway. This
            field will have a null value if the card is not associated with
            any bundle of IncludeBundleDetails in request is false. If the
            search is based on a bundle Id, the same will be returned.
        medium_type_id (int): Id of the medium type identifier. Example: 1,2,4
            Full list below: 1 - Fuel Card 2 - Fuel Card with EV 4 - Fuel Card
            and Key fob Card 5 - Key fob 6 - Virtual Card 7 - NPII Token 8 –
            Smartpay
        medium_type (str): Name of the medium type identifier.    Example:
            Fuel Card, Fuel Card with EV, Key fob    Full list below:  1 -
            Fuel Card  2 - Fuel Card with EV  4 - Fuel Card and Key fob Card 
            5 - Key fob  6 - Virtual Card  7 - NPII Token  8 - Smartpay

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "card_id": 'CardId',
        "pan": 'PAN',
        "expiry_date": 'ExpiryDate',
        "status_id": 'StatusId',
        "status_description": 'StatusDescription',
        "driver_name": 'DriverName',
        "vrn": 'VRN',
        "issue_date": 'IssueDate',
        "issue_number": 'IssueNumber',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "account_name": 'AccountName',
        "account_short_name": 'AccountShortName',
        "currency_code": 'CurrencyCode',
        "col_co_currency_code": 'ColCoCurrencyCode',
        "col_co_currency_symbol": 'ColCoCurrencySymbol',
        "restriction_currency_code": 'RestrictionCurrencyCode',
        "restriction_currency_symbol": 'RestrictionCurrencySymbol',
        "purchase_category_id": 'PurchaseCategoryId',
        "purchase_category_code": 'PurchaseCategoryCode',
        "purchase_category_name": 'PurchaseCategoryName',
        "is_superseded": 'IsSuperseded',
        "is_virtual_card": 'IsVirtualCard',
        "is_national": 'IsNational',
        "is_international": 'IsInternational',
        "is_crt": 'IsCRT',
        "is_fleet": 'IsFleet',
        "is_shell_sites_only": 'IsShellSitesOnly',
        "is_partner_sites_included": 'IsPartnerSitesIncluded',
        "card_type_id": 'CardTypeId',
        "card_type_code": 'CardTypeCode',
        "card_type_name": 'CardTypeName',
        "bundle_id": 'BundleId',
        "medium_type_id": 'MediumTypeID',
        "medium_type": 'MediumType'
    }

    _optionals = [
        'card_id',
        'pan',
        'expiry_date',
        'status_id',
        'status_description',
        'driver_name',
        'vrn',
        'issue_date',
        'issue_number',
        'account_id',
        'account_number',
        'account_name',
        'account_short_name',
        'currency_code',
        'col_co_currency_code',
        'col_co_currency_symbol',
        'restriction_currency_code',
        'restriction_currency_symbol',
        'purchase_category_id',
        'purchase_category_code',
        'purchase_category_name',
        'is_superseded',
        'is_virtual_card',
        'is_national',
        'is_international',
        'is_crt',
        'is_fleet',
        'is_shell_sites_only',
        'is_partner_sites_included',
        'card_type_id',
        'card_type_code',
        'card_type_name',
        'bundle_id',
        'medium_type_id',
        'medium_type',
    ]

    def __init__(self,
                 card_id=APIHelper.SKIP,
                 pan=APIHelper.SKIP,
                 expiry_date=APIHelper.SKIP,
                 status_id=APIHelper.SKIP,
                 status_description=APIHelper.SKIP,
                 driver_name=APIHelper.SKIP,
                 vrn=APIHelper.SKIP,
                 issue_date=APIHelper.SKIP,
                 issue_number=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 account_short_name=APIHelper.SKIP,
                 currency_code=APIHelper.SKIP,
                 col_co_currency_code=APIHelper.SKIP,
                 col_co_currency_symbol=APIHelper.SKIP,
                 restriction_currency_code=APIHelper.SKIP,
                 restriction_currency_symbol=APIHelper.SKIP,
                 purchase_category_id=APIHelper.SKIP,
                 purchase_category_code=APIHelper.SKIP,
                 purchase_category_name=APIHelper.SKIP,
                 is_superseded=APIHelper.SKIP,
                 is_virtual_card=APIHelper.SKIP,
                 is_national=APIHelper.SKIP,
                 is_international=APIHelper.SKIP,
                 is_crt=APIHelper.SKIP,
                 is_fleet=APIHelper.SKIP,
                 is_shell_sites_only=APIHelper.SKIP,
                 is_partner_sites_included=APIHelper.SKIP,
                 card_type_id=APIHelper.SKIP,
                 card_type_code=APIHelper.SKIP,
                 card_type_name=APIHelper.SKIP,
                 bundle_id=APIHelper.SKIP,
                 medium_type_id=APIHelper.SKIP,
                 medium_type=APIHelper.SKIP):
        """Constructor for the RestrictionCardList class"""

        # Initialize members of the class
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if pan is not APIHelper.SKIP:
            self.pan = pan 
        if expiry_date is not APIHelper.SKIP:
            self.expiry_date = expiry_date 
        if status_id is not APIHelper.SKIP:
            self.status_id = status_id 
        if status_description is not APIHelper.SKIP:
            self.status_description = status_description 
        if driver_name is not APIHelper.SKIP:
            self.driver_name = driver_name 
        if vrn is not APIHelper.SKIP:
            self.vrn = vrn 
        if issue_date is not APIHelper.SKIP:
            self.issue_date = issue_date 
        if issue_number is not APIHelper.SKIP:
            self.issue_number = issue_number 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if account_short_name is not APIHelper.SKIP:
            self.account_short_name = account_short_name 
        if currency_code is not APIHelper.SKIP:
            self.currency_code = currency_code 
        if col_co_currency_code is not APIHelper.SKIP:
            self.col_co_currency_code = col_co_currency_code 
        if col_co_currency_symbol is not APIHelper.SKIP:
            self.col_co_currency_symbol = col_co_currency_symbol 
        if restriction_currency_code is not APIHelper.SKIP:
            self.restriction_currency_code = restriction_currency_code 
        if restriction_currency_symbol is not APIHelper.SKIP:
            self.restriction_currency_symbol = restriction_currency_symbol 
        if purchase_category_id is not APIHelper.SKIP:
            self.purchase_category_id = purchase_category_id 
        if purchase_category_code is not APIHelper.SKIP:
            self.purchase_category_code = purchase_category_code 
        if purchase_category_name is not APIHelper.SKIP:
            self.purchase_category_name = purchase_category_name 
        if is_superseded is not APIHelper.SKIP:
            self.is_superseded = is_superseded 
        if is_virtual_card is not APIHelper.SKIP:
            self.is_virtual_card = is_virtual_card 
        if is_national is not APIHelper.SKIP:
            self.is_national = is_national 
        if is_international is not APIHelper.SKIP:
            self.is_international = is_international 
        if is_crt is not APIHelper.SKIP:
            self.is_crt = is_crt 
        if is_fleet is not APIHelper.SKIP:
            self.is_fleet = is_fleet 
        if is_shell_sites_only is not APIHelper.SKIP:
            self.is_shell_sites_only = is_shell_sites_only 
        if is_partner_sites_included is not APIHelper.SKIP:
            self.is_partner_sites_included = is_partner_sites_included 
        if card_type_id is not APIHelper.SKIP:
            self.card_type_id = card_type_id 
        if card_type_code is not APIHelper.SKIP:
            self.card_type_code = card_type_code 
        if card_type_name is not APIHelper.SKIP:
            self.card_type_name = card_type_name 
        if bundle_id is not APIHelper.SKIP:
            self.bundle_id = bundle_id 
        if medium_type_id is not APIHelper.SKIP:
            self.medium_type_id = medium_type_id 
        if medium_type is not APIHelper.SKIP:
            self.medium_type = medium_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        card_id = dictionary.get("CardId") if dictionary.get("CardId") else APIHelper.SKIP
        pan = dictionary.get("PAN") if dictionary.get("PAN") else APIHelper.SKIP
        expiry_date = dictionary.get("ExpiryDate") if dictionary.get("ExpiryDate") else APIHelper.SKIP
        status_id = dictionary.get("StatusId") if dictionary.get("StatusId") else APIHelper.SKIP
        status_description = dictionary.get("StatusDescription") if dictionary.get("StatusDescription") else APIHelper.SKIP
        driver_name = dictionary.get("DriverName") if dictionary.get("DriverName") else APIHelper.SKIP
        vrn = dictionary.get("VRN") if dictionary.get("VRN") else APIHelper.SKIP
        issue_date = dictionary.get("IssueDate") if dictionary.get("IssueDate") else APIHelper.SKIP
        issue_number = dictionary.get("IssueNumber") if dictionary.get("IssueNumber") else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else APIHelper.SKIP
        account_name = dictionary.get("AccountName") if dictionary.get("AccountName") else APIHelper.SKIP
        account_short_name = dictionary.get("AccountShortName") if dictionary.get("AccountShortName") else APIHelper.SKIP
        currency_code = dictionary.get("CurrencyCode") if dictionary.get("CurrencyCode") else APIHelper.SKIP
        col_co_currency_code = dictionary.get("ColCoCurrencyCode") if dictionary.get("ColCoCurrencyCode") else APIHelper.SKIP
        col_co_currency_symbol = dictionary.get("ColCoCurrencySymbol") if dictionary.get("ColCoCurrencySymbol") else APIHelper.SKIP
        restriction_currency_code = dictionary.get("RestrictionCurrencyCode") if dictionary.get("RestrictionCurrencyCode") else APIHelper.SKIP
        restriction_currency_symbol = dictionary.get("RestrictionCurrencySymbol") if dictionary.get("RestrictionCurrencySymbol") else APIHelper.SKIP
        purchase_category_id = dictionary.get("PurchaseCategoryId") if dictionary.get("PurchaseCategoryId") else APIHelper.SKIP
        purchase_category_code = dictionary.get("PurchaseCategoryCode") if dictionary.get("PurchaseCategoryCode") else APIHelper.SKIP
        purchase_category_name = dictionary.get("PurchaseCategoryName") if dictionary.get("PurchaseCategoryName") else APIHelper.SKIP
        is_superseded = dictionary.get("IsSuperseded") if "IsSuperseded" in dictionary.keys() else APIHelper.SKIP
        is_virtual_card = dictionary.get("IsVirtualCard") if "IsVirtualCard" in dictionary.keys() else APIHelper.SKIP
        is_national = dictionary.get("IsNational") if "IsNational" in dictionary.keys() else APIHelper.SKIP
        is_international = dictionary.get("IsInternational") if "IsInternational" in dictionary.keys() else APIHelper.SKIP
        is_crt = dictionary.get("IsCRT") if "IsCRT" in dictionary.keys() else APIHelper.SKIP
        is_fleet = dictionary.get("IsFleet") if "IsFleet" in dictionary.keys() else APIHelper.SKIP
        is_shell_sites_only = dictionary.get("IsShellSitesOnly") if "IsShellSitesOnly" in dictionary.keys() else APIHelper.SKIP
        is_partner_sites_included = dictionary.get("IsPartnerSitesIncluded") if "IsPartnerSitesIncluded" in dictionary.keys() else APIHelper.SKIP
        card_type_id = dictionary.get("CardTypeId") if dictionary.get("CardTypeId") else APIHelper.SKIP
        card_type_code = dictionary.get("CardTypeCode") if dictionary.get("CardTypeCode") else APIHelper.SKIP
        card_type_name = dictionary.get("CardTypeName") if dictionary.get("CardTypeName") else APIHelper.SKIP
        bundle_id = dictionary.get("BundleId") if dictionary.get("BundleId") else APIHelper.SKIP
        medium_type_id = dictionary.get("MediumTypeID") if dictionary.get("MediumTypeID") else APIHelper.SKIP
        medium_type = dictionary.get("MediumType") if dictionary.get("MediumType") else APIHelper.SKIP
        # Return an object of this model
        return cls(card_id,
                   pan,
                   expiry_date,
                   status_id,
                   status_description,
                   driver_name,
                   vrn,
                   issue_date,
                   issue_number,
                   account_id,
                   account_number,
                   account_name,
                   account_short_name,
                   currency_code,
                   col_co_currency_code,
                   col_co_currency_symbol,
                   restriction_currency_code,
                   restriction_currency_symbol,
                   purchase_category_id,
                   purchase_category_code,
                   purchase_category_name,
                   is_superseded,
                   is_virtual_card,
                   is_national,
                   is_international,
                   is_crt,
                   is_fleet,
                   is_shell_sites_only,
                   is_partner_sites_included,
                   card_type_id,
                   card_type_code,
                   card_type_name,
                   bundle_id,
                   medium_type_id,
                   medium_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!r}, '
                f'pan={(self.pan if hasattr(self, "pan") else None)!r}, '
                f'expiry_date={(self.expiry_date if hasattr(self, "expiry_date") else None)!r}, '
                f'status_id={(self.status_id if hasattr(self, "status_id") else None)!r}, '
                f'status_description={(self.status_description if hasattr(self, "status_description") else None)!r}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!r}, '
                f'vrn={(self.vrn if hasattr(self, "vrn") else None)!r}, '
                f'issue_date={(self.issue_date if hasattr(self, "issue_date") else None)!r}, '
                f'issue_number={(self.issue_number if hasattr(self, "issue_number") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!r}, '
                f'account_short_name={(self.account_short_name if hasattr(self, "account_short_name") else None)!r}, '
                f'currency_code={(self.currency_code if hasattr(self, "currency_code") else None)!r}, '
                f'col_co_currency_code={(self.col_co_currency_code if hasattr(self, "col_co_currency_code") else None)!r}, '
                f'col_co_currency_symbol={(self.col_co_currency_symbol if hasattr(self, "col_co_currency_symbol") else None)!r}, '
                f'restriction_currency_code={(self.restriction_currency_code if hasattr(self, "restriction_currency_code") else None)!r}, '
                f'restriction_currency_symbol={(self.restriction_currency_symbol if hasattr(self, "restriction_currency_symbol") else None)!r}, '
                f'purchase_category_id={(self.purchase_category_id if hasattr(self, "purchase_category_id") else None)!r}, '
                f'purchase_category_code={(self.purchase_category_code if hasattr(self, "purchase_category_code") else None)!r}, '
                f'purchase_category_name={(self.purchase_category_name if hasattr(self, "purchase_category_name") else None)!r}, '
                f'is_superseded={(self.is_superseded if hasattr(self, "is_superseded") else None)!r}, '
                f'is_virtual_card={(self.is_virtual_card if hasattr(self, "is_virtual_card") else None)!r}, '
                f'is_national={(self.is_national if hasattr(self, "is_national") else None)!r}, '
                f'is_international={(self.is_international if hasattr(self, "is_international") else None)!r}, '
                f'is_crt={(self.is_crt if hasattr(self, "is_crt") else None)!r}, '
                f'is_fleet={(self.is_fleet if hasattr(self, "is_fleet") else None)!r}, '
                f'is_shell_sites_only={(self.is_shell_sites_only if hasattr(self, "is_shell_sites_only") else None)!r}, '
                f'is_partner_sites_included={(self.is_partner_sites_included if hasattr(self, "is_partner_sites_included") else None)!r}, '
                f'card_type_id={(self.card_type_id if hasattr(self, "card_type_id") else None)!r}, '
                f'card_type_code={(self.card_type_code if hasattr(self, "card_type_code") else None)!r}, '
                f'card_type_name={(self.card_type_name if hasattr(self, "card_type_name") else None)!r}, '
                f'bundle_id={(self.bundle_id if hasattr(self, "bundle_id") else None)!r}, '
                f'medium_type_id={(self.medium_type_id if hasattr(self, "medium_type_id") else None)!r}, '
                f'medium_type={(self.medium_type if hasattr(self, "medium_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!s}, '
                f'pan={(self.pan if hasattr(self, "pan") else None)!s}, '
                f'expiry_date={(self.expiry_date if hasattr(self, "expiry_date") else None)!s}, '
                f'status_id={(self.status_id if hasattr(self, "status_id") else None)!s}, '
                f'status_description={(self.status_description if hasattr(self, "status_description") else None)!s}, '
                f'driver_name={(self.driver_name if hasattr(self, "driver_name") else None)!s}, '
                f'vrn={(self.vrn if hasattr(self, "vrn") else None)!s}, '
                f'issue_date={(self.issue_date if hasattr(self, "issue_date") else None)!s}, '
                f'issue_number={(self.issue_number if hasattr(self, "issue_number") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'account_name={(self.account_name if hasattr(self, "account_name") else None)!s}, '
                f'account_short_name={(self.account_short_name if hasattr(self, "account_short_name") else None)!s}, '
                f'currency_code={(self.currency_code if hasattr(self, "currency_code") else None)!s}, '
                f'col_co_currency_code={(self.col_co_currency_code if hasattr(self, "col_co_currency_code") else None)!s}, '
                f'col_co_currency_symbol={(self.col_co_currency_symbol if hasattr(self, "col_co_currency_symbol") else None)!s}, '
                f'restriction_currency_code={(self.restriction_currency_code if hasattr(self, "restriction_currency_code") else None)!s}, '
                f'restriction_currency_symbol={(self.restriction_currency_symbol if hasattr(self, "restriction_currency_symbol") else None)!s}, '
                f'purchase_category_id={(self.purchase_category_id if hasattr(self, "purchase_category_id") else None)!s}, '
                f'purchase_category_code={(self.purchase_category_code if hasattr(self, "purchase_category_code") else None)!s}, '
                f'purchase_category_name={(self.purchase_category_name if hasattr(self, "purchase_category_name") else None)!s}, '
                f'is_superseded={(self.is_superseded if hasattr(self, "is_superseded") else None)!s}, '
                f'is_virtual_card={(self.is_virtual_card if hasattr(self, "is_virtual_card") else None)!s}, '
                f'is_national={(self.is_national if hasattr(self, "is_national") else None)!s}, '
                f'is_international={(self.is_international if hasattr(self, "is_international") else None)!s}, '
                f'is_crt={(self.is_crt if hasattr(self, "is_crt") else None)!s}, '
                f'is_fleet={(self.is_fleet if hasattr(self, "is_fleet") else None)!s}, '
                f'is_shell_sites_only={(self.is_shell_sites_only if hasattr(self, "is_shell_sites_only") else None)!s}, '
                f'is_partner_sites_included={(self.is_partner_sites_included if hasattr(self, "is_partner_sites_included") else None)!s}, '
                f'card_type_id={(self.card_type_id if hasattr(self, "card_type_id") else None)!s}, '
                f'card_type_code={(self.card_type_code if hasattr(self, "card_type_code") else None)!s}, '
                f'card_type_name={(self.card_type_name if hasattr(self, "card_type_name") else None)!s}, '
                f'bundle_id={(self.bundle_id if hasattr(self, "bundle_id") else None)!s}, '
                f'medium_type_id={(self.medium_type_id if hasattr(self, "medium_type_id") else None)!s}, '
                f'medium_type={(self.medium_type if hasattr(self, "medium_type") else None)!s})')
