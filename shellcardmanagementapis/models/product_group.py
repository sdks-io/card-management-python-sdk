# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.product_all_of_0 import ProductAllOf0


class ProductGroup(object):

    """Implementation of the 'ProductGroup' model.

    Attributes:
        reference_id (int): Referenced Purchase Category Id Example: 123, 124
        product_group_id (str): Product group ID
        name (str): Product group name
        is_default (bool): Indicates whether this is a default Product Group
            at ColCo level or not. Note: The Customer level default settings
            are not considered here.
        is_fuel_type (bool): Identifies the type of Product group.  true - if
            it is a Fuel type Product group   false - if it is Non-Fuel type
        products (List[ProductAllOf0]): The model property of type
            List[ProductAllOf0].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "reference_id": 'ReferenceId',
        "product_group_id": 'ProductGroupId',
        "name": 'Name',
        "is_default": 'IsDefault',
        "is_fuel_type": 'IsFuelType',
        "products": 'Products'
    }

    _optionals = [
        'reference_id',
        'product_group_id',
        'name',
        'is_default',
        'is_fuel_type',
        'products',
    ]

    def __init__(self,
                 reference_id=APIHelper.SKIP,
                 product_group_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 is_default=APIHelper.SKIP,
                 is_fuel_type=APIHelper.SKIP,
                 products=APIHelper.SKIP):
        """Constructor for the ProductGroup class"""

        # Initialize members of the class
        if reference_id is not APIHelper.SKIP:
            self.reference_id = reference_id 
        if product_group_id is not APIHelper.SKIP:
            self.product_group_id = product_group_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if is_default is not APIHelper.SKIP:
            self.is_default = is_default 
        if is_fuel_type is not APIHelper.SKIP:
            self.is_fuel_type = is_fuel_type 
        if products is not APIHelper.SKIP:
            self.products = products 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        reference_id = dictionary.get("ReferenceId") if dictionary.get("ReferenceId") else APIHelper.SKIP
        product_group_id = dictionary.get("ProductGroupId") if dictionary.get("ProductGroupId") else APIHelper.SKIP
        name = dictionary.get("Name") if dictionary.get("Name") else APIHelper.SKIP
        is_default = dictionary.get("IsDefault") if "IsDefault" in dictionary.keys() else APIHelper.SKIP
        is_fuel_type = dictionary.get("IsFuelType") if "IsFuelType" in dictionary.keys() else APIHelper.SKIP
        products = None
        if dictionary.get('Products') is not None:
            products = [ProductAllOf0.from_dictionary(x) for x in dictionary.get('Products')]
        else:
            products = APIHelper.SKIP
        # Return an object of this model
        return cls(reference_id,
                   product_group_id,
                   name,
                   is_default,
                   is_fuel_type,
                   products)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'reference_id={(self.reference_id if hasattr(self, "reference_id") else None)!r}, '
                f'product_group_id={(self.product_group_id if hasattr(self, "product_group_id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'is_default={(self.is_default if hasattr(self, "is_default") else None)!r}, '
                f'is_fuel_type={(self.is_fuel_type if hasattr(self, "is_fuel_type") else None)!r}, '
                f'products={(self.products if hasattr(self, "products") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'reference_id={(self.reference_id if hasattr(self, "reference_id") else None)!s}, '
                f'product_group_id={(self.product_group_id if hasattr(self, "product_group_id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'is_default={(self.is_default if hasattr(self, "is_default") else None)!s}, '
                f'is_fuel_type={(self.is_fuel_type if hasattr(self, "is_fuel_type") else None)!s}, '
                f'products={(self.products if hasattr(self, "products") else None)!s})')
