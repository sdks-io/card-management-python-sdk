# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.country_restriction import CountryRestriction
from shellcardmanagementapis.models.network_restriction import NetworkRestriction
from shellcardmanagementapis.models.partner_site_restriction import PartnerSiteRestriction
from shellcardmanagementapis.models.shell_site_restriction import ShellSiteRestriction


class LocationRestriction(object):

    """Implementation of the 'LocationRestriction' model.

    Attributes:
        country_restrictions (CountryRestriction): The model property of type
            CountryRestriction.
        network_restrictions (List[NetworkRestriction]): The model property of
            type List[NetworkRestriction].
        shell_site_restrictions (List[ShellSiteRestriction]): The model
            property of type List[ShellSiteRestriction].
        partner_site_restrictions (List[PartnerSiteRestriction]): The model
            property of type List[PartnerSiteRestriction].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_restrictions": 'CountryRestrictions',
        "network_restrictions": 'NetworkRestrictions',
        "shell_site_restrictions": 'ShellSiteRestrictions',
        "partner_site_restrictions": 'PartnerSiteRestrictions'
    }

    _optionals = [
        'country_restrictions',
        'network_restrictions',
        'shell_site_restrictions',
        'partner_site_restrictions',
    ]

    def __init__(self,
                 country_restrictions=APIHelper.SKIP,
                 network_restrictions=APIHelper.SKIP,
                 shell_site_restrictions=APIHelper.SKIP,
                 partner_site_restrictions=APIHelper.SKIP):
        """Constructor for the LocationRestriction class"""

        # Initialize members of the class
        if country_restrictions is not APIHelper.SKIP:
            self.country_restrictions = country_restrictions 
        if network_restrictions is not APIHelper.SKIP:
            self.network_restrictions = network_restrictions 
        if shell_site_restrictions is not APIHelper.SKIP:
            self.shell_site_restrictions = shell_site_restrictions 
        if partner_site_restrictions is not APIHelper.SKIP:
            self.partner_site_restrictions = partner_site_restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country_restrictions = CountryRestriction.from_dictionary(dictionary.get('CountryRestrictions')) if 'CountryRestrictions' in dictionary.keys() else APIHelper.SKIP
        network_restrictions = None
        if dictionary.get('NetworkRestrictions') is not None:
            network_restrictions = [NetworkRestriction.from_dictionary(x) for x in dictionary.get('NetworkRestrictions')]
        else:
            network_restrictions = APIHelper.SKIP
        shell_site_restrictions = None
        if dictionary.get('ShellSiteRestrictions') is not None:
            shell_site_restrictions = [ShellSiteRestriction.from_dictionary(x) for x in dictionary.get('ShellSiteRestrictions')]
        else:
            shell_site_restrictions = APIHelper.SKIP
        partner_site_restrictions = None
        if dictionary.get('PartnerSiteRestrictions') is not None:
            partner_site_restrictions = [PartnerSiteRestriction.from_dictionary(x) for x in dictionary.get('PartnerSiteRestrictions')]
        else:
            partner_site_restrictions = APIHelper.SKIP
        # Return an object of this model
        return cls(country_restrictions,
                   network_restrictions,
                   shell_site_restrictions,
                   partner_site_restrictions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'country_restrictions={(self.country_restrictions if hasattr(self, "country_restrictions") else None)!r}, '
                f'network_restrictions={(self.network_restrictions if hasattr(self, "network_restrictions") else None)!r}, '
                f'shell_site_restrictions={(self.shell_site_restrictions if hasattr(self, "shell_site_restrictions") else None)!r}, '
                f'partner_site_restrictions={(self.partner_site_restrictions if hasattr(self, "partner_site_restrictions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'country_restrictions={(self.country_restrictions if hasattr(self, "country_restrictions") else None)!s}, '
                f'network_restrictions={(self.network_restrictions if hasattr(self, "network_restrictions") else None)!s}, '
                f'shell_site_restrictions={(self.shell_site_restrictions if hasattr(self, "shell_site_restrictions") else None)!s}, '
                f'partner_site_restrictions={(self.partner_site_restrictions if hasattr(self, "partner_site_restrictions") else None)!s})')
