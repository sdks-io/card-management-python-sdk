# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.accounts import Accounts
from shellcardmanagementapis.models.restriction_search_card_request_filters_cards_items import RestrictionSearchCardRequestFiltersCardsItems


class RestrictionSearchCardRequestFilters(object):

    """Implementation of the 'RestrictionSearchCardRequestFilters' model.

    TODO: type model description here.

    Attributes:
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.   Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.  Example:  86 for Philippines  5
            for UK
        col_co_id (int): Collecting Company Id (in GFN) of the selected payer.
            Optional if ColCoCode is passed else Mandatory.  Example:  1 for
            Philippines  5 for UK
        payer_number (str): Payer Number of the selected payer.  Optional if
            PayerId is passed else Mandatory  Example: GB000000123
        payer_id (int): Payer Id  of the selected payer.  Optional if
            PayerNumber is passed else Mandatory  Example: 123456
        accounts (Accounts): TODO: type description here.
        bundle_id (str): Identifier of the Card bundle in Gateway.  Optional
            if cards list is given, else mandatory.
        cards (List[RestrictionSearchCardRequestFiltersCardsItems]): TODO:
            type description here.
        include_location_restrictions (bool): Whether to include location
            restriction of the cards in the response
        include_inherited_limits (bool): When True: service will return the
            inherited values for the usage limits (from card-program or
            account as available) when it is not overridden on the card.
        include_bundle_details (bool): When the value is True, API will return
            bundle Id associated with cards in the response, if available.  
            Note: Use ‘Null’ or ‘False’ for optimum performance. A delay in
            response is expected when set to ‘True’.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "payer_number": 'PayerNumber',
        "payer_id": 'PayerId',
        "accounts": 'Accounts',
        "bundle_id": 'BundleId',
        "cards": 'Cards',
        "include_location_restrictions": 'IncludeLocationRestrictions',
        "include_inherited_limits": 'IncludeInheritedLimits',
        "include_bundle_details": 'IncludeBundleDetails'
    }

    _optionals = [
        'col_co_code',
        'col_co_id',
        'payer_number',
        'payer_id',
        'accounts',
        'bundle_id',
        'cards',
        'include_location_restrictions',
        'include_inherited_limits',
        'include_bundle_details',
    ]

    _nullables = [
        'bundle_id',
    ]

    def __init__(self,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 accounts=APIHelper.SKIP,
                 bundle_id=APIHelper.SKIP,
                 cards=APIHelper.SKIP,
                 include_location_restrictions=False,
                 include_inherited_limits=False,
                 include_bundle_details=False):
        """Constructor for the RestrictionSearchCardRequestFilters class"""

        # Initialize members of the class
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if accounts is not APIHelper.SKIP:
            self.accounts = accounts 
        if bundle_id is not APIHelper.SKIP:
            self.bundle_id = bundle_id 
        if cards is not APIHelper.SKIP:
            self.cards = cards 
        self.include_location_restrictions = include_location_restrictions 
        self.include_inherited_limits = include_inherited_limits 
        self.include_bundle_details = include_bundle_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        col_co_code = dictionary.get("ColCoCode") if dictionary.get("ColCoCode") else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if dictionary.get("PayerNumber") else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        accounts = Accounts.from_dictionary(dictionary.get('Accounts')) if 'Accounts' in dictionary.keys() else APIHelper.SKIP
        bundle_id = dictionary.get("BundleId") if "BundleId" in dictionary.keys() else APIHelper.SKIP
        cards = None
        if dictionary.get('Cards') is not None:
            cards = [RestrictionSearchCardRequestFiltersCardsItems.from_dictionary(x) for x in dictionary.get('Cards')]
        else:
            cards = APIHelper.SKIP
        include_location_restrictions = dictionary.get("IncludeLocationRestrictions") if dictionary.get("IncludeLocationRestrictions") else False
        include_inherited_limits = dictionary.get("IncludeInheritedLimits") if dictionary.get("IncludeInheritedLimits") else False
        include_bundle_details = dictionary.get("IncludeBundleDetails") if dictionary.get("IncludeBundleDetails") else False
        # Return an object of this model
        return cls(col_co_code,
                   col_co_id,
                   payer_number,
                   payer_id,
                   accounts,
                   bundle_id,
                   cards,
                   include_location_restrictions,
                   include_inherited_limits,
                   include_bundle_details)
