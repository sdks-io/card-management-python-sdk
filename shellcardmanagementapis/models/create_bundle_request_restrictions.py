# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.day_time_restrictions import DayTimeRestrictions
from shellcardmanagementapis.models.location_restrictions import LocationRestrictions
from shellcardmanagementapis.models.product_restrictions import ProductRestrictions
from shellcardmanagementapis.models.usage_restrictions import UsageRestrictions


class CreateBundleRequestRestrictions(object):

    """Implementation of the 'CreateBundleRequestRestrictions' model.

    Restrictions to be applied on the bundle.
    Mandatory

    Attributes:
        usage_restriction_action (str): Usage restrictions such as value,
            volume and transaction count restricted per day, week, month,
            annum, lifetime and transaction to be applied on the bundle. 
            Mandatory
        day_time_restriction_action (str): The value indicates what actions to
            be performed with respect to day time restriction.   Mandatory 
            Allowed values –  • Add: Apply the given restriction on the
            bundle.  • Default: No Day/Time restriction will be applied on the
            bundle in Gateway.
        location_restriction_action (str): The value indicates what actions to
            be performed with respect to location restriction.   Mandatory 
            Allowed values –  • Add: Apply the given restriction on the
            bundle.  • Default: No location restriction will be applied on the
            bundle in Gateway.
        day_time_restrictions (DayTimeRestrictions): Day/time restrictions
            such as weekdays and time range to be applied on the bundle. 
            Mandatory if respective action is set as “Add”.  The details of
            DayTimeRestriction entity is given below.
        location_restrictions (LocationRestrictions): Location restrictions to
            be applied on the bundle which either allows or restricts using
            the cards, which are under the bundle, in the specified locations.
            Mandatory if respective action is set as “Add”.  Details of
            location restrictions are given below.
        product_restrictions (ProductRestrictions): TODO: type description
            here.
        usage_restrictions (UsageRestrictions): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "usage_restriction_action": 'UsageRestrictionAction',
        "day_time_restriction_action": 'DayTimeRestrictionAction',
        "location_restriction_action": 'LocationRestrictionAction',
        "day_time_restrictions": 'DayTimeRestrictions',
        "location_restrictions": 'LocationRestrictions',
        "product_restrictions": 'ProductRestrictions',
        "usage_restrictions": 'UsageRestrictions'
    }

    _optionals = [
        'day_time_restrictions',
        'location_restrictions',
        'product_restrictions',
        'usage_restrictions',
    ]

    _nullables = [
        'usage_restriction_action',
        'day_time_restriction_action',
    ]

    def __init__(self,
                 usage_restriction_action=None,
                 day_time_restriction_action=None,
                 location_restriction_action=None,
                 day_time_restrictions=APIHelper.SKIP,
                 location_restrictions=APIHelper.SKIP,
                 product_restrictions=APIHelper.SKIP,
                 usage_restrictions=APIHelper.SKIP):
        """Constructor for the CreateBundleRequestRestrictions class"""

        # Initialize members of the class
        self.usage_restriction_action = usage_restriction_action 
        self.day_time_restriction_action = day_time_restriction_action 
        self.location_restriction_action = location_restriction_action 
        if day_time_restrictions is not APIHelper.SKIP:
            self.day_time_restrictions = day_time_restrictions 
        if location_restrictions is not APIHelper.SKIP:
            self.location_restrictions = location_restrictions 
        if product_restrictions is not APIHelper.SKIP:
            self.product_restrictions = product_restrictions 
        if usage_restrictions is not APIHelper.SKIP:
            self.usage_restrictions = usage_restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        usage_restriction_action = dictionary.get("UsageRestrictionAction") if dictionary.get("UsageRestrictionAction") else None
        day_time_restriction_action = dictionary.get("DayTimeRestrictionAction") if dictionary.get("DayTimeRestrictionAction") else None
        location_restriction_action = dictionary.get("LocationRestrictionAction") if dictionary.get("LocationRestrictionAction") else None
        day_time_restrictions = DayTimeRestrictions.from_dictionary(dictionary.get('DayTimeRestrictions')) if 'DayTimeRestrictions' in dictionary.keys() else APIHelper.SKIP
        location_restrictions = LocationRestrictions.from_dictionary(dictionary.get('LocationRestrictions')) if 'LocationRestrictions' in dictionary.keys() else APIHelper.SKIP
        product_restrictions = ProductRestrictions.from_dictionary(dictionary.get('ProductRestrictions')) if 'ProductRestrictions' in dictionary.keys() else APIHelper.SKIP
        usage_restrictions = UsageRestrictions.from_dictionary(dictionary.get('UsageRestrictions')) if 'UsageRestrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(usage_restriction_action,
                   day_time_restriction_action,
                   location_restriction_action,
                   day_time_restrictions,
                   location_restrictions,
                   product_restrictions,
                   usage_restrictions)
