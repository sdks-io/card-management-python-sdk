# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.card_settings import CardSettings


class UpdateCard(object):

    """Implementation of the 'UpdateCard' model.

    Request entity object for UpdateCardRequest  list

    Attributes:
        caller (str): The caller to be notified with the status of the update
            card status request. <br /> The caller will also be notified with
            the status of the replacement card order request, if any.<br />
            Mandatory, if NotifyCaller is true. <br /> Maximum field length:
            20<br /> Allowed values:<br /> - NextGenUI: This value to be used
            by next gen UI application.<br /> - Motix: This value to be used
            by MOTiX application.<br /> - FleetHubUILifeTime: This value to be
            used by Fleet Hub UI application for life time restriction
            cards.<br /> Note: The values passed in this field are case
            insensitive.
        is_replacement_chargeable (bool): True/False<br /> Optional<br /> When
            not provided will considered as default value as True.<br /> If
            passed True, the replacement card will be chargeable, else
            replacement card will not be charged.
        notify_caller (bool): True/False.<br /> Optional.<br /> Default:
            False<br /> If true, the caller would be notified back with the
            status as success or failure after the update card status request
            is processed. Notification API subscription required to use this
            feature , please refer API documetation for more details
        notify_caller_on_sync (bool): True/False.<br /> Optional.<br />
            Default: False<br /> If true, the caller would be notified back
            with the status as success or failed after the replacement card is
            synced with Gateway, if a replacement card was requested.
        order_card_replacement (bool): True/False.<br /> Pass True if a
            replacement order card request is to be placed, else False.<br />
            Optional.Default value False.<br /> Replacement of a card is only
            applicable when the target status requested is either permanently
            Block or Damaged for the existing card.<br /> Request for
            Replacement card will be placed only when the Block card or Block
            damaged card request is successfully placed.<br /> The Replacement
            card request will be processed only when the permanent Block card
            request is successfully processed. <br /> In case of damaged card
            request, the replacement card request will be processed
            immediately.
        card_settings (CardSettings): TODO: type description here.
        reason_id (int): Reason id for updating the card status. Either Reason
            ID or Text is madatory when TargetStatus is ‘Block’ or ‘Damaged’.
            Else ignored. Possible values: 1 (Lost) 2 (Stolen) 3 (Card no
            longer required)   <br>When passed, the reason Id will be mapped
            to allowed reason IDs configured for the card type of the card. If
            the given reason Id is not allowed for certain card types, then
            the request will be rejected as invalid ResonId
        reason_text (str): Reason text for updating the card status.  Possible
            Values:  1) Lost  2) Stolen  3) Card no longer required   
            Optional – However, either Reason ID or Text is madatory when
            TargetStatus is ‘Block’ or ‘Damaged’. Else, Ignored.  When Reason
            Text is passed and the Target Status is either Block or Damaged,
            the text will be validated with the allowed list of values
            configured for the card type of the card. If the text is not
            allowed, request will be rejected as invaid ResonText.   Note: 
            ‘Customer blocked’ will be used as the reason for ‘Temporary
            Block’.
        target_status (int): The list of cards passed in ‘Cards’ parameter
            will be updated to this status.<br /> Mandatory.<br /> Allowed
            values –<br /> - TemporaryBlock<br /> - Unblock<br /> - Block<br
            /> - Damaged<br />
        account_id (int): Account Id of the customer.<br /> Optional if
            AccountNumber is passed, else Mandatory.
        account_number (str): Account Number of the customer.<br /> Optional
            if AccountId is passed, else Mandatory.
        card_expiry_date (str): Expiry date of the card.<br /> Mandatory if
            PAN is passed, else optional.<br /> Format: yyyyMMdd
        card_id (int): Card Id of the card.<br /> Optional if PAN is passed,
            else Mandatory.
        col_co_code (int): Collecting company code of the customer. <br />
            Optional if ColCoId is passed, else Mandatory.<br />
        col_co_id (int): Collecting company id of the customer. <br />
            Optional if ColCoCode is passed, else Mandatory.<br />
        pan (str): PAN of the card.<br /> Optional if CardId is passed, else
            Mandatory.<br />
        payer_id (int): Payer id of the customer.<br /> Optional if
            PayerNumber is passed, else Mandatory.
        payer_number (str): PayerNumber of the customer.<br /> Optional if
            PayerId is passed, else Mandatory.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "caller": 'Caller',
        "is_replacement_chargeable": 'IsReplacementChargeable',
        "notify_caller": 'NotifyCaller',
        "notify_caller_on_sync": 'NotifyCallerOnSync',
        "order_card_replacement": 'OrderCardReplacement',
        "card_settings": 'CardSettings',
        "reason_id": 'ReasonId',
        "reason_text": 'ReasonText',
        "target_status": 'TargetStatus',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "card_expiry_date": 'CardExpiryDate',
        "card_id": 'CardId',
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "pan": 'PAN',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber'
    }

    _optionals = [
        'caller',
        'is_replacement_chargeable',
        'notify_caller',
        'notify_caller_on_sync',
        'order_card_replacement',
        'card_settings',
        'reason_id',
        'reason_text',
        'target_status',
        'account_id',
        'account_number',
        'card_expiry_date',
        'card_id',
        'col_co_code',
        'col_co_id',
        'pan',
        'payer_id',
        'payer_number',
    ]

    _nullables = [
        'caller',
        'reason_text',
        'target_status',
        'account_id',
        'account_number',
        'card_expiry_date',
        'card_id',
        'col_co_code',
        'col_co_id',
        'pan',
        'payer_id',
        'payer_number',
    ]

    def __init__(self,
                 caller=APIHelper.SKIP,
                 is_replacement_chargeable=APIHelper.SKIP,
                 notify_caller=APIHelper.SKIP,
                 notify_caller_on_sync=APIHelper.SKIP,
                 order_card_replacement=APIHelper.SKIP,
                 card_settings=APIHelper.SKIP,
                 reason_id=APIHelper.SKIP,
                 reason_text=APIHelper.SKIP,
                 target_status=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 card_expiry_date=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 pan=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP):
        """Constructor for the UpdateCard class"""

        # Initialize members of the class
        if caller is not APIHelper.SKIP:
            self.caller = caller 
        if is_replacement_chargeable is not APIHelper.SKIP:
            self.is_replacement_chargeable = is_replacement_chargeable 
        if notify_caller is not APIHelper.SKIP:
            self.notify_caller = notify_caller 
        if notify_caller_on_sync is not APIHelper.SKIP:
            self.notify_caller_on_sync = notify_caller_on_sync 
        if order_card_replacement is not APIHelper.SKIP:
            self.order_card_replacement = order_card_replacement 
        if card_settings is not APIHelper.SKIP:
            self.card_settings = card_settings 
        if reason_id is not APIHelper.SKIP:
            self.reason_id = reason_id 
        if reason_text is not APIHelper.SKIP:
            self.reason_text = reason_text 
        if target_status is not APIHelper.SKIP:
            self.target_status = target_status 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if card_expiry_date is not APIHelper.SKIP:
            self.card_expiry_date = card_expiry_date 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if pan is not APIHelper.SKIP:
            self.pan = pan 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        caller = dictionary.get("Caller") if "Caller" in dictionary.keys() else APIHelper.SKIP
        is_replacement_chargeable = dictionary.get("IsReplacementChargeable") if "IsReplacementChargeable" in dictionary.keys() else APIHelper.SKIP
        notify_caller = dictionary.get("NotifyCaller") if "NotifyCaller" in dictionary.keys() else APIHelper.SKIP
        notify_caller_on_sync = dictionary.get("NotifyCallerOnSync") if "NotifyCallerOnSync" in dictionary.keys() else APIHelper.SKIP
        order_card_replacement = dictionary.get("OrderCardReplacement") if "OrderCardReplacement" in dictionary.keys() else APIHelper.SKIP
        card_settings = CardSettings.from_dictionary(dictionary.get('CardSettings')) if 'CardSettings' in dictionary.keys() else APIHelper.SKIP
        reason_id = dictionary.get("ReasonId") if dictionary.get("ReasonId") else APIHelper.SKIP
        reason_text = dictionary.get("ReasonText") if "ReasonText" in dictionary.keys() else APIHelper.SKIP
        target_status = dictionary.get("TargetStatus") if "TargetStatus" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        card_expiry_date = dictionary.get("CardExpiryDate") if "CardExpiryDate" in dictionary.keys() else APIHelper.SKIP
        card_id = dictionary.get("CardId") if "CardId" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        pan = dictionary.get("PAN") if "PAN" in dictionary.keys() else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if "PayerId" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(caller,
                   is_replacement_chargeable,
                   notify_caller,
                   notify_caller_on_sync,
                   order_card_replacement,
                   card_settings,
                   reason_id,
                   reason_text,
                   target_status,
                   account_id,
                   account_number,
                   card_expiry_date,
                   card_id,
                   col_co_code,
                   col_co_id,
                   pan,
                   payer_id,
                   payer_number)
