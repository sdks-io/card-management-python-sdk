# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.card_settings import CardSettings


class UpdateCard(object):

    """Implementation of the 'UpdateCard' model.

    Request entity object for UpdateCardRequest  list

    Attributes:
        caller (str): The caller to be notified with the status of the update
            card status request. <br /> The caller will also be notified with
            the status of the replacement card order request, if any.<br />
            Mandatory, if NotifyCaller is true. <br /> Maximum field length:
            20<br /> Allowed values:<br /> - NextGenUI: This value to be used
            by next gen UI application.<br /> - Motix: This value to be used
            by MOTiX application.<br /> - FleetHubUILifeTime: This value to be
            used by Fleet Hub UI application for life time restriction
            cards.<br /> Note: The values passed in this field are case
            insensitive.
        is_replacement_chargeable (bool): True/False<br /> Optional<br /> When
            not provided will considered as default value as True.<br /> If
            passed True, the replacement card will be chargeable, else
            replacement card will not be charged.
        notify_caller (bool): True/False.<br /> Optional.<br /> Default:
            False<br /> If true, the caller would be notified back with the
            status as success or failure after the update card status request
            is processed. Notification API subscription required to use this
            feature , please refer API documetation for more details
        notify_caller_on_sync (bool): True/False.<br /> Optional.<br />
            Default: False<br /> If true, the caller would be notified back
            with the status as success or failed after the replacement card is
            synced with Gateway, if a replacement card was requested.
        order_card_replacement (bool): True/False.<br /> Pass True if a
            replacement order card request is to be placed, else False.<br />
            Optional.Default value False.<br /> Replacement of a card is only
            applicable when the target status requested is either permanently
            Block or Damaged for the existing card.<br /> Request for
            Replacement card will be placed only when the Block card or Block
            damaged card request is successfully placed.<br /> The Replacement
            card request will be processed only when the permanent Block card
            request is successfully processed. <br /> In case of damaged card
            request, the replacement card request will be processed
            immediately.
        card_settings (CardSettings): The model property of type CardSettings.
        account_id (int): Account Id of the customer.<br /> Optional if
            AccountNumber is passed, else Mandatory.
        account_number (str): Account Number of the customer.<br /> Optional
            if AccountId is passed, else Mandatory.
        card_expiry_date (str): Expiry date of the card.<br /> Mandatory if
            PAN is passed, else optional.<br /> Format: yyyyMMdd
        card_id (int): Card Id of the card.<br /> Optional if PAN is passed,
            else Mandatory.
        col_co_code (int): Collecting company code of the customer. <br />
            Optional if ColCoId is passed, else Mandatory.<br />
        col_co_id (int): Collecting company id of the customer. <br />
            Optional if ColCoCode is passed, else Mandatory.<br />
        pan (str): PAN of the card.<br /> Optional if CardId is passed, else
            Mandatory.<br />
        panid (float): PANID of the card
        payer_id (int): Payer id of the customer.<br /> Optional if
            PayerNumber is passed, else Mandatory.
        payer_number (str): PayerNumber of the customer.<br /> Optional if
            PayerId is passed, else Mandatory.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "caller": 'Caller',
        "is_replacement_chargeable": 'IsReplacementChargeable',
        "notify_caller": 'NotifyCaller',
        "notify_caller_on_sync": 'NotifyCallerOnSync',
        "order_card_replacement": 'OrderCardReplacement',
        "card_settings": 'CardSettings',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "card_expiry_date": 'CardExpiryDate',
        "card_id": 'CardId',
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "pan": 'PAN',
        "panid": 'PANID',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber'
    }

    _optionals = [
        'caller',
        'is_replacement_chargeable',
        'notify_caller',
        'notify_caller_on_sync',
        'order_card_replacement',
        'card_settings',
        'account_id',
        'account_number',
        'card_expiry_date',
        'card_id',
        'col_co_code',
        'col_co_id',
        'pan',
        'panid',
        'payer_id',
        'payer_number',
    ]

    _nullables = [
        'caller',
        'account_id',
        'account_number',
        'card_expiry_date',
        'card_id',
        'col_co_code',
        'col_co_id',
        'pan',
        'panid',
        'payer_id',
        'payer_number',
    ]

    def __init__(self,
                 caller=APIHelper.SKIP,
                 is_replacement_chargeable=APIHelper.SKIP,
                 notify_caller=APIHelper.SKIP,
                 notify_caller_on_sync=APIHelper.SKIP,
                 order_card_replacement=APIHelper.SKIP,
                 card_settings=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 card_expiry_date=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 pan=APIHelper.SKIP,
                 panid=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP):
        """Constructor for the UpdateCard class"""

        # Initialize members of the class
        if caller is not APIHelper.SKIP:
            self.caller = caller 
        if is_replacement_chargeable is not APIHelper.SKIP:
            self.is_replacement_chargeable = is_replacement_chargeable 
        if notify_caller is not APIHelper.SKIP:
            self.notify_caller = notify_caller 
        if notify_caller_on_sync is not APIHelper.SKIP:
            self.notify_caller_on_sync = notify_caller_on_sync 
        if order_card_replacement is not APIHelper.SKIP:
            self.order_card_replacement = order_card_replacement 
        if card_settings is not APIHelper.SKIP:
            self.card_settings = card_settings 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if card_expiry_date is not APIHelper.SKIP:
            self.card_expiry_date = card_expiry_date 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if pan is not APIHelper.SKIP:
            self.pan = pan 
        if panid is not APIHelper.SKIP:
            self.panid = panid 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        caller = dictionary.get("Caller") if "Caller" in dictionary.keys() else APIHelper.SKIP
        is_replacement_chargeable = dictionary.get("IsReplacementChargeable") if "IsReplacementChargeable" in dictionary.keys() else APIHelper.SKIP
        notify_caller = dictionary.get("NotifyCaller") if "NotifyCaller" in dictionary.keys() else APIHelper.SKIP
        notify_caller_on_sync = dictionary.get("NotifyCallerOnSync") if "NotifyCallerOnSync" in dictionary.keys() else APIHelper.SKIP
        order_card_replacement = dictionary.get("OrderCardReplacement") if "OrderCardReplacement" in dictionary.keys() else APIHelper.SKIP
        card_settings = CardSettings.from_dictionary(dictionary.get('CardSettings')) if 'CardSettings' in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        card_expiry_date = dictionary.get("CardExpiryDate") if "CardExpiryDate" in dictionary.keys() else APIHelper.SKIP
        card_id = dictionary.get("CardId") if "CardId" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        pan = dictionary.get("PAN") if "PAN" in dictionary.keys() else APIHelper.SKIP
        panid = dictionary.get("PANID") if "PANID" in dictionary.keys() else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if "PayerId" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(caller,
                   is_replacement_chargeable,
                   notify_caller,
                   notify_caller_on_sync,
                   order_card_replacement,
                   card_settings,
                   account_id,
                   account_number,
                   card_expiry_date,
                   card_id,
                   col_co_code,
                   col_co_id,
                   pan,
                   panid,
                   payer_id,
                   payer_number)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'caller={(self.caller if hasattr(self, "caller") else None)!r}, '
                f'is_replacement_chargeable={(self.is_replacement_chargeable if hasattr(self, "is_replacement_chargeable") else None)!r}, '
                f'notify_caller={(self.notify_caller if hasattr(self, "notify_caller") else None)!r}, '
                f'notify_caller_on_sync={(self.notify_caller_on_sync if hasattr(self, "notify_caller_on_sync") else None)!r}, '
                f'order_card_replacement={(self.order_card_replacement if hasattr(self, "order_card_replacement") else None)!r}, '
                f'card_settings={(self.card_settings if hasattr(self, "card_settings") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'card_expiry_date={(self.card_expiry_date if hasattr(self, "card_expiry_date") else None)!r}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!r}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!r}, '
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!r}, '
                f'pan={(self.pan if hasattr(self, "pan") else None)!r}, '
                f'panid={(self.panid if hasattr(self, "panid") else None)!r}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!r}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'caller={(self.caller if hasattr(self, "caller") else None)!s}, '
                f'is_replacement_chargeable={(self.is_replacement_chargeable if hasattr(self, "is_replacement_chargeable") else None)!s}, '
                f'notify_caller={(self.notify_caller if hasattr(self, "notify_caller") else None)!s}, '
                f'notify_caller_on_sync={(self.notify_caller_on_sync if hasattr(self, "notify_caller_on_sync") else None)!s}, '
                f'order_card_replacement={(self.order_card_replacement if hasattr(self, "order_card_replacement") else None)!s}, '
                f'card_settings={(self.card_settings if hasattr(self, "card_settings") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'card_expiry_date={(self.card_expiry_date if hasattr(self, "card_expiry_date") else None)!s}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!s}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!s}, '
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!s}, '
                f'pan={(self.pan if hasattr(self, "pan") else None)!s}, '
                f'panid={(self.panid if hasattr(self, "panid") else None)!s}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!s}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!s})')
