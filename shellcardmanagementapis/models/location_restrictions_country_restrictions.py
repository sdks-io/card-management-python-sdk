# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class LocationRestrictionsCountryRestrictions(object):

    """Implementation of the 'LocationRestrictionsCountryRestrictions' model.

    An entity that encapsulate the country restrictions.
    Optional.

    Attributes:
        exclusive (bool): Boolean Flag indicates whether the profile is
            inclusive or exclusive.  Mandatory  Example: False - (inclusive),
            i.e. the “Countries” property lists the countries where the
            transactions will be allowed.  True - (exclusive), i.e. the
            “Countries” property lists the countries where the transactions
            will be declined.
        countries (List[str]): ISO 3166-1 Numeric-3 code of the country where
            the network restriction is applied.  Example: 826 for United
            Kingdom.  Mandatory

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "exclusive": 'Exclusive',
        "countries": 'Countries'
    }

    def __init__(self,
                 exclusive=None,
                 countries=None):
        """Constructor for the LocationRestrictionsCountryRestrictions class"""

        # Initialize members of the class
        self.exclusive = exclusive 
        self.countries = countries 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        exclusive = dictionary.get("Exclusive") if "Exclusive" in dictionary.keys() else None
        countries = dictionary.get("Countries") if dictionary.get("Countries") else None
        # Return an object of this model
        return cls(exclusive,
                   countries)
