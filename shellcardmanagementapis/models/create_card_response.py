# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper


class CreateCardResponse(object):

    """Implementation of the 'CreateCardResponse' model.

    This entity models the data that is sent in the http response body for
    this operation.

    Attributes:
        driver_and_vrn (str): Driver and VRN of the card. ;( semicolon) is
            used as delimiter
        order_card_reference (int): Reference number for each individual card
            in the order

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "driver_and_vrn": 'DriverAndVRN',
        "order_card_reference": 'OrderCardReference'
    }

    _optionals = [
        'driver_and_vrn',
        'order_card_reference',
    ]

    _nullables = [
        'driver_and_vrn',
        'order_card_reference',
    ]

    def __init__(self,
                 driver_and_vrn=APIHelper.SKIP,
                 order_card_reference=APIHelper.SKIP):
        """Constructor for the CreateCardResponse class"""

        # Initialize members of the class
        if driver_and_vrn is not APIHelper.SKIP:
            self.driver_and_vrn = driver_and_vrn 
        if order_card_reference is not APIHelper.SKIP:
            self.order_card_reference = order_card_reference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        driver_and_vrn = dictionary.get("DriverAndVRN") if "DriverAndVRN" in dictionary.keys() else APIHelper.SKIP
        order_card_reference = dictionary.get("OrderCardReference") if "OrderCardReference" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(driver_and_vrn,
                   order_card_reference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'driver_and_vrn={(self.driver_and_vrn if hasattr(self, "driver_and_vrn") else None)!r}, '
                f'order_card_reference={(self.order_card_reference if hasattr(self, "order_card_reference") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'driver_and_vrn={(self.driver_and_vrn if hasattr(self, "driver_and_vrn") else None)!s}, '
                f'order_card_reference={(self.order_card_reference if hasattr(self, "order_card_reference") else None)!s})')
