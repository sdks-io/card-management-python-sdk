# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.pin_delivery_details import PINDeliveryDetails


class PINReminderCardDetails(object):

    """Implementation of the 'PINReminderCardDetails' model.

    Request entity object for PINReminderCardDetails

    Attributes:
        card_id (int): Card Id   Optional if Either PANID AND CardExpiryDate
            or PAN AND CardExpiryDate is passed, else Mandatory. Example:
            275549 .<br/>Note:PANID, PAN & ExpiryDate parameters will be
            ignored if CardId is provided.
        panid (int): PAN ID - Unique PAN ID   Optional if Either CardId or PAN
            AND  ExpiryDate is passed, else Mandatory. Example: 123456.
            <br/>Note:PANID parameter will be considered only if CardId is not
            provided
        pan (str): PAN of the card.  Optional if Either CardId or PANID is
            passed, else Mandatory. <br/>Note:PAN & ExpiryDate parameters will
            be considered only if CardId & PANID are not provided
        card_expiry_date (str): Expiry date of the card.  Mandatory if Either
            PAN or PANID is passed, else optional.  Format: yyyyMMdd
        pin_advice_type (int): PIN delivery method.  Mandatory  Allowed
            Values:     1. Paper     2. Email     3. SMS
        pin_contact_type (int): PIN Contact Type.  Mandatory  Allowed Values: 
            1. Use PIN Delivery contact details stored previously for this
            card  2. Use Card Delivery contact details stored previously for
            this card  3. Use default PIN Delivery contact details stored for
            this customer  4. Use new specific contact for PIN Reminder only  
            Note: - PINContactType “3” is only allowed for Paper delivery
        pin_deliver_to (PINDeliveryDetails): PINDeliverDetails entity. The
            fields of this entity are described below.  This is mandatory if
            PINContactType is 4 else optional and ignored.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pin_advice_type": 'PINAdviceType',
        "card_id": 'CardId',
        "panid": 'PANID',
        "pan": 'PAN',
        "card_expiry_date": 'CardExpiryDate',
        "pin_contact_type": 'PINContactType',
        "pin_deliver_to": 'PINDeliverTo'
    }

    _optionals = [
        'card_id',
        'panid',
        'pan',
        'card_expiry_date',
        'pin_contact_type',
        'pin_deliver_to',
    ]

    _nullables = [
        'card_expiry_date',
    ]

    def __init__(self,
                 pin_advice_type=None,
                 card_id=APIHelper.SKIP,
                 panid=APIHelper.SKIP,
                 pan=APIHelper.SKIP,
                 card_expiry_date=APIHelper.SKIP,
                 pin_contact_type=APIHelper.SKIP,
                 pin_deliver_to=APIHelper.SKIP):
        """Constructor for the PINReminderCardDetails class"""

        # Initialize members of the class
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if panid is not APIHelper.SKIP:
            self.panid = panid 
        if pan is not APIHelper.SKIP:
            self.pan = pan 
        if card_expiry_date is not APIHelper.SKIP:
            self.card_expiry_date = card_expiry_date 
        self.pin_advice_type = pin_advice_type 
        if pin_contact_type is not APIHelper.SKIP:
            self.pin_contact_type = pin_contact_type 
        if pin_deliver_to is not APIHelper.SKIP:
            self.pin_deliver_to = pin_deliver_to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        pin_advice_type = dictionary.get("PINAdviceType") if dictionary.get("PINAdviceType") else None
        card_id = dictionary.get("CardId") if dictionary.get("CardId") else APIHelper.SKIP
        panid = dictionary.get("PANID") if dictionary.get("PANID") else APIHelper.SKIP
        pan = dictionary.get("PAN") if dictionary.get("PAN") else APIHelper.SKIP
        card_expiry_date = dictionary.get("CardExpiryDate") if "CardExpiryDate" in dictionary.keys() else APIHelper.SKIP
        pin_contact_type = dictionary.get("PINContactType") if dictionary.get("PINContactType") else APIHelper.SKIP
        pin_deliver_to = PINDeliveryDetails.from_dictionary(dictionary.get('PINDeliverTo')) if 'PINDeliverTo' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(pin_advice_type,
                   card_id,
                   panid,
                   pan,
                   card_expiry_date,
                   pin_contact_type,
                   pin_deliver_to)
