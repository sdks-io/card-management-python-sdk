# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.create_card_group_request_cards_items import CreateCardGroupRequestCardsItems


class CreateCardGroupRequest(object):

    """Implementation of the 'CreateCardGroupRequest' model.

    TODO: type model description here.

    Attributes:
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.   Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.  Example:  86-Philippines  5-UK
        col_co_id (int): Collecting Company Id  of the selected payer.  
            Optional if ColCoCode is passed else Mandatory.  Example: 
            1-Philippines  5-UK
        payer_number (str): Payer Number of the selected payer. Optional if
            PayerId is passed else Mandatory
        payer_id (int): Payer Id (i.e., Customer Id of the Payment Customer in
            H3 Cards Platform) of the selected payer. Optional if PayerNumber
            is passed else Mandatory
        account_id (int): Account ID of the customer. Optional if
            AccountNumber is passed else Mandatory.
        account_number (str): Account Number of the customer. Optional if
            AccountId is passed else Mandatory.
        print_on_card (bool): Whether card group name to be embossed on the
            cards or not.
        card_group_name (str): TODO: type description here.
        cards (List[CreateCardGroupRequestCardsItems]): List of cards to be
            moved to the new card group. This list is optional â€“ no card will
            be moved to the new card group when the list is empty. The fields
            of Card entity are described in the below rows. The maximum number
            of cards allowed to be moved in a request is 500 (configurable).
            The whole request including the card group creation will be
            rejected when the limit is exceeded.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "col_co_code": 'ColCoCode',
        "col_co_id": 'ColCoId',
        "payer_number": 'PayerNumber',
        "payer_id": 'PayerId',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "print_on_card": 'PrintOnCard',
        "card_group_name": 'CardGroupName',
        "cards": 'Cards'
    }

    _optionals = [
        'col_co_code',
        'col_co_id',
        'payer_number',
        'payer_id',
        'account_id',
        'account_number',
        'print_on_card',
        'card_group_name',
        'cards',
    ]

    _nullables = [
        'card_group_name',
    ]

    def __init__(self,
                 col_co_code=APIHelper.SKIP,
                 col_co_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 print_on_card=APIHelper.SKIP,
                 card_group_name=APIHelper.SKIP,
                 cards=APIHelper.SKIP):
        """Constructor for the CreateCardGroupRequest class"""

        # Initialize members of the class
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        if print_on_card is not APIHelper.SKIP:
            self.print_on_card = print_on_card 
        if card_group_name is not APIHelper.SKIP:
            self.card_group_name = card_group_name 
        if cards is not APIHelper.SKIP:
            self.cards = cards 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        col_co_code = dictionary.get("ColCoCode") if dictionary.get("ColCoCode") else APIHelper.SKIP
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if dictionary.get("PayerNumber") else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if dictionary.get("AccountId") else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if dictionary.get("AccountNumber") else APIHelper.SKIP
        print_on_card = dictionary.get("PrintOnCard") if "PrintOnCard" in dictionary.keys() else APIHelper.SKIP
        card_group_name = dictionary.get("CardGroupName") if "CardGroupName" in dictionary.keys() else APIHelper.SKIP
        cards = None
        if dictionary.get('Cards') is not None:
            cards = [CreateCardGroupRequestCardsItems.from_dictionary(x) for x in dictionary.get('Cards')]
        else:
            cards = APIHelper.SKIP
        # Return an object of this model
        return cls(col_co_code,
                   col_co_id,
                   payer_number,
                   payer_id,
                   account_id,
                   account_number,
                   print_on_card,
                   card_group_name,
                   cards)
