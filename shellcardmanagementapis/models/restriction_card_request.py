# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.restriction_card_request_cards_items import RestrictionCardRequestCardsItems


class RestrictionCardRequest(object):

    """Implementation of the 'RestrictionCardRequest' model.

    TODO: type model description here.

    Attributes:
        col_co_id (int): Collecting Company Id of the selected payer.  
            Optional if ColCoCode is passed else Mandatory.  Example:  1 for
            Philippines  5 for UK
        payer_number (str): Payer Number of the selected payer.  Optional if
            PayerId is passed else Mandatory  Example: GB000000123  List of
            restrictions to be applied on the card. The details of
            CardRestriction entity is given below.
        payer_id (int): Payer Id of the selected payer.  Optional if
            PayerNumber is passed else Mandatory  Example: 123456
        cards (List[RestrictionCardRequestCardsItems]): List of restrictions
            to be applied on the card. The details of CardRestriction entity
            is given below.
        col_co_code (int): Collecting Company Code (Shell Code) of the
            selected payer.   Mandatory for serviced OUs such as Romania,
            Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other
            countries if ColCoID is provided.  Example:  86 for Philippines  5
            for UK

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "col_co_id": 'ColCoId',
        "payer_number": 'PayerNumber',
        "payer_id": 'PayerId',
        "cards": 'Cards',
        "col_co_code": 'ColCoCode'
    }

    _optionals = [
        'col_co_id',
        'payer_number',
        'payer_id',
        'cards',
        'col_co_code',
    ]

    def __init__(self,
                 col_co_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 cards=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP):
        """Constructor for the RestrictionCardRequest class"""

        # Initialize members of the class
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if cards is not APIHelper.SKIP:
            self.cards = cards 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        col_co_id = dictionary.get("ColCoId") if dictionary.get("ColCoId") else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if dictionary.get("PayerNumber") else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if dictionary.get("PayerId") else APIHelper.SKIP
        cards = None
        if dictionary.get('Cards') is not None:
            cards = [RestrictionCardRequestCardsItems.from_dictionary(x) for x in dictionary.get('Cards')]
        else:
            cards = APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if dictionary.get("ColCoCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(col_co_id,
                   payer_number,
                   payer_id,
                   cards,
                   col_co_code)
