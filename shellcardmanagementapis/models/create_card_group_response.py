# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.create_card_group_response_error_cards_items import CreateCardGroupResponseErrorCardsItems
from shellcardmanagementapis.models.create_card_group_response_successful_requests_items import CreateCardGroupResponseSuccessfulRequestsItems
from shellcardmanagementapis.models.error_status import ErrorStatus


class CreateCardGroupResponse(object):

    """Implementation of the 'CreateCardGroupResponse' model.

    TODO: type model description here.

    Attributes:
        main_reference (int): Reference number for tracking the execution of
            the requests â€“ new Card Group creation and to move the cards to
            the new card group. Reference number will be null when the
            validations of new card group parameters fail.
        new_card_group_reference (int): Reference number for tracking the
            execution of card group creation.   Reference number will be null
            when the validations of new card group parameters fail.
        successful_requests
            (List[CreateCardGroupResponseSuccessfulRequestsItems]): List of
            cards validated and submitted successfully for processing.
        error_cards (List[CreateCardGroupResponseErrorCardsItems]): List of
            cards that failed validation and not submitted for processing.
            Entity: FailedCardReference This list will be empty when the
            validations of new card group parameters fail.
        error (ErrorStatus): TODO: type description here.
        request_id (str): API Request Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "main_reference": 'MainReference',
        "new_card_group_reference": 'NewCardGroupReference',
        "successful_requests": 'SuccessfulRequests',
        "error_cards": 'ErrorCards',
        "error": 'Error',
        "request_id": 'RequestId'
    }

    _optionals = [
        'main_reference',
        'new_card_group_reference',
        'successful_requests',
        'error_cards',
        'error',
        'request_id',
    ]

    def __init__(self,
                 main_reference=APIHelper.SKIP,
                 new_card_group_reference=APIHelper.SKIP,
                 successful_requests=APIHelper.SKIP,
                 error_cards=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 request_id=APIHelper.SKIP):
        """Constructor for the CreateCardGroupResponse class"""

        # Initialize members of the class
        if main_reference is not APIHelper.SKIP:
            self.main_reference = main_reference 
        if new_card_group_reference is not APIHelper.SKIP:
            self.new_card_group_reference = new_card_group_reference 
        if successful_requests is not APIHelper.SKIP:
            self.successful_requests = successful_requests 
        if error_cards is not APIHelper.SKIP:
            self.error_cards = error_cards 
        if error is not APIHelper.SKIP:
            self.error = error 
        if request_id is not APIHelper.SKIP:
            self.request_id = request_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        main_reference = dictionary.get("MainReference") if dictionary.get("MainReference") else APIHelper.SKIP
        new_card_group_reference = dictionary.get("NewCardGroupReference") if dictionary.get("NewCardGroupReference") else APIHelper.SKIP
        successful_requests = None
        if dictionary.get('SuccessfulRequests') is not None:
            successful_requests = [CreateCardGroupResponseSuccessfulRequestsItems.from_dictionary(x) for x in dictionary.get('SuccessfulRequests')]
        else:
            successful_requests = APIHelper.SKIP
        error_cards = None
        if dictionary.get('ErrorCards') is not None:
            error_cards = [CreateCardGroupResponseErrorCardsItems.from_dictionary(x) for x in dictionary.get('ErrorCards')]
        else:
            error_cards = APIHelper.SKIP
        error = ErrorStatus.from_dictionary(dictionary.get('Error')) if 'Error' in dictionary.keys() else APIHelper.SKIP
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else APIHelper.SKIP
        # Return an object of this model
        return cls(main_reference,
                   new_card_group_reference,
                   successful_requests,
                   error_cards,
                   error,
                   request_id)
