# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.bundle_restriction_update import BundleRestrictionUpdate


class UpdateBundleRequest(object):

    """Implementation of the 'UpdateBundleRequest' model.

    Attributes:
        col_co_id (int): Collecting Company Id  of the selected payer.  
            Optional if ColCoCode is passed else Mandatory.  Example:  1 for
            Philippines  5 for UK
        col_co_code (int): Collecting Company Code  of the selected payer.  
            Mandatory for serviced OUs such as Romania, Latvia, Lithuania,
            Estonia, Ukraine etc. It is optional for other countries if
            ColCoID is provided.  Example:  86 for Philippines  5 for UK
        payer_id (str): Payer Id of the selected payer. Either PayerId or
            PayerNumber or both must be passed. Example: 123456
        payer_number (str): Payer Number of the selected payer. Either PayerId
            or PayerNumber or both must be passed. Example: GB000000123
        account_id (int): Account ID of the customer. Either AccountId or
            AccountNumber or both must be passed. Example: 123456
        account_number (str): Account Number of the customer.   Either
            AccountId or AccountNumber or both must be passed.  Example:
            GB000000123
        bundle_id (str): Identifier of the bundle in Gateway. Mandatory
        request_action (str): The value indicates the action to be performed
            with the request. Mandatory Allowed values: •    Add •    Update •
            Remove
        cards (List[str]): List of Card PANs to be added in the bundle.
            Mandatory for Add / Remove request action. Ignored for Update
            action. Example: 7002051006629890645 When PAN matches with
            multiple cards, the restriction will be applied on the latest
            issued card.
        usage_restriction_action (str): The value indicates what actions to be
            performed with respect to usage restrictions on the list of cards
            being added or removed. Mandatory for Add / Remove request action.
            Ignored for Update action. Allowed values: •    Update •    None
        restrictions (BundleRestrictionUpdate): The model property of type
            BundleRestrictionUpdate.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bundle_id": 'BundleId',
        "request_action": 'RequestAction',
        "cards": 'Cards',
        "usage_restriction_action": 'UsageRestrictionAction',
        "col_co_id": 'ColCoId',
        "col_co_code": 'ColCoCode',
        "payer_id": 'PayerId',
        "payer_number": 'PayerNumber',
        "account_id": 'AccountId',
        "account_number": 'AccountNumber',
        "restrictions": 'Restrictions'
    }

    _optionals = [
        'col_co_id',
        'col_co_code',
        'payer_id',
        'payer_number',
        'account_id',
        'account_number',
        'restrictions',
    ]

    _nullables = [
        'col_co_id',
        'col_co_code',
        'payer_id',
        'payer_number',
        'account_id',
        'account_number',
        'bundle_id',
        'request_action',
        'usage_restriction_action',
    ]

    def __init__(self,
                 bundle_id=None,
                 request_action=None,
                 cards=None,
                 usage_restriction_action=None,
                 col_co_id=APIHelper.SKIP,
                 col_co_code=APIHelper.SKIP,
                 payer_id=APIHelper.SKIP,
                 payer_number=APIHelper.SKIP,
                 account_id=APIHelper.SKIP,
                 account_number=APIHelper.SKIP,
                 restrictions=APIHelper.SKIP):
        """Constructor for the UpdateBundleRequest class"""

        # Initialize members of the class
        if col_co_id is not APIHelper.SKIP:
            self.col_co_id = col_co_id 
        if col_co_code is not APIHelper.SKIP:
            self.col_co_code = col_co_code 
        if payer_id is not APIHelper.SKIP:
            self.payer_id = payer_id 
        if payer_number is not APIHelper.SKIP:
            self.payer_number = payer_number 
        if account_id is not APIHelper.SKIP:
            self.account_id = account_id 
        if account_number is not APIHelper.SKIP:
            self.account_number = account_number 
        self.bundle_id = bundle_id 
        self.request_action = request_action 
        self.cards = cards 
        self.usage_restriction_action = usage_restriction_action 
        if restrictions is not APIHelper.SKIP:
            self.restrictions = restrictions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bundle_id = dictionary.get("BundleId") if dictionary.get("BundleId") else None
        request_action = dictionary.get("RequestAction") if dictionary.get("RequestAction") else None
        cards = dictionary.get("Cards") if dictionary.get("Cards") else None
        usage_restriction_action = dictionary.get("UsageRestrictionAction") if dictionary.get("UsageRestrictionAction") else None
        col_co_id = dictionary.get("ColCoId") if "ColCoId" in dictionary.keys() else APIHelper.SKIP
        col_co_code = dictionary.get("ColCoCode") if "ColCoCode" in dictionary.keys() else APIHelper.SKIP
        payer_id = dictionary.get("PayerId") if "PayerId" in dictionary.keys() else APIHelper.SKIP
        payer_number = dictionary.get("PayerNumber") if "PayerNumber" in dictionary.keys() else APIHelper.SKIP
        account_id = dictionary.get("AccountId") if "AccountId" in dictionary.keys() else APIHelper.SKIP
        account_number = dictionary.get("AccountNumber") if "AccountNumber" in dictionary.keys() else APIHelper.SKIP
        restrictions = BundleRestrictionUpdate.from_dictionary(dictionary.get('Restrictions')) if 'Restrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bundle_id,
                   request_action,
                   cards,
                   usage_restriction_action,
                   col_co_id,
                   col_co_code,
                   payer_id,
                   payer_number,
                   account_id,
                   account_number,
                   restrictions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!r}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!r}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!r}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!r}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!r}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!r}, '
                f'bundle_id={self.bundle_id!r}, '
                f'request_action={self.request_action!r}, '
                f'cards={self.cards!r}, '
                f'usage_restriction_action={self.usage_restriction_action!r}, '
                f'restrictions={(self.restrictions if hasattr(self, "restrictions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'col_co_id={(self.col_co_id if hasattr(self, "col_co_id") else None)!s}, '
                f'col_co_code={(self.col_co_code if hasattr(self, "col_co_code") else None)!s}, '
                f'payer_id={(self.payer_id if hasattr(self, "payer_id") else None)!s}, '
                f'payer_number={(self.payer_number if hasattr(self, "payer_number") else None)!s}, '
                f'account_id={(self.account_id if hasattr(self, "account_id") else None)!s}, '
                f'account_number={(self.account_number if hasattr(self, "account_number") else None)!s}, '
                f'bundle_id={self.bundle_id!s}, '
                f'request_action={self.request_action!s}, '
                f'cards={self.cards!s}, '
                f'usage_restriction_action={self.usage_restriction_action!s}, '
                f'restrictions={(self.restrictions if hasattr(self, "restrictions") else None)!s})')
