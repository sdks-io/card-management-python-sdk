# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.configuration import Server
from shellcardmanagementapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellcardmanagementapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellcardmanagementapis.models.create_bundle_response import CreateBundleResponse
from shellcardmanagementapis.models.update_bundle_response import UpdateBundleResponse
from shellcardmanagementapis.models.delete_bundle_response import DeleteBundleResponse
from shellcardmanagementapis.models.summary_of_bundle_response import SummaryOfBundleResponse
from shellcardmanagementapis.models.restriction_card_response import RestrictionCardResponse
from shellcardmanagementapis.models.account_restriction_response import AccountRestrictionResponse
from shellcardmanagementapis.models.search_account_limit_response import SearchAccountLimitResponse
from shellcardmanagementapis.models.restriction_search_card_response import RestrictionSearchCardResponse
from shellcardmanagementapis.exceptions.error_object_exception import ErrorObjectException


class RestrictionController(BaseController):

    """A Controller to access Endpoints in the shellcardmanagementapis API."""
    def __init__(self, config):
        super(RestrictionController, self).__init__(config)

    def restriction_bundle_create(self,
                                  request_id,
                                  body=None):
        """Does a POST request to /card-restrictions/v1/bundles/create.

        This API enables clients to create a new card bundle and apply
        restrictions.
        #### Supported operations
          * Create bundle and include mandatory -
            * Usage, day/time, product and location restrictions
            * List of cards to add to bundle
          * Create bundle and include optional identifier of bundle in
          external system
        #### Validation rules
          The following are the key validation rules with the associated error
          codes for failed validation-
          * `7012` - At least one card must be added to the bundle
          *  `7011` - The total number of cards passed in the input must be
          500 or less.
          *  `7014` - All the cards passed in the input are part of the
          selected account.
          *  `7013` - At least one restriction must be applied to the bundle
          i.e. either of usage, day/time, location or product restriction.
          *  `7005` - Day time restriction cannot be set to restrict the use
          of a card on all days of the week.
          *  `7000` - Usage restriction of the bundle is not open ended i.e.
          all the limits within the usage restriction must not be set to
          0/null.
          *  `7004` - In the usage restrictions, the limits per transaction
          should be less than or equal to Daily, Daily should be less than or
          equal to Weekly, Weekly should be less than or equal to Monthly.
          Exception being 0/blank will be skipped, i.e. Daily value should be
          less than equal to Monthly value if Weekly value is 0/blank. 
          *  `0007` - Error returned if request parameters fail validation
          e.g. mandatory check.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CreateBundleRequest, optional): Create Bundle Request body

        Returns:
            CreateBundleResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/bundles/create')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateBundleResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def restriction_bundle_update(self,
                                  request_id,
                                  body=None):
        """Does a POST request to /card-restrictions/v1/bundles/update.

        This API enables clients to update an existing card bundle and its
        associated restrictions.
        #### Supported operations
          * Add new cards to an existing bundle
          * Remove cards from existing bundle
          * Update restrictions applied to existing bundle
          The following are the key validation rules with the associated error
          codes for failed validation-      
        #### Validation rules
          *  `9007` - The cards must exist in the cards platform for adding or
          removing cards.
          *  `7014` - All the cards passed in the input are part of the
          selected account.
          *  `7018` - All the cards passed in the input are part of the
          selected bundle.
          *  `7011` - The total number of cards passed in the input must be
          500 or less.
          *  `7012` - The action to remove cards should not result in removing
          all the cards from the bundle.
          *  `7016` - At least one restriction must be modified for
          â€œUpdateâ€ request action.
          *  `7013` - All restrictions cannot be marked for â€œResetâ€ for
          â€œUpdateâ€ request action.
          *  `7005` - Day time restriction cannot be set to restrict the use
          of a card on all days of the week. This validation is applicable for
          Update request action.
          *  `7000` - Usage restriction of the bundle is not open ended i.e.,
          all the limits within the usage restriction must not be set to
          0/null. This validation is applicable for Update request action.
          *  `7004` - In the usage restrictions, the limits per transaction
          should be less than or equal to Daily, Daily should be less than or
          equal to Weekly, Weekly should be less than or equal to Monthly.
          Exception being 0/blank will be skipped, i.e., Daily value should be
          less than equal to Monthly value if Weekly value is 0/blank. This
          validation is applicable for Update request action.
          *  `0007` - Error returned if request parameters fail validation
          e.g. at least one card must be provided in the input.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (UpdateBundleRequest, optional): Update Bundle Request body

        Returns:
            UpdateBundleResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/bundles/update')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateBundleResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def restriction_bundle_delete(self,
                                  request_id,
                                  body=None):
        """Does a POST request to /card-restrictions/v1/bundles/delete.

        This API enables clients to delete an existing card bundle in the
        Shell Card Platform. Once the card bundle is deleted the usage and
        product restrictions of the cards that were present in the bundle will
        be reset based on the request.
        #### Supported operations
          * Delete card bundle by bundle Id
        #### Validation rules
          The following are the key validation rules with the associated error
          codes for failed validation-
          *  `7019` - The given card bundle is not available in the Shell Card
          Platform. 
          *  `0007` - Error returned if request parameters fail validation
          e.g. mandatory check.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (DeleteBundleRequest, optional): Delete Bundle Request body

        Returns:
            DeleteBundleResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/bundles/delete')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteBundleResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def restriction_bundle_summary(self,
                                   request_id,
                                   body=None):
        """Does a POST request to /card-restrictions/v1/bundles/Summary.

        This API allows clients to get a summary of card bundles associated
        with Payer/Account. This API will return the basic bundle details
        including card and restriction details. Optionally the API will also
        include a count of cards that are not associated with the bundle but
        returned by the search criteria.
        Note - to include count of cards of an account that are not associated
        with any bundles, in the input parameter SearchCardBundles either pass
        all the bundles of the account in the list or pass only account with
        bundle id left blank/null.
        #### Supported operations
          * Get summary of bundles by list of bundle Ids

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (SummaryOfBundleRequest, optional): Summary Bundle Request
                body

        Returns:
            SummaryOfBundleResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/bundles/Summary')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SummaryOfBundleResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def card_restriction(self,
                         request_id,
                         body=None):
        """Does a POST request to /card-restrictions/v2/card.

        This API allows to set or update the restrictions for existing cards
        or newly ordered cards under the same payer.
          #### Supported operations
          * Set or reset usage restrictions for cards
          * Set or reset day/time restrictions for cards
          * Set or reset product restrictions for cards
          * Set or reset location restrictions for cards

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (RestrictionCardRequest, optional): Summary Bundle Request
                body

        Returns:
            RestrictionCardResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v2/card')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RestrictionCardResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def account_restriction(self,
                            request_id,
                            body=None):
        """Does a POST request to /card-restrictions/v1/Account.

        This operation allows setting or updating the usage restrictions of an
        existing account. 
        #### Validation rules
        *	The account exists.
        *	Day time restriction cannot be set to restrict the use of a card,
        under the account, on all days of the week.
        *	Either of the usage, daytime or location is either marked for reset
        or new restriction values provided for the account.
        *	In usage restrictions, the limits per transaction should be less
        than or equal to Daily, Daily should be less than or equal to Weekly,
        Weekly should be less than or equal to Monthly. Exception being
        0/blank will be skipped, i.e., Daily value should be less than equal
        to Monthly value if Weekly value is 0/blank.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (AccountRestrictionRequest, optional): Summary Bundle Request
                body

        Returns:
            AccountRestrictionResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/Account')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountRestrictionResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def search_account_limit(self,
                             request_id,
                             body=None):
        """Does a POST request to /card-restrictions/v1/searchaccountlimit.

        This operation will allow user to get account level limits for the
        given account. 
        It returns the velocity limits if its overridden at the account else
        the values will be null/empty.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (SearchAccountLimitRequest, optional): Summary Bundle Request
                body

        Returns:
            SearchAccountLimitResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v1/searchaccountlimit')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SearchAccountLimitResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()

    def search_card_restriction(self,
                                request_id,
                                body=None):
        """Does a POST request to /card-restrictions/v2/search.

        This API will allows querying card details including the day/time and
        product restrictions.
        #### Supported operations
          * Search by list of cards or bundle
          * Include card bundle details (optional)

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (RestrictionSearchCardRequest, optional): Summary Bundle
                Request body

        Returns:
            RestrictionSearchCardResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/card-restrictions/v2/search')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RestrictionSearchCardResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.\n', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.\n', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.\n', ErrorObjectException)
        ).execute()
