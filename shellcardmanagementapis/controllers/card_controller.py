# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.configuration import Server
from shellcardmanagementapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from shellcardmanagementapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from shellcardmanagementapis.models.card_search_response import CardSearchResponse
from shellcardmanagementapis.models.card_summary_response import CardSummaryResponse
from shellcardmanagementapis.models.order_card_response import OrderCardResponse
from shellcardmanagementapis.models.order_card_enquiry_response import OrderCardEnquiryResponse
from shellcardmanagementapis.models.cancel_card_response import CancelCardResponse
from shellcardmanagementapis.models.update_card_status_response import UpdateCardStatusResponse
from shellcardmanagementapis.models.purchase_category_response import PurchaseCategoryResponse
from shellcardmanagementapis.models.card_details_response import CardDetailsResponse
from shellcardmanagementapis.models.card_move_response import CardMoveResponse
from shellcardmanagementapis.models.pin_reminder_response import PINReminderResponse
from shellcardmanagementapis.models.schedule_card_block_response import ScheduleCardBlockResponse
from shellcardmanagementapis.models.auto_renew_card_response import AutoRenewCardResponse
from shellcardmanagementapis.models.update_m_pay_reg_status_response import UpdateMPayRegStatusResponse
from shellcardmanagementapis.models.generate_pin_key_response import GeneratePINKeyResponse
from shellcardmanagementapis.models.delivery_address_update_response import DeliveryAddressUpdateResponse
from shellcardmanagementapis.exceptions.error_object_exception import ErrorObjectException
from shellcardmanagementapis.exceptions.api_exception import APIException


class CardController(BaseController):

    """A Controller to access Endpoints in the shellcardmanagementapis API."""
    def __init__(self, config):
        super(CardController, self).__init__(config)

    def searchcard(self,
                   request_id,
                   body=None):
        """Does a POST request to /card-management/v1/search.

        This API allows to search for Shell Cards in the Shell Card Platform.
        It provides flexible search criteria and supports paging.
        #### New version updates
          * Oauth authentication to access the API
          * New parameters have been added in the response. Below are the list
          of parameters added
              * IsEMVContact
              * IsEMVContactless
              * IsRFID
              * RFIDUID
              * EMAID
              * EVPrintedNumber
              * CardMediaCode
        #### Supported operations
          * Search cards by card id or PAN
          * Search cards by card status
          * Search cards by excluding card status
          * Search cards by date fields
          * Search cards by embossed fields
          * Search cards by card configuration fields
          * Search cards by included/excluded list of cards
          * Search cards by excluding card bundle Id

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (SearchCardRequest, optional): requestbody

        Returns:
            CardSearchResponse: Response from the API. List of fuel cards. The
                http status code 200 and the Error.Code '0000' in the response
                body would indicate the API call is successful. The http
                status code 200 with Error Code other than '0000' in the
                response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/search')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardSearchResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', ErrorObjectException)
        ).execute()

    def cardsummary(self,
                    request_id,
                    body=None):
        """Does a POST request to /card-management/v1/summary.

        This API allows to search for fuel cards in the Shell Card Platform
        and returns a high-level summary count. It provides flexible search
        criteria.
        #### New version updates
          * Oauth authentication to access the API
          * Minor change in response structure with addition of Status
          parameter
          
        #### Supported operations
          * Search cards by card id or PAN
          * Search cards by card status
          * Search cards by excluding card status
          * Search cards by date fields
          * Search cards by embossed fields
          * Search cards by card configuration fields
          * Search cards by included/excluded list of cards

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardSummaryRequest, optional): summary request body

        Returns:
            CardSummaryResponse: Response from the API. Summary count of fuel
                cards. The http status code 200 and the Error.Code "0000" in
                the response body would indicate the API call is successful.
                The http status code 200 with Error Code other than "0000" in
                the response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/summary')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardSummaryResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', ErrorObjectException)
        ).execute()

    def cardordercard(self,
                      request_id,
                      body=None):
        """Does a POST request to /card-management/v1/ordercard.

        This API allows ordering one or more fuel cards (up to 50). If the API
        call succeeds, the API will return a reference number and queue the
        request for asynchronous processing.
        #### New version updates
          * Oauth authentication to access the API
          * New parameters have been added in the response for the new PIN
          management changes. Below parameters needs to be derived from the
          new PIN encryption method explained in our Mobility Card PIN
          Management product.  
              * SelfSelectedEncryptedPIN
              * SelfSelectedPINKeyID
              * SelfSelectedPINSessionKey
          * New parameters have been added in the response for card and pin
          delivery mechanism which gives the opportunity to deliver card & pin
          by email, SMS or post. 
            Also the possibility to deliver card and pin to different address
            if the use case demands. 
              * CardDeliveryType
              * PINDeliveryAddressType
              * PINAdviceType
              * PINContact
              * CardContact
        #### Supported operations
          * Order one or more cards (up to 50)
          * Order card with self selected PIN
          * Order card with vehicle registration number
          * Order card and add to new or exisitng card group
          * Order card and enable fleetId or odemeter input
          * Order card and specify product groups
        #### Validation rules
        * Number of cards per request does not exceed 50
        #### API response 
        * A main reference number for the API request (**OrderReference**)
        * Individual reference numbers (**OrderCardReference**) for each new
        card

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardManagementV1OrdercardRequest, optional): Order card
                request body

        Returns:
            OrderCardResponse: Response from the API. Fuel card order
                reference details. The http status code 200 and the Error.Code
                "0000" in the response body would indicate the API call is
                successful. The http status code 200 with Error Code other
                than "0000" in the response body would indicate there is a
                failure in the API call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/ordercard')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrderCardResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def cardordercardenquiry(self,
                             request_id,
                             body=None):
        """Does a POST request to /card-management/v1/ordercardenquiry.

        This API retrieves the card order status from the Shell Card Platform
        based on the given reference numbers.
          #### New version updates
            * Oauth authentication to access the API
            * Minor change in response structure with addition of Status
            parameter
          #### Supported operations
            * Get order status by Bulk Card Order Reference
            * Get order status by Order Reference (main reference for the
            order)
            * Get order status by Card Reference (individual card reference
            belonging to an order reference)

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (OrderCardEnquiryRequest, optional): Order Card Enquiry
                request body

        Returns:
            OrderCardEnquiryResponse: Response from the API. List of fuel
                cards. The http status code 200 and the Error.Code '0000' in
                the response body would indicate the API call is successful.
                The http status code 200 with Error Code other than '0000' in
                the response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/ordercardenquiry')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrderCardEnquiryResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def cardcancel(self,
                   request_id,
                   body=None):
        """Does a POST request to /card-management/v1/cancel.

        This API allows cancelling one or multiple cards (up to 500) within a
        single API call. This API allows updating of
          the card to the following status-
        *  Block (Cancelled)
        #### New version updates
          * Oauth authentication to access the API
          * Change in the request body
            * PIN delivery address details have been added along with Email
            and Phone number for card and PIN delivery.
        Requests that passed the below validations are queued-
          * All Mandatory fields are passed.
          *  Card is present in the Shell Card Platform.
          *  Only one matching card is available in the cards platform for the
          given PAN and expiry date for Block requests.
          *  Card is allowed to be moved to proposed state as per the card
          status transition configuration in cards platform.
          *  A valid Reason Id or Reason Text is provided. The reason for card
          cancellation can be “Damaged” or “NoLongerRequired”. 
          *  For the given card, there is no Cancel request already submitted
          via this API and is being processed.
          *  ‘IsReplacementChargeable’ is set to ‘False’ only to the
          configured customer, other customers need to set it as ‘True’ only.
          If other customers pass this value as ‘False’.
          Note- Shell Card Platform will maintain the list of   customers, to
          whom ‘IsReplacementChargeable’ can be set as ‘False’.
        If all validations are passed, the request will be accepted and the
        API will return reference numbers for tracking purpose. If any of the
        validations fail, the API will return the appropriate error details on
        response.  The API response will include-
          *  A main reference number for the API request.
          *  A list of successfully validated and accepted cards along with
          the individual reference numbers for each of the successful
          requests.
          *  A list of cards for which at least validation has failed along
          with the appropriate error code and details.
          A permanent block (cancelled) request for the card will be queued in
          Shell Card Platform after the configured damaged card active period
          (configured as number of days).
          
          When a card is requested to be Blocked permanently (cancelled) for
          which a request has already been submitted to report as Damaged and
          the damaged card active period is not yet completed, the damaged
          card request will be marked as superseded and the new Block
          (cancelled) request will be processed.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardManagementV1CancelRequest, optional): Update status
                request body

        Returns:
            CancelCardResponse: Response from the API. Cancel cards response.
                The http status code 200 and the Error.Code '0000' in the
                response body would indicate the API call is successful. The
                http status code 200 with Error Code other than '0000' in the
                response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/cancel')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancelCardResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def cardupdatestatus(self,
                         request_id,
                         body=None):
        """Does a POST request to /card-management/v1/updatestatus.

        This API allows updating of the card status for one or more cards (up
        to 500) within a single API call.  If the API call succeeds, the API
        will return a reference number and queue the request for asynchronous
        processing. 
        #### New version updates
          * Oauth authentication to access the API
          * Change in the request body
            * Pin change related parameters - SelfSelectedEncryptedPIN,
            SelfSelectedPINKeyID, SelfSelectedPINSessionKey
            * PIN delivery address details have been added along with Email
            and Phone number for card and PIN delivery. 
            * SaveForPINReminder - The given address will be used for sending
            PIN reminders in future when requested.
            * SaveForCardReissue - If this is specified, the contact address
            will be saved in cards platform for card reissue processing.
        #### Supported operations
          * Updating a card status to Temporary block, Unblock, Block
          (Cancelled)
            or Damaged
          * Requesting a replacement card when status is set to Block or
          Damaged
        #### Validation rules 
          * Number of cards per request does not exceed 500
          * A card can be changed to proposed status as per the card status
          transition configuration in the Shell Card Platform
          * Locating a card -
            * If target status set to **TemporaryBlock**, then only one
            matching active card should exist in the Shell Card Platform for
            the given **PAN** and **CardExpiryDate**
            * If target status set to **Unblock** or **Block**, then only one
            matching card should exist in the Shell Card Platform for the
            given **PAN** and **CardExpiryDate**
          * A valid Reason Id or Reason Text is provided
            * If target status set to **Block** or **Damaged** and a
            **ReasonText** is provided, the value must be from the fixed list
            - *'Lost'*, *'Stolen'* or *'Card no longer required'*
          * For the given card, there is no Status Update request already
          submitted via this API and is being processed
          * The **OrderReplacementCard** field is set to True only for cards
          with a target status set to Block or Damaged
        #### API response 
          * A main reference number for the API request
          (**OrderReplacementReference**)
          * A list of successfully validated and accepted cards along with the
          individual reference numbers (**UpdateCardReference**) for each of
          the successful  request 
          * A list of cards (**ErrorCards**) that failed validation along with
          the appropriate error code and message
        #### Asynchronous processing of valid API request 
          * Replacement cards
            * Request for a replacement card will be placed only when the
            Block card or Block damaged card request is successfully placed.
            * The Replacement card request will be processed only when the
            permanent Block card request is successfully processed. In case of
            damaged card request, the replacement card request will be
            processed immediately.
          * Damaged cards
            * Setting a card to Damaged will automatically trigger a request
            to permanently block the card. This will only take effect once the
            ‘Damaged Active’ period has passed.
            * The Damaged card active period is the number of days after which
            a "Damaged" card request will be processed. This value is
            configured at ColCo level.
            * If a card is reported as damaged at 10pm local time on 1st Nov
            and the damaged card period is set to 10 days, then the block
            request will be submitted to the Shell Card Platform on 11th Nov
            00-01 local time.
            * If during the damage card active period another request is made
            to set the card to Temporarily Blocked or Blocked permanently
            (cancelled), then the damaged card request will be marked as
            superseded and the new Temporary Block or Block (cancelled) will
            be processed.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardManagementV1UpdatestatusRequest, optional): Update
                status request body

        Returns:
            UpdateCardStatusResponse: Response from the API. Update cards
                status response.The http status code 200 and the Error.Code
                '0000' in the response body would indicate the API call is
                successful. The http status code 200 with Error Code other
                than '0000' in the response body would indicate there is a
                failure in the API call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/updatestatus')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateCardStatusResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def purchase_category(self,
                          apikey,
                          request_id,
                          body=None):
        """Does a POST request to /fleetmanagement/v1/master/purchasecategory.

        This API will allow querying the purchase categories of Card
         for the given country and/or card type.
          It will also include the below data associated with each of the
          purchase categories on it’s response.
          *  List of fuel and non-fuel product sets associated. 
          *  List of products configured in each product set

        Args:
            apikey (str): This is the API key of the specific environment
                which needs to be passed by the client.
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (PurchaseCategoryRequest, optional): PurchaseCategory request
                body

        Returns:
            PurchaseCategoryResponse: Response from the API. The http status
                code 200 and the Error.Code "0000" in the response body would
                indicate the API call is successful. The http status code 200
                with Error Code other than "0000" in the response body would
                indicate there is a failure in the API call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/fleetmanagement/v1/master/purchasecategory')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('apikey')
                          .value(apikey))
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PurchaseCategoryResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request  due to something that is perceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'The server understood the request but refuses to authorize it.', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition the prevented it from fulfilling the request.', APIException)
        ).execute()

    def carddetails(self,
                    apikey,
                    request_id,
                    body=None):
        """Does a POST request to /fleetmanagement/v1/card/card.

        This API allows to fetch details of a single fuel card from the Shell
        Card Platform. If a **CardId** request parameter is provided, this
        will return a single card.  If a **PAN** request parameter is
        provided, this may result in multiple fuel cards matching the search
        criteria. The card details of the most recently issued card will be
        returned.
          #### Supported operations
          * Get card by card id or PAN

        Args:
            apikey (str): This is the API key of the specific environment
                which needs to be passed by the client.
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardDetailsRequest, optional): Card details request body

        Returns:
            CardDetailsResponse: Response from the API. Details of requested
                fuel Card.The http status code 200 and the Error.Code "0000"
                in the response body would indicate the API call is
                successful. The http status code 200 with Error Code other
                than "0000" in the response body would indicate there is a
                failure in the API call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/fleetmanagement/v1/card/card')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('apikey')
                          .value(apikey))
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardDetailsResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request  due to something that is perceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'The server understood the request but refuses to authorize it.', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition the prevented it from fulfilling the request.', APIException)
        ).execute()

    def card_move(self,
                  apikey,
                  request_id,
                  body=None):
        """Does a POST request to /fleetmanagement/v1/card/move.

        This API allows to move one or more fuel cards (up to 500) across card
        groups within a single account or across accounts under the same
        payer. If the API call succeeds, the API will return a reference
        number and queue the request for asynchronous processing.
        #### Supported operations
          * Moving card to exisitng card group
          * Moving card to new card group
          * Removing a card from a card group 
        #### Validation rules
          * Number of cards per request does not exceed 500
          * Given **PAN** for a card matches with only one card
          * A card is allowed to be moved to the **TargetCardGroupId** or
          **TargetAccountNumber**
          * A pending move request does not exist in the queue for a card
          submitted on the same date (customers local)
          * A card has not been moved as part of a previous request on the
          same date (customers local)
        #### API response 
          * A main reference number for the API request
          (**MoveCardRequestReference**)
          * Individual reference numbers (**MoveCardReference**) for each card
          move request that passes validation  
          * A list of cards (**ErrorCards**) that failed validation along with
          the appropriate error code and message
        #### Asynchronous processing of valid API request 
          * Move card requests that have been submitted and processed will be
          reflected after midnight according to the customers local date

        Args:
            apikey (str): This is the API key of the specific environment
                which needs to be passed by the client.
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardMoveRequest, optional): Move cards request body.

        Returns:
            CardMoveResponse: Response from the API. Move Card response.The
                http status code 200 and the Error.Code '0000' in the response
                body would indicate the API call is successful. The http
                status code 200 with Error Code other than '0000' in the
                response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/fleetmanagement/v1/card/move')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('apikey')
                          .value(apikey))
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CardMoveResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request  due to something that is perceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'The server understood the request but refuses to authorize it.', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition the prevented it from fulfilling the request.', APIException)
        ).execute()

    def cardpinreminder(self,
                        request_id,
                        body=None):
        """Does a POST request to /card-management/v1/pinreminder.

        This API allows requesting a PIN reminder for a fuel card. If the API
        call succeeds, the API will return a reference number and queue the
        request for asynchronous processing. 
        #### New version updates
          * Oauth authentication to access the API
          * Change in request body where PIN delivery type can be requested
          via Email, SMS or Post. PIN delivery contact can be set to different
          values based on previous contact details of card or pin delivery or
          can set specific contact details for this request. 
            * PINAdviceType
            * PINContactType
            * PINDeliverTo 
          * Please note that we have a **savePINReminder** parameter in order
          to save the contact details for future such requests. 
          * Change in response body where Card details are also provided along
          with expiry date and PAN details. 
        #### Supported operations
          * Request a pin reminder by card Id or PAN
        #### Validation rules
          * Given **PAN** or **CardId** is active
          * Given **PAN** matches only one active card
          * Requested card has PIN
          * There is no pending PIN Reminder request in the queue awaiting to
          be processed for the card
          * A PIN reminder request has not been successfully processed in the
          last 48 hours for the card

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (CardManagementV1PinreminderRequest, optional): PIN reminder
                request body

        Returns:
            PINReminderResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/pinreminder')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PINReminderResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', ErrorObjectException)
            .local_error('403', 'Forbidden', ErrorObjectException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', ErrorObjectException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', ErrorObjectException)
        ).execute()

    def schedule_card_block(self,
                            request_id,
                            body=None):
        """Does a POST request to /card-management/v1/schedulecardblock.

        This API allows scheduling Card Block / Unblock requests for one or
        multiple cards (up to 500 (configurable)) within a single API call.
        This API is used to perform the following Actions:
        >  
           *  AddOrUpdate (Schedule a new request or update an existing    
           scheduled request for the overlapping period.
           *  AddAndOverwriteAll (all the existing requests of the given card
           will be removed and a new request with the specified FromDate and
           ToDate will be added.)
           *  Delete (Deletes the scheduled request for the same From and To
           date)
           *  DeleteAll (Deletes all the scheduled requests for the given
           card)
        > Requests that passed the below validations are queue:
        *  All Mandatory fields are passed in the request.
        *  Card is present in the Shell Card Platform. Only one matching card
        is available in the cards platform for the given PAN and expiry date
        for the requests
        *  The scheduled period start date or end date should be later than or
        equal to the current date.  
        > If all validations are passed, the request will be accepted and
        saved in the intermediate queue  and the API will return reference
        numbers for tracking purpose. 
        > A background service will execute the block/unblock requests on a
        daily basis, based on the scheduled block or unblock date.
          
          *  The newly added block/unblock request will have a status ‘A’ when
          it is yet to be moved to the actual queue. 
          *  When the request is moved to the actual queue table, the status
          will be updated as ‘P’ if the request has a value for ‘ToDate’,
          else, the status will be updated as ‘S’ or ‘F’ based on whether the
          request has been successfully moved to the actual queue table or if
          an error is encountered during processing. 
          
          *  When the unblock request is moved to the actual queue table, the
          status of the request will be changed from ‘P’ to ‘S’ or ‘F’ based
          on whether the request has been successfully moved to the actual
          queue table or if an error has occurred during processing.
        > If any of the validations fail, the API will return the appropriate
        error details in the response. 
        > The API response will include:
          *  An error entity holding the details of any error encountered.
          * A list of submitted cards along with the individual reference
          numbers for each of the request.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (ScheduleCardBlockRequest, optional): request body

        Returns:
            ScheduleCardBlockResponse: Response from the API. List of fuel
                cards. The http status code 200 and the Error.Code '0000' in
                the response body would indicate the API call is successful.
                The http status code 200 with Error Code other than '0000' in
                the response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/schedulecardblock')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ScheduleCardBlockResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def autorenew(self,
                  request_id,
                  body=None):
        """Does a POST request to /card-management/v1/autorenew.

        This API allows to update the reissue indicator of a single card. If
        the API call succeeds, the API will return a reference number for
        tracking purposes and queue the request for asynchronous processing.
        #### Supported operations
          * Update the reissue indicator of a card to enable auto renewal
          * Update the reissue indicator of a card to disable auto renewal
        #### Validation rules
          * Card status must be either Active, Temporary Block (Customer),
          Temporary Block (Shell) or Pending Renewal, otherwise an error code
          9016 is returned
          
        #### API response
          * Returns a reference number for the API request
          (**AutoRenewReference**)
        #### Asynchronous processing of valid API request
          * If the provided card is superseded i.e. a replacement/new card is
          already issued, then the latest card's reissue indicator should be
          updated in the Shell Card Platform.
          * Providing a **PAN** request paramter may result in multiple fuel
          cards being located in the Shell Card Platform. The card details of
          the most recently issued card will be considered.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (AutoRenewCardRequest, optional): Auto renew request body

        Returns:
            AutoRenewCardResponse: Response from the API. Auto renew
                response.The http status code 200 and the Error.Code '0000' in
                the response body would indicate the API call is successful.
                The http status code 200 with Error Code other than '0000' in
                the response body would indicate there is a failure in the API
                call.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/autorenew')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AutoRenewCardResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def updatemobilepaymentregistrationstatus(self,
                                              request_id,
                                              body=None):
        """Does a POST request to /card-management/v1/updatemobilepaymentregistrationstatus.

        This operation allows  update the approval status of Mobile Payment
        Registration requests requiring for Fleet Manager approval.
        If the approval status is:
        *    “Approved” then the request status will be changed to Pending for
        processing. 
        *    “Rejected” then status will be updated to “CI” (Failed) with
        appropriate error message. 

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            body (UpdateMPayRegStatusRequest, optional): Request body

        Returns:
            UpdateMPayRegStatusResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/card-management/v1/updatemobilepaymentregistrationstatus')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateMPayRegStatusResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).', ErrorObjectException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'Forbidden', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition that  prevented it from fulfilling the request.', APIException)
        ).execute()

    def getkey(self,
               request_id,
               fleet=None):
        """Does a GET request to /pin-management/v1/generatepinkeys.

        Get a new public key that will be used to encrypt data for selected
        PIN process when ordering new Shell Card. This encrypted data is used
        for further processing.

        Args:
            request_id (str): Mandatory UUID (according to RFC 4122 standards)
                for requests and responses. This will be played back in the
                response from the request.
            fleet (bool, optional): If the public key will be used a long time
                for multiple files this parameter will be true. If the
                parameter is true then public Key will be valid for 90 days.
                If the parameter is false then the key will be valid for one
                time. default value will be false.

        Returns:
            GeneratePINKeyResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/pin-management/v1/generatepinkeys')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('RequestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('fleet')
                         .value(fleet))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('BearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GeneratePINKeyResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request  due to something that is perceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'The server understood the request but refuses to authorize it.', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition the prevented it from fulfilling the request.', APIException)
        ).execute()

    def deliveryaddressupdate(self,
                              apikey,
                              body=None):
        """Does a POST request to /fleetmanagement/v1/card/deliveryaddressupdate.

        This API allows users to update the card’s delivery addresses (card
        delivery address used for card re-issue and PIN delivery address used
        when PIN reminder is requested)
        #### Supported operations
          * card delivery address update

        Args:
            apikey (str): This is the API key of the specific environment
                which needs to be passed by the client.
            body (DeliveryAddressUpdateRequest, optional): Delivery Address
                Update Request Body

        Returns:
            DeliveryAddressUpdateResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SHELL)
            .path('/fleetmanagement/v1/card/deliveryaddressupdate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('apikey')
                          .value(apikey))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('BasicAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeliveryAddressUpdateResponse.from_dictionary)
            .local_error('400', 'The server cannot or will not process the request  due to something that is perceived to be a client\r\n error (e.g., malformed request syntax, invalid \r\n request message framing, or deceptive request routing).', APIException)
            .local_error('401', 'The request has not been applied because it lacks valid  authentication credentials for the target resource.', APIException)
            .local_error('403', 'The server understood the request but refuses to authorize it.', APIException)
            .local_error('404', 'The origin server did not find a current representation  for the target resource or is not willing to disclose  that one exists.', APIException)
            .local_error('500', 'The server encountered an unexpected condition the prevented it from fulfilling the request.', APIException)
        ).execute()
